
den4ik_deeplom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001568  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08001698  08001698  00011698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018ac  080018ac  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080018ac  080018ac  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018ac  080018ac  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018ac  080018ac  000118ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018b0  080018b0  000118b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080018b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000068  0800191c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  0800191c  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000de8  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003aa  00000000  00000000  00020e79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000e0  00000000  00000000  00021228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000b8  00000000  00000000  00021308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011099  00000000  00000000  000213c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000101d  00000000  00000000  00032459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058f77  00000000  00000000  00033476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008c3ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a04  00000000  00000000  0008c440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000068 	.word	0x20000068
 800014c:	00000000 	.word	0x00000000
 8000150:	08001680 	.word	0x08001680

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000006c 	.word	0x2000006c
 800016c:	08001680 	.word	0x08001680

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	4603      	mov	r3, r0
 8000188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	2b00      	cmp	r3, #0
 8000190:	db0b      	blt.n	80001aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	f003 021f 	and.w	r2, r3, #31
 8000198:	4906      	ldr	r1, [pc, #24]	; (80001b4 <__NVIC_EnableIRQ+0x34>)
 800019a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800019e:	095b      	lsrs	r3, r3, #5
 80001a0:	2001      	movs	r0, #1
 80001a2:	fa00 f202 	lsl.w	r2, r0, r2
 80001a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001aa:	bf00      	nop
 80001ac:	370c      	adds	r7, #12
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	e000e100 	.word	0xe000e100

080001b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001b8:	b480      	push	{r7}
 80001ba:	b083      	sub	sp, #12
 80001bc:	af00      	add	r7, sp, #0
 80001be:	4603      	mov	r3, r0
 80001c0:	6039      	str	r1, [r7, #0]
 80001c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	db0a      	blt.n	80001e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001cc:	683b      	ldr	r3, [r7, #0]
 80001ce:	b2da      	uxtb	r2, r3
 80001d0:	490c      	ldr	r1, [pc, #48]	; (8000204 <__NVIC_SetPriority+0x4c>)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	0112      	lsls	r2, r2, #4
 80001d8:	b2d2      	uxtb	r2, r2
 80001da:	440b      	add	r3, r1
 80001dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001e0:	e00a      	b.n	80001f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	b2da      	uxtb	r2, r3
 80001e6:	4908      	ldr	r1, [pc, #32]	; (8000208 <__NVIC_SetPriority+0x50>)
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	f003 030f 	and.w	r3, r3, #15
 80001ee:	3b04      	subs	r3, #4
 80001f0:	0112      	lsls	r2, r2, #4
 80001f2:	b2d2      	uxtb	r2, r2
 80001f4:	440b      	add	r3, r1
 80001f6:	761a      	strb	r2, [r3, #24]
}
 80001f8:	bf00      	nop
 80001fa:	370c      	adds	r7, #12
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bc80      	pop	{r7}
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	e000e100 	.word	0xe000e100
 8000208:	e000ed00 	.word	0xe000ed00

0800020c <initClk>:
char TxBuffer[TX_BUFF_SIZE];					//Буфер передачи USART
bool ComReceived;
int32_t rotation = 0;
uint32_t MAX_ROTATION = 1000;
void initClk(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
	// Enable HSI
	RCC->CR |= RCC_CR_HSION;
 8000210:	4b2e      	ldr	r3, [pc, #184]	; (80002cc <initClk+0xc0>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a2d      	ldr	r2, [pc, #180]	; (80002cc <initClk+0xc0>)
 8000216:	f043 0301 	orr.w	r3, r3, #1
 800021a:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSIRDY)){};
 800021c:	bf00      	nop
 800021e:	4b2b      	ldr	r3, [pc, #172]	; (80002cc <initClk+0xc0>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f003 0302 	and.w	r3, r3, #2
 8000226:	2b00      	cmp	r3, #0
 8000228:	d0f9      	beq.n	800021e <initClk+0x12>
	// Enable Prefetch Buffer
	FLASH->ACR |= FLASH_ACR_PRFTBE;
 800022a:	4b29      	ldr	r3, [pc, #164]	; (80002d0 <initClk+0xc4>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4a28      	ldr	r2, [pc, #160]	; (80002d0 <initClk+0xc4>)
 8000230:	f043 0310 	orr.w	r3, r3, #16
 8000234:	6013      	str	r3, [r2, #0]
	// Flash 2 wait state
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 8000236:	4b26      	ldr	r3, [pc, #152]	; (80002d0 <initClk+0xc4>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4a25      	ldr	r2, [pc, #148]	; (80002d0 <initClk+0xc4>)
 800023c:	f023 0307 	bic.w	r3, r3, #7
 8000240:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_2;
 8000242:	4b23      	ldr	r3, [pc, #140]	; (80002d0 <initClk+0xc4>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a22      	ldr	r2, [pc, #136]	; (80002d0 <initClk+0xc4>)
 8000248:	f043 0304 	orr.w	r3, r3, #4
 800024c:	6013      	str	r3, [r2, #0]
	// HCLK = SYSCLK
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800024e:	4b1f      	ldr	r3, [pc, #124]	; (80002cc <initClk+0xc0>)
 8000250:	4a1e      	ldr	r2, [pc, #120]	; (80002cc <initClk+0xc0>)
 8000252:	685b      	ldr	r3, [r3, #4]
 8000254:	6053      	str	r3, [r2, #4]
	// PCLK2 = HCLK
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000256:	4b1d      	ldr	r3, [pc, #116]	; (80002cc <initClk+0xc0>)
 8000258:	4a1c      	ldr	r2, [pc, #112]	; (80002cc <initClk+0xc0>)
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	6053      	str	r3, [r2, #4]
	// PCLK1 = HCLK/2
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 800025e:	4b1b      	ldr	r3, [pc, #108]	; (80002cc <initClk+0xc0>)
 8000260:	685b      	ldr	r3, [r3, #4]
 8000262:	4a1a      	ldr	r2, [pc, #104]	; (80002cc <initClk+0xc0>)
 8000264:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000268:	6053      	str	r3, [r2, #4]
	// PLL configuration: PLLCLK = HSI/2 * 16 = 64 MHz
	RCC->CFGR &= ~RCC_CFGR_PLLSRC;
 800026a:	4b18      	ldr	r3, [pc, #96]	; (80002cc <initClk+0xc0>)
 800026c:	685b      	ldr	r3, [r3, #4]
 800026e:	4a17      	ldr	r2, [pc, #92]	; (80002cc <initClk+0xc0>)
 8000270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000274:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLMULL16;
 8000276:	4b15      	ldr	r3, [pc, #84]	; (80002cc <initClk+0xc0>)
 8000278:	685b      	ldr	r3, [r3, #4]
 800027a:	4a14      	ldr	r2, [pc, #80]	; (80002cc <initClk+0xc0>)
 800027c:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8000280:	6053      	str	r3, [r2, #4]
	// Enable PLL
	RCC->CR |= RCC_CR_PLLON;
 8000282:	4b12      	ldr	r3, [pc, #72]	; (80002cc <initClk+0xc0>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a11      	ldr	r2, [pc, #68]	; (80002cc <initClk+0xc0>)
 8000288:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800028c:	6013      	str	r3, [r2, #0]
	// Wait till PLL is ready
	while((RCC->CR & RCC_CR_PLLRDY) == 0) {};
 800028e:	bf00      	nop
 8000290:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <initClk+0xc0>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000298:	2b00      	cmp	r3, #0
 800029a:	d0f9      	beq.n	8000290 <initClk+0x84>
	// Select PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <initClk+0xc0>)
 800029e:	685b      	ldr	r3, [r3, #4]
 80002a0:	4a0a      	ldr	r2, [pc, #40]	; (80002cc <initClk+0xc0>)
 80002a2:	f023 0303 	bic.w	r3, r3, #3
 80002a6:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80002a8:	4b08      	ldr	r3, [pc, #32]	; (80002cc <initClk+0xc0>)
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	4a07      	ldr	r2, [pc, #28]	; (80002cc <initClk+0xc0>)
 80002ae:	f043 0302 	orr.w	r3, r3, #2
 80002b2:	6053      	str	r3, [r2, #4]
	// Wait till PLL is used as system clock source
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL){};
 80002b4:	bf00      	nop
 80002b6:	4b05      	ldr	r3, [pc, #20]	; (80002cc <initClk+0xc0>)
 80002b8:	685b      	ldr	r3, [r3, #4]
 80002ba:	f003 030c 	and.w	r3, r3, #12
 80002be:	2b08      	cmp	r3, #8
 80002c0:	d1f9      	bne.n	80002b6 <initClk+0xaa>
}
 80002c2:	bf00      	nop
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	40021000 	.word	0x40021000
 80002d0:	40022000 	.word	0x40022000

080002d4 <initUSART2>:
	TIM3->ARR = period;
	TIM3->CCR1 = period/2;
}

void initUSART2(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80002d8:	4b20      	ldr	r3, [pc, #128]	; (800035c <initUSART2+0x88>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a1f      	ldr	r2, [pc, #124]	; (800035c <initUSART2+0x88>)
 80002de:	f043 0304 	orr.w	r3, r3, #4
 80002e2:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;						//включить тактирование альтернативных ф-ций портов
 80002e4:	4b1d      	ldr	r3, [pc, #116]	; (800035c <initUSART2+0x88>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a1c      	ldr	r2, [pc, #112]	; (800035c <initUSART2+0x88>)
 80002ea:	f043 0301 	orr.w	r3, r3, #1
 80002ee:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;					//включить тактирование UART2
 80002f0:	4b1a      	ldr	r3, [pc, #104]	; (800035c <initUSART2+0x88>)
 80002f2:	69db      	ldr	r3, [r3, #28]
 80002f4:	4a19      	ldr	r2, [pc, #100]	; (800035c <initUSART2+0x88>)
 80002f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002fa:	61d3      	str	r3, [r2, #28]

	GPIOA->CRL &= ~(GPIO_CRL_MODE2 | GPIO_CRL_CNF2);		//PA2 на выход
 80002fc:	4b18      	ldr	r3, [pc, #96]	; (8000360 <initUSART2+0x8c>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a17      	ldr	r2, [pc, #92]	; (8000360 <initUSART2+0x8c>)
 8000302:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000306:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (GPIO_CRL_MODE2_1 | GPIO_CRL_CNF2_1);
 8000308:	4b15      	ldr	r3, [pc, #84]	; (8000360 <initUSART2+0x8c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a14      	ldr	r2, [pc, #80]	; (8000360 <initUSART2+0x8c>)
 800030e:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 8000312:	6013      	str	r3, [r2, #0]

	GPIOA->CRL &= ~(GPIO_CRL_MODE3 | GPIO_CRL_CNF3);		//PA3 - вход
 8000314:	4b12      	ldr	r3, [pc, #72]	; (8000360 <initUSART2+0x8c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a11      	ldr	r2, [pc, #68]	; (8000360 <initUSART2+0x8c>)
 800031a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800031e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_CNF3_0;
 8000320:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <initUSART2+0x8c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a0e      	ldr	r2, [pc, #56]	; (8000360 <initUSART2+0x8c>)
 8000326:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800032a:	6013      	str	r3, [r2, #0]
	1. USARTDIV = 32'000'000/(16*9600) = 208.3
	2. 208 = 0xD0
	3. 16*0.3 = 4.8
	4. Итого 0xD05
	*****************************************/
	USART2->BRR = 0xD05;
 800032c:	4b0d      	ldr	r3, [pc, #52]	; (8000364 <initUSART2+0x90>)
 800032e:	f640 5205 	movw	r2, #3333	; 0xd05
 8000332:	609a      	str	r2, [r3, #8]

	USART2->CR1 |= USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 8000334:	4b0b      	ldr	r3, [pc, #44]	; (8000364 <initUSART2+0x90>)
 8000336:	68db      	ldr	r3, [r3, #12]
 8000338:	4a0a      	ldr	r2, [pc, #40]	; (8000364 <initUSART2+0x90>)
 800033a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800033e:	f043 030c 	orr.w	r3, r3, #12
 8000342:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RXNEIE;						//разрешить прерывание по приему байта данных
 8000344:	4b07      	ldr	r3, [pc, #28]	; (8000364 <initUSART2+0x90>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	4a06      	ldr	r2, [pc, #24]	; (8000364 <initUSART2+0x90>)
 800034a:	f043 0320 	orr.w	r3, r3, #32
 800034e:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(USART2_IRQn);
 8000350:	2026      	movs	r0, #38	; 0x26
 8000352:	f7ff ff15 	bl	8000180 <__NVIC_EnableIRQ>
}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40021000 	.word	0x40021000
 8000360:	40010800 	.word	0x40010800
 8000364:	40004400 	.word	0x40004400

08000368 <txStr>:

void txStr(char *str)
{
 8000368:	b590      	push	{r4, r7, lr}
 800036a:	b085      	sub	sp, #20
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	uint16_t i;
	strcat(str,"\r\n");									//добавляем символ конца строки
 8000370:	6878      	ldr	r0, [r7, #4]
 8000372:	f7ff fefd 	bl	8000170 <strlen>
 8000376:	4603      	mov	r3, r0
 8000378:	461a      	mov	r2, r3
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4413      	add	r3, r2
 800037e:	4a12      	ldr	r2, [pc, #72]	; (80003c8 <txStr+0x60>)
 8000380:	8811      	ldrh	r1, [r2, #0]
 8000382:	7892      	ldrb	r2, [r2, #2]
 8000384:	8019      	strh	r1, [r3, #0]
 8000386:	709a      	strb	r2, [r3, #2]
	for (i = 0; i < strlen(str); i++)
 8000388:	2300      	movs	r3, #0
 800038a:	81fb      	strh	r3, [r7, #14]
 800038c:	e00f      	b.n	80003ae <txStr+0x46>
	{
		USART2->DR = str[i];								//передаём байт данных
 800038e:	89fb      	ldrh	r3, [r7, #14]
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	4413      	add	r3, r2
 8000394:	781a      	ldrb	r2, [r3, #0]
 8000396:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <txStr+0x64>)
 8000398:	605a      	str	r2, [r3, #4]
		while ((USART2->SR & USART_SR_TC)==0) {};			//ждём окончания передачи
 800039a:	bf00      	nop
 800039c:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <txStr+0x64>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d0f9      	beq.n	800039c <txStr+0x34>
	for (i = 0; i < strlen(str); i++)
 80003a8:	89fb      	ldrh	r3, [r7, #14]
 80003aa:	3301      	adds	r3, #1
 80003ac:	81fb      	strh	r3, [r7, #14]
 80003ae:	89fc      	ldrh	r4, [r7, #14]
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f7ff fedd 	bl	8000170 <strlen>
 80003b6:	4603      	mov	r3, r0
 80003b8:	429c      	cmp	r4, r3
 80003ba:	d3e8      	bcc.n	800038e <txStr+0x26>
	}
}
 80003bc:	bf00      	nop
 80003be:	bf00      	nop
 80003c0:	3714      	adds	r7, #20
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd90      	pop	{r4, r7, pc}
 80003c6:	bf00      	nop
 80003c8:	08001698 	.word	0x08001698
 80003cc:	40004400 	.word	0x40004400

080003d0 <initTIM3_PWM>:

void initTIM3_PWM(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80003d4:	4b22      	ldr	r3, [pc, #136]	; (8000460 <initTIM3_PWM+0x90>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a21      	ldr	r2, [pc, #132]	; (8000460 <initTIM3_PWM+0x90>)
 80003da:	f043 0304 	orr.w	r3, r3, #4
 80003de:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= ~(GPIO_CRL_CNF6 | GPIO_CRL_MODE6);
 80003e0:	4b20      	ldr	r3, [pc, #128]	; (8000464 <initTIM3_PWM+0x94>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a1f      	ldr	r2, [pc, #124]	; (8000464 <initTIM3_PWM+0x94>)
 80003e6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80003ea:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_MODE6_0|GPIO_CRL_CNF6_1;	//PA6, альтернативный выход 2МГц
 80003ec:	4b1d      	ldr	r3, [pc, #116]	; (8000464 <initTIM3_PWM+0x94>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a1c      	ldr	r2, [pc, #112]	; (8000464 <initTIM3_PWM+0x94>)
 80003f2:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
 80003f6:	6013      	str	r3, [r2, #0]

	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;				//Включить тактирование TIM3
 80003f8:	4b19      	ldr	r3, [pc, #100]	; (8000460 <initTIM3_PWM+0x90>)
 80003fa:	69db      	ldr	r3, [r3, #28]
 80003fc:	4a18      	ldr	r2, [pc, #96]	; (8000460 <initTIM3_PWM+0x90>)
 80003fe:	f043 0302 	orr.w	r3, r3, #2
 8000402:	61d3      	str	r3, [r2, #28]

	//Частота APB1 для таймеров = APB1Clk * 2 = 32МГц * 2 = 64МГц
	TIM3->PSC = 100-1;								//Предделитель частоты (64000МГц/100 = 640кГц)
 8000404:	4b18      	ldr	r3, [pc, #96]	; (8000468 <initTIM3_PWM+0x98>)
 8000406:	2263      	movs	r2, #99	; 0x63
 8000408:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 320-1;								//Модуль счёта таймера (640кГц/320 = 2кГц)
 800040a:	4b17      	ldr	r3, [pc, #92]	; (8000468 <initTIM3_PWM+0x98>)
 800040c:	f240 123f 	movw	r2, #319	; 0x13f
 8000410:	62da      	str	r2, [r3, #44]	; 0x2c
	//TIM2->ARR = 80-1;								//Модуль счёта таймера (640кГц/80 = 8кГц)
	TIM3->CCR1 = TIM3->ARR/2;
 8000412:	4b15      	ldr	r3, [pc, #84]	; (8000468 <initTIM3_PWM+0x98>)
 8000414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000416:	4a14      	ldr	r2, [pc, #80]	; (8000468 <initTIM3_PWM+0x98>)
 8000418:	085b      	lsrs	r3, r3, #1
 800041a:	6353      	str	r3, [r2, #52]	; 0x34
	TIM3->DIER |= TIM_DIER_UIE;						//Разрешить прерывание по переполнению таймера
 800041c:	4b12      	ldr	r3, [pc, #72]	; (8000468 <initTIM3_PWM+0x98>)
 800041e:	68db      	ldr	r3, [r3, #12]
 8000420:	4a11      	ldr	r2, [pc, #68]	; (8000468 <initTIM3_PWM+0x98>)
 8000422:	f043 0301 	orr.w	r3, r3, #1
 8000426:	60d3      	str	r3, [r2, #12]
	TIM3->CCER |= TIM_CCER_CC1E;					//разблокируем выход
 8000428:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <initTIM3_PWM+0x98>)
 800042a:	6a1b      	ldr	r3, [r3, #32]
 800042c:	4a0e      	ldr	r2, [pc, #56]	; (8000468 <initTIM3_PWM+0x98>)
 800042e:	f043 0301 	orr.w	r3, r3, #1
 8000432:	6213      	str	r3, [r2, #32]
	TIM3->CCMR1 |= TIM_CCMR1_OC1M; 					//pwm mod1 110
 8000434:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <initTIM3_PWM+0x98>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a0b      	ldr	r2, [pc, #44]	; (8000468 <initTIM3_PWM+0x98>)
 800043a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800043e:	6193      	str	r3, [r2, #24]
	TIM3->CR1 |= TIM_CR1_CEN;						//Включить таймер
 8000440:	4b09      	ldr	r3, [pc, #36]	; (8000468 <initTIM3_PWM+0x98>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a08      	ldr	r2, [pc, #32]	; (8000468 <initTIM3_PWM+0x98>)
 8000446:	f043 0301 	orr.w	r3, r3, #1
 800044a:	6013      	str	r3, [r2, #0]

	NVIC_EnableIRQ(TIM3_IRQn);				//Рарзрешить прерывание от TIM2
 800044c:	201d      	movs	r0, #29
 800044e:	f7ff fe97 	bl	8000180 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM3_IRQn, 1);			//Выставляем приоритет
 8000452:	2101      	movs	r1, #1
 8000454:	201d      	movs	r0, #29
 8000456:	f7ff feaf 	bl	80001b8 <__NVIC_SetPriority>
}
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	40021000 	.word	0x40021000
 8000464:	40010800 	.word	0x40010800
 8000468:	40000400 	.word	0x40000400

0800046c <stopWindow>:
	EN1_OFF();
	EN2_ON();
	TIM3->CR1 |= TIM_CR1_CEN;
}
void stopWindow(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
	EN1_OFF();
 8000470:	4b08      	ldr	r3, [pc, #32]	; (8000494 <stopWindow+0x28>)
 8000472:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000476:	611a      	str	r2, [r3, #16]
	EN2_OFF();
 8000478:	4b06      	ldr	r3, [pc, #24]	; (8000494 <stopWindow+0x28>)
 800047a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800047e:	611a      	str	r2, [r3, #16]
	TIM3->CR1 &= ~TIM_CR1_CEN;
 8000480:	4b05      	ldr	r3, [pc, #20]	; (8000498 <stopWindow+0x2c>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a04      	ldr	r2, [pc, #16]	; (8000498 <stopWindow+0x2c>)
 8000486:	f023 0301 	bic.w	r3, r3, #1
 800048a:	6013      	str	r3, [r2, #0]
}
 800048c:	bf00      	nop
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr
 8000494:	40010800 	.word	0x40010800
 8000498:	40000400 	.word	0x40000400

0800049c <ExecuteCommand>:
void ExecuteCommand(void)
{
 800049c:	b5b0      	push	{r4, r5, r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
//	txStr(RxBuffer, false);
	memset(TxBuffer,0,sizeof(TxBuffer));					//Очистка буфера передачи
 80004a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004a6:	2100      	movs	r1, #0
 80004a8:	4854      	ldr	r0, [pc, #336]	; (80005fc <ExecuteCommand+0x160>)
 80004aa:	f000 facb 	bl	8000a44 <memset>

	/* Обработчик команд */
	if (strncmp(RxBuffer,"*IDN?",5) == 0)					//Это команда "*IDN?"
 80004ae:	2205      	movs	r2, #5
 80004b0:	4953      	ldr	r1, [pc, #332]	; (8000600 <ExecuteCommand+0x164>)
 80004b2:	4854      	ldr	r0, [pc, #336]	; (8000604 <ExecuteCommand+0x168>)
 80004b4:	f000 fafa 	bl	8000aac <strncmp>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d10a      	bne.n	80004d4 <ExecuteCommand+0x38>
	{
		//Она самая, возвращаем строку идентификации
		strcpy(TxBuffer, "Denis Chernishev, IU4-31M");
 80004be:	4a4f      	ldr	r2, [pc, #316]	; (80005fc <ExecuteCommand+0x160>)
 80004c0:	4b51      	ldr	r3, [pc, #324]	; (8000608 <ExecuteCommand+0x16c>)
 80004c2:	4614      	mov	r4, r2
 80004c4:	461d      	mov	r5, r3
 80004c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004ce:	c403      	stmia	r4!, {r0, r1}
 80004d0:	8022      	strh	r2, [r4, #0]
 80004d2:	e083      	b.n	80005dc <ExecuteCommand+0x140>
	}
	else if (strncmp(RxBuffer,"OPEN",4) == 0)				//Команда запуска таймера?
 80004d4:	2204      	movs	r2, #4
 80004d6:	494d      	ldr	r1, [pc, #308]	; (800060c <ExecuteCommand+0x170>)
 80004d8:	484a      	ldr	r0, [pc, #296]	; (8000604 <ExecuteCommand+0x168>)
 80004da:	f000 fae7 	bl	8000aac <strncmp>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d108      	bne.n	80004f6 <ExecuteCommand+0x5a>
	{

		strcpy(TxBuffer, "OK");
 80004e4:	4b45      	ldr	r3, [pc, #276]	; (80005fc <ExecuteCommand+0x160>)
 80004e6:	4a4a      	ldr	r2, [pc, #296]	; (8000610 <ExecuteCommand+0x174>)
 80004e8:	6812      	ldr	r2, [r2, #0]
 80004ea:	4611      	mov	r1, r2
 80004ec:	8019      	strh	r1, [r3, #0]
 80004ee:	3302      	adds	r3, #2
 80004f0:	0c12      	lsrs	r2, r2, #16
 80004f2:	701a      	strb	r2, [r3, #0]
 80004f4:	e072      	b.n	80005dc <ExecuteCommand+0x140>
	}
	else if (strncmp(RxBuffer,"CLOSE",5) == 0)				//Команда запуска таймера?
 80004f6:	2205      	movs	r2, #5
 80004f8:	4946      	ldr	r1, [pc, #280]	; (8000614 <ExecuteCommand+0x178>)
 80004fa:	4842      	ldr	r0, [pc, #264]	; (8000604 <ExecuteCommand+0x168>)
 80004fc:	f000 fad6 	bl	8000aac <strncmp>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d108      	bne.n	8000518 <ExecuteCommand+0x7c>
	{

		strcpy(TxBuffer, "OK");
 8000506:	4b3d      	ldr	r3, [pc, #244]	; (80005fc <ExecuteCommand+0x160>)
 8000508:	4a41      	ldr	r2, [pc, #260]	; (8000610 <ExecuteCommand+0x174>)
 800050a:	6812      	ldr	r2, [r2, #0]
 800050c:	4611      	mov	r1, r2
 800050e:	8019      	strh	r1, [r3, #0]
 8000510:	3302      	adds	r3, #2
 8000512:	0c12      	lsrs	r2, r2, #16
 8000514:	701a      	strb	r2, [r3, #0]
 8000516:	e061      	b.n	80005dc <ExecuteCommand+0x140>
	}
	else if (strncmp(RxBuffer,"STOP",4) == 0)				//Команда остановки таймера?
 8000518:	2204      	movs	r2, #4
 800051a:	493f      	ldr	r1, [pc, #252]	; (8000618 <ExecuteCommand+0x17c>)
 800051c:	4839      	ldr	r0, [pc, #228]	; (8000604 <ExecuteCommand+0x168>)
 800051e:	f000 fac5 	bl	8000aac <strncmp>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d10a      	bne.n	800053e <ExecuteCommand+0xa2>
	{
		stopWindow();
 8000528:	f7ff ffa0 	bl	800046c <stopWindow>
		strcpy(TxBuffer, "OK");
 800052c:	4b33      	ldr	r3, [pc, #204]	; (80005fc <ExecuteCommand+0x160>)
 800052e:	4a38      	ldr	r2, [pc, #224]	; (8000610 <ExecuteCommand+0x174>)
 8000530:	6812      	ldr	r2, [r2, #0]
 8000532:	4611      	mov	r1, r2
 8000534:	8019      	strh	r1, [r3, #0]
 8000536:	3302      	adds	r3, #2
 8000538:	0c12      	lsrs	r2, r2, #16
 800053a:	701a      	strb	r2, [r3, #0]
 800053c:	e04e      	b.n	80005dc <ExecuteCommand+0x140>
	}
	else if (strncmp(RxBuffer,"SPEED",5) == 0)				//Команда изменения периода таймера?
 800053e:	2205      	movs	r2, #5
 8000540:	4936      	ldr	r1, [pc, #216]	; (800061c <ExecuteCommand+0x180>)
 8000542:	4830      	ldr	r0, [pc, #192]	; (8000604 <ExecuteCommand+0x168>)
 8000544:	f000 fab2 	bl	8000aac <strncmp>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d125      	bne.n	800059a <ExecuteCommand+0xfe>
	{
		uint16_t tim_value;
		sscanf(RxBuffer,"%*s %hu", &tim_value);				//преобразуем строку в целое число
 800054e:	1dbb      	adds	r3, r7, #6
 8000550:	461a      	mov	r2, r3
 8000552:	4933      	ldr	r1, [pc, #204]	; (8000620 <ExecuteCommand+0x184>)
 8000554:	482b      	ldr	r0, [pc, #172]	; (8000604 <ExecuteCommand+0x168>)
 8000556:	f000 fa7d 	bl	8000a54 <siscanf>

		if ((0 <= tim_value) && (tim_value < 320))		//параметр должен быть в заданных пределах!
 800055a:	88fb      	ldrh	r3, [r7, #6]
 800055c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000560:	d210      	bcs.n	8000584 <ExecuteCommand+0xe8>
		{
			TIM2->CCR1 = tim_value;
 8000562:	88fa      	ldrh	r2, [r7, #6]
 8000564:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000568:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CNT = 0;
 800056a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800056e:	2200      	movs	r2, #0
 8000570:	625a      	str	r2, [r3, #36]	; 0x24

			strcpy(TxBuffer, "OK");
 8000572:	4b22      	ldr	r3, [pc, #136]	; (80005fc <ExecuteCommand+0x160>)
 8000574:	4a26      	ldr	r2, [pc, #152]	; (8000610 <ExecuteCommand+0x174>)
 8000576:	6812      	ldr	r2, [r2, #0]
 8000578:	4611      	mov	r1, r2
 800057a:	8019      	strh	r1, [r3, #0]
 800057c:	3302      	adds	r3, #2
 800057e:	0c12      	lsrs	r2, r2, #16
 8000580:	701a      	strb	r2, [r3, #0]
 8000582:	e02b      	b.n	80005dc <ExecuteCommand+0x140>
		}
		else
			strcpy(TxBuffer, "Parameter is out of range");	//ругаемся
 8000584:	4a1d      	ldr	r2, [pc, #116]	; (80005fc <ExecuteCommand+0x160>)
 8000586:	4b27      	ldr	r3, [pc, #156]	; (8000624 <ExecuteCommand+0x188>)
 8000588:	4614      	mov	r4, r2
 800058a:	461d      	mov	r5, r3
 800058c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800058e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000590:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000594:	c403      	stmia	r4!, {r0, r1}
 8000596:	8022      	strh	r2, [r4, #0]
 8000598:	e020      	b.n	80005dc <ExecuteCommand+0x140>
	}
	else if (strncmp(RxBuffer,"CALIB",5) == 0)
 800059a:	2205      	movs	r2, #5
 800059c:	4922      	ldr	r1, [pc, #136]	; (8000628 <ExecuteCommand+0x18c>)
 800059e:	4819      	ldr	r0, [pc, #100]	; (8000604 <ExecuteCommand+0x168>)
 80005a0:	f000 fa84 	bl	8000aac <strncmp>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d112      	bne.n	80005d0 <ExecuteCommand+0x134>
	{
		uint16_t calib;
		sscanf(RxBuffer,"%*s %hu", &calib);
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	461a      	mov	r2, r3
 80005ae:	491c      	ldr	r1, [pc, #112]	; (8000620 <ExecuteCommand+0x184>)
 80005b0:	4814      	ldr	r0, [pc, #80]	; (8000604 <ExecuteCommand+0x168>)
 80005b2:	f000 fa4f 	bl	8000a54 <siscanf>
		MAX_ROTATION = calib;
 80005b6:	88bb      	ldrh	r3, [r7, #4]
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b1c      	ldr	r3, [pc, #112]	; (800062c <ExecuteCommand+0x190>)
 80005bc:	601a      	str	r2, [r3, #0]
		strcpy(TxBuffer, "OK");
 80005be:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <ExecuteCommand+0x160>)
 80005c0:	4a13      	ldr	r2, [pc, #76]	; (8000610 <ExecuteCommand+0x174>)
 80005c2:	6812      	ldr	r2, [r2, #0]
 80005c4:	4611      	mov	r1, r2
 80005c6:	8019      	strh	r1, [r3, #0]
 80005c8:	3302      	adds	r3, #2
 80005ca:	0c12      	lsrs	r2, r2, #16
 80005cc:	701a      	strb	r2, [r3, #0]
 80005ce:	e005      	b.n	80005dc <ExecuteCommand+0x140>
	}
	else
		strcpy(TxBuffer,"Invalid Command");					//Если мы не знаем, чего от нас хотят, ругаемся в ответ
 80005d0:	4a0a      	ldr	r2, [pc, #40]	; (80005fc <ExecuteCommand+0x160>)
 80005d2:	4b17      	ldr	r3, [pc, #92]	; (8000630 <ExecuteCommand+0x194>)
 80005d4:	4614      	mov	r4, r2
 80005d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Передача принятой строки обратно одним из двух способов
	txStr(TxBuffer);
 80005dc:	4807      	ldr	r0, [pc, #28]	; (80005fc <ExecuteCommand+0x160>)
 80005de:	f7ff fec3 	bl	8000368 <txStr>

	memset(RxBuffer,0,RX_BUFF_SIZE);						//Очистка буфера приёма
 80005e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005e6:	2100      	movs	r1, #0
 80005e8:	4806      	ldr	r0, [pc, #24]	; (8000604 <ExecuteCommand+0x168>)
 80005ea:	f000 fa2b 	bl	8000a44 <memset>
	ComReceived = false;									//Сбрасываем флаг приёма строки
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <ExecuteCommand+0x198>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bdb0      	pop	{r4, r5, r7, pc}
 80005fc:	20000184 	.word	0x20000184
 8000600:	0800169c 	.word	0x0800169c
 8000604:	20000084 	.word	0x20000084
 8000608:	080016a4 	.word	0x080016a4
 800060c:	080016c0 	.word	0x080016c0
 8000610:	080016c8 	.word	0x080016c8
 8000614:	080016cc 	.word	0x080016cc
 8000618:	080016d4 	.word	0x080016d4
 800061c:	080016dc 	.word	0x080016dc
 8000620:	080016e4 	.word	0x080016e4
 8000624:	080016ec 	.word	0x080016ec
 8000628:	08001708 	.word	0x08001708
 800062c:	20000000 	.word	0x20000000
 8000630:	08001710 	.word	0x08001710
 8000634:	20000284 	.word	0x20000284

08000638 <initGPIO>:

void initGPIO()
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;			//включить тактирование GPIOA
 800063c:	4b63      	ldr	r3, [pc, #396]	; (80007cc <initGPIO+0x194>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a62      	ldr	r2, [pc, #392]	; (80007cc <initGPIO+0x194>)
 8000642:	f043 0304 	orr.w	r3, r3, #4
 8000646:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8000648:	4b60      	ldr	r3, [pc, #384]	; (80007cc <initGPIO+0x194>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	4a5f      	ldr	r2, [pc, #380]	; (80007cc <initGPIO+0x194>)
 800064e:	f043 0301 	orr.w	r3, r3, #1
 8000652:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8000654:	4b5d      	ldr	r3, [pc, #372]	; (80007cc <initGPIO+0x194>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a5c      	ldr	r2, [pc, #368]	; (80007cc <initGPIO+0x194>)
 800065a:	f043 0310 	orr.w	r3, r3, #16
 800065e:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000660:	4b5a      	ldr	r3, [pc, #360]	; (80007cc <initGPIO+0x194>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a59      	ldr	r2, [pc, #356]	; (80007cc <initGPIO+0x194>)
 8000666:	f043 0308 	orr.w	r3, r3, #8
 800066a:	6193      	str	r3, [r2, #24]

	//очистка полей
	GPIOA->CRL &= ~(GPIO_CRL_CNF5 | GPIO_CRL_MODE5);
 800066c:	4b58      	ldr	r3, [pc, #352]	; (80007d0 <initGPIO+0x198>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a57      	ldr	r2, [pc, #348]	; (80007d0 <initGPIO+0x198>)
 8000672:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000676:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_MODE5_1;				//PA5, выход 2МГц
 8000678:	4b55      	ldr	r3, [pc, #340]	; (80007d0 <initGPIO+0x198>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a54      	ldr	r2, [pc, #336]	; (80007d0 <initGPIO+0x198>)
 800067e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000682:	6013      	str	r3, [r2, #0]

	GPIOA->CRH &= ~(GPIO_CRH_CNF8 | GPIO_CRH_MODE8);
 8000684:	4b52      	ldr	r3, [pc, #328]	; (80007d0 <initGPIO+0x198>)
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	4a51      	ldr	r2, [pc, #324]	; (80007d0 <initGPIO+0x198>)
 800068a:	f023 030f 	bic.w	r3, r3, #15
 800068e:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_MODE8_1;				//PA8, выход 2МГц
 8000690:	4b4f      	ldr	r3, [pc, #316]	; (80007d0 <initGPIO+0x198>)
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	4a4e      	ldr	r2, [pc, #312]	; (80007d0 <initGPIO+0x198>)
 8000696:	f043 0302 	orr.w	r3, r3, #2
 800069a:	6053      	str	r3, [r2, #4]

	GPIOA->CRH &= ~(GPIO_CRH_CNF9 | GPIO_CRH_MODE9);
 800069c:	4b4c      	ldr	r3, [pc, #304]	; (80007d0 <initGPIO+0x198>)
 800069e:	685b      	ldr	r3, [r3, #4]
 80006a0:	4a4b      	ldr	r2, [pc, #300]	; (80007d0 <initGPIO+0x198>)
 80006a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80006a6:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_MODE9_1;				//PA9, выход 2МГц
 80006a8:	4b49      	ldr	r3, [pc, #292]	; (80007d0 <initGPIO+0x198>)
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	4a48      	ldr	r2, [pc, #288]	; (80007d0 <initGPIO+0x198>)
 80006ae:	f043 0320 	orr.w	r3, r3, #32
 80006b2:	6053      	str	r3, [r2, #4]



	GPIOA->CRH &= ~(GPIO_CRH_MODE11 | GPIO_CRH_CNF11);
 80006b4:	4b46      	ldr	r3, [pc, #280]	; (80007d0 <initGPIO+0x198>)
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	4a45      	ldr	r2, [pc, #276]	; (80007d0 <initGPIO+0x198>)
 80006ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80006be:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF11_1;			//Вход с подтяжкой
 80006c0:	4b43      	ldr	r3, [pc, #268]	; (80007d0 <initGPIO+0x198>)
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	4a42      	ldr	r2, [pc, #264]	; (80007d0 <initGPIO+0x198>)
 80006c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ca:	6053      	str	r3, [r2, #4]
	GPIOA->BSRR |= GPIO_BSRR_BS11;			//Подтяжка к Vdd
 80006cc:	4b40      	ldr	r3, [pc, #256]	; (80007d0 <initGPIO+0x198>)
 80006ce:	691b      	ldr	r3, [r3, #16]
 80006d0:	4a3f      	ldr	r2, [pc, #252]	; (80007d0 <initGPIO+0x198>)
 80006d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006d6:	6113      	str	r3, [r2, #16]
	//кнопка на плате
	GPIOC->CRH &= ~(GPIO_CRH_MODE13 | GPIO_CRH_CNF13);
 80006d8:	4b3e      	ldr	r3, [pc, #248]	; (80007d4 <initGPIO+0x19c>)
 80006da:	685b      	ldr	r3, [r3, #4]
 80006dc:	4a3d      	ldr	r2, [pc, #244]	; (80007d4 <initGPIO+0x19c>)
 80006de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80006e2:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_CNF13_1;			//Вход с подтяжкой
 80006e4:	4b3b      	ldr	r3, [pc, #236]	; (80007d4 <initGPIO+0x19c>)
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	4a3a      	ldr	r2, [pc, #232]	; (80007d4 <initGPIO+0x19c>)
 80006ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006ee:	6053      	str	r3, [r2, #4]
	GPIOC->BSRR |= GPIO_BSRR_BS13;			//Подтяжка к Vdd
 80006f0:	4b38      	ldr	r3, [pc, #224]	; (80007d4 <initGPIO+0x19c>)
 80006f2:	691b      	ldr	r3, [r3, #16]
 80006f4:	4a37      	ldr	r2, [pc, #220]	; (80007d4 <initGPIO+0x19c>)
 80006f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006fa:	6113      	str	r3, [r2, #16]

	GPIOB->CRH &= ~(GPIO_CRH_MODE14 | GPIO_CRH_CNF14);
 80006fc:	4b36      	ldr	r3, [pc, #216]	; (80007d8 <initGPIO+0x1a0>)
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	4a35      	ldr	r2, [pc, #212]	; (80007d8 <initGPIO+0x1a0>)
 8000702:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000706:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= GPIO_CRH_CNF14_1;			//Вход с подтяжкой
 8000708:	4b33      	ldr	r3, [pc, #204]	; (80007d8 <initGPIO+0x1a0>)
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	4a32      	ldr	r2, [pc, #200]	; (80007d8 <initGPIO+0x1a0>)
 800070e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000712:	6053      	str	r3, [r2, #4]
//	GPIOB->BSRR |= GPIO_BSRR_BS14;			//Подтяжка к Vdd

	GPIOB->CRH &= ~(GPIO_CRH_MODE15 | GPIO_CRH_CNF15);
 8000714:	4b30      	ldr	r3, [pc, #192]	; (80007d8 <initGPIO+0x1a0>)
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	4a2f      	ldr	r2, [pc, #188]	; (80007d8 <initGPIO+0x1a0>)
 800071a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800071e:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= GPIO_CRH_CNF15_1;			//Вход с подтяжкой
 8000720:	4b2d      	ldr	r3, [pc, #180]	; (80007d8 <initGPIO+0x1a0>)
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	4a2c      	ldr	r2, [pc, #176]	; (80007d8 <initGPIO+0x1a0>)
 8000726:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800072a:	6053      	str	r3, [r2, #4]

	// Настройка альтернативных фукнций портов.
	// Настройки портов с 12 по 15 хранятся в регистре AFIO_EXTICR4.
	// Регистры объединены в массив AFIO->EXTICR, нумерация массива начинается с нулевого элемента.
	// Поэтому настройки AFIO_EXTICR4 хранятся в AFIO->EXTICR[3]
	AFIO->EXTICR[2] |= AFIO_EXTICR3_EXTI11_PA;
 800072c:	4b2b      	ldr	r3, [pc, #172]	; (80007dc <initGPIO+0x1a4>)
 800072e:	4a2b      	ldr	r2, [pc, #172]	; (80007dc <initGPIO+0x1a4>)
 8000730:	691b      	ldr	r3, [r3, #16]
 8000732:	6113      	str	r3, [r2, #16]
	AFIO->EXTICR[3] |= AFIO_EXTICR4_EXTI13_PC;	//кнопка на плате
 8000734:	4b29      	ldr	r3, [pc, #164]	; (80007dc <initGPIO+0x1a4>)
 8000736:	695b      	ldr	r3, [r3, #20]
 8000738:	4a28      	ldr	r2, [pc, #160]	; (80007dc <initGPIO+0x1a4>)
 800073a:	f043 0320 	orr.w	r3, r3, #32
 800073e:	6153      	str	r3, [r2, #20]
	AFIO->EXTICR[3] |= AFIO_EXTICR4_EXTI14_PB;
 8000740:	4b26      	ldr	r3, [pc, #152]	; (80007dc <initGPIO+0x1a4>)
 8000742:	695b      	ldr	r3, [r3, #20]
 8000744:	4a25      	ldr	r2, [pc, #148]	; (80007dc <initGPIO+0x1a4>)
 8000746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800074a:	6153      	str	r3, [r2, #20]
	AFIO->EXTICR[3] |= AFIO_EXTICR4_EXTI15_PB;
 800074c:	4b23      	ldr	r3, [pc, #140]	; (80007dc <initGPIO+0x1a4>)
 800074e:	695b      	ldr	r3, [r3, #20]
 8000750:	4a22      	ldr	r2, [pc, #136]	; (80007dc <initGPIO+0x1a4>)
 8000752:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000756:	6153      	str	r3, [r2, #20]

	EXTI->FTSR |= EXTI_FTSR_TR13;
 8000758:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <initGPIO+0x1a8>)
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	4a20      	ldr	r2, [pc, #128]	; (80007e0 <initGPIO+0x1a8>)
 800075e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000762:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= EXTI_IMR_MR13;
 8000764:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <initGPIO+0x1a8>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a1d      	ldr	r2, [pc, #116]	; (80007e0 <initGPIO+0x1a8>)
 800076a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800076e:	6013      	str	r3, [r2, #0]

	EXTI->FTSR |= EXTI_FTSR_TR11;
 8000770:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <initGPIO+0x1a8>)
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	4a1a      	ldr	r2, [pc, #104]	; (80007e0 <initGPIO+0x1a8>)
 8000776:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800077a:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= EXTI_IMR_MR11;
 800077c:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <initGPIO+0x1a8>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a17      	ldr	r2, [pc, #92]	; (80007e0 <initGPIO+0x1a8>)
 8000782:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000786:	6013      	str	r3, [r2, #0]

	EXTI->FTSR |= EXTI_RTSR_TR14;
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <initGPIO+0x1a8>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	4a14      	ldr	r2, [pc, #80]	; (80007e0 <initGPIO+0x1a8>)
 800078e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000792:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= EXTI_IMR_MR14;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <initGPIO+0x1a8>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a11      	ldr	r2, [pc, #68]	; (80007e0 <initGPIO+0x1a8>)
 800079a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800079e:	6013      	str	r3, [r2, #0]

	EXTI->FTSR |= EXTI_RTSR_TR15;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <initGPIO+0x1a8>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	4a0e      	ldr	r2, [pc, #56]	; (80007e0 <initGPIO+0x1a8>)
 80007a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007aa:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= EXTI_IMR_MR15;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <initGPIO+0x1a8>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a0b      	ldr	r2, [pc, #44]	; (80007e0 <initGPIO+0x1a8>)
 80007b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007b6:	6013      	str	r3, [r2, #0]

	NVIC_EnableIRQ(EXTI15_10_IRQn);			//Разрешаем прерывание
 80007b8:	2028      	movs	r0, #40	; 0x28
 80007ba:	f7ff fce1 	bl	8000180 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI15_10_IRQn, 0);	//Выставляем приоритет
 80007be:	2100      	movs	r1, #0
 80007c0:	2028      	movs	r0, #40	; 0x28
 80007c2:	f7ff fcf9 	bl	80001b8 <__NVIC_SetPriority>
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40021000 	.word	0x40021000
 80007d0:	40010800 	.word	0x40010800
 80007d4:	40011000 	.word	0x40011000
 80007d8:	40010c00 	.word	0x40010c00
 80007dc:	40010000 	.word	0x40010000
 80007e0:	40010400 	.word	0x40010400

080007e4 <main>:

int main(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	initClk();
 80007e8:	f7ff fd10 	bl	800020c <initClk>
	initTIM3_PWM();
 80007ec:	f7ff fdf0 	bl	80003d0 <initTIM3_PWM>
	initUSART2();
 80007f0:	f7ff fd70 	bl	80002d4 <initUSART2>
	initGPIO();
 80007f4:	f7ff ff20 	bl	8000638 <initGPIO>

    /* Loop forever */
	while(1)
	{
		if (ComReceived == true)
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <main+0x34>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <main+0x20>
		{
			ExecuteCommand();
 8000800:	f7ff fe4c 	bl	800049c <ExecuteCommand>
		}
		if (rotation > MAX_ROTATION)
 8000804:	4b05      	ldr	r3, [pc, #20]	; (800081c <main+0x38>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	461a      	mov	r2, r3
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <main+0x3c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	429a      	cmp	r2, r3
 8000810:	d9f2      	bls.n	80007f8 <main+0x14>
			stopWindow();
 8000812:	f7ff fe2b 	bl	800046c <stopWindow>
		if (ComReceived == true)
 8000816:	e7ef      	b.n	80007f8 <main+0x14>
 8000818:	20000284 	.word	0x20000284
 800081c:	20000288 	.word	0x20000288
 8000820:	20000000 	.word	0x20000000

08000824 <EXTI15_10_IRQHandler>:
	}
}

void EXTI15_10_IRQHandler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR11)
 8000828:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <EXTI15_10_IRQHandler+0x8c>)
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000830:	2b00      	cmp	r3, #0
 8000832:	d00a      	beq.n	800084a <EXTI15_10_IRQHandler+0x26>
	{
		rotation = 0;
 8000834:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <EXTI15_10_IRQHandler+0x90>)
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
		stopWindow();
 800083a:	f7ff fe17 	bl	800046c <stopWindow>
		EXTI->PR |= EXTI_PR_PR11;
 800083e:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <EXTI15_10_IRQHandler+0x8c>)
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	4a1b      	ldr	r2, [pc, #108]	; (80008b0 <EXTI15_10_IRQHandler+0x8c>)
 8000844:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000848:	6153      	str	r3, [r2, #20]
	}
	if (EXTI->PR & EXTI_PR_PR13)
 800084a:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <EXTI15_10_IRQHandler+0x8c>)
 800084c:	695b      	ldr	r3, [r3, #20]
 800084e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000852:	2b00      	cmp	r3, #0
 8000854:	d00a      	beq.n	800086c <EXTI15_10_IRQHandler+0x48>
	{
		rotation = 0;
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <EXTI15_10_IRQHandler+0x90>)
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
		stopWindow();
 800085c:	f7ff fe06 	bl	800046c <stopWindow>
		EXTI->PR |= EXTI_PR_PR13;
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <EXTI15_10_IRQHandler+0x8c>)
 8000862:	695b      	ldr	r3, [r3, #20]
 8000864:	4a12      	ldr	r2, [pc, #72]	; (80008b0 <EXTI15_10_IRQHandler+0x8c>)
 8000866:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800086a:	6153      	str	r3, [r2, #20]
	}
	if (EXTI->PR & EXTI_PR_PR14)
 800086c:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <EXTI15_10_IRQHandler+0x8c>)
 800086e:	695b      	ldr	r3, [r3, #20]
 8000870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000874:	2b00      	cmp	r3, #0
 8000876:	d016      	beq.n	80008a6 <EXTI15_10_IRQHandler+0x82>
	{
		if ((GPIOB->IDR & GPIO_IDR_IDR15) == 0)
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <EXTI15_10_IRQHandler+0x94>)
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000880:	2b00      	cmp	r3, #0
 8000882:	d105      	bne.n	8000890 <EXTI15_10_IRQHandler+0x6c>
		{
			rotation += 1;
 8000884:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <EXTI15_10_IRQHandler+0x90>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	3301      	adds	r3, #1
 800088a:	4a0a      	ldr	r2, [pc, #40]	; (80008b4 <EXTI15_10_IRQHandler+0x90>)
 800088c:	6013      	str	r3, [r2, #0]
 800088e:	e004      	b.n	800089a <EXTI15_10_IRQHandler+0x76>
		}
		else
		{
			rotation -= 1;
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <EXTI15_10_IRQHandler+0x90>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	3b01      	subs	r3, #1
 8000896:	4a07      	ldr	r2, [pc, #28]	; (80008b4 <EXTI15_10_IRQHandler+0x90>)
 8000898:	6013      	str	r3, [r2, #0]
		}
		EXTI->PR |= EXTI_PR_PR14;
 800089a:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <EXTI15_10_IRQHandler+0x8c>)
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <EXTI15_10_IRQHandler+0x8c>)
 80008a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a4:	6153      	str	r3, [r2, #20]
	}
	if (EXTI->PR & EXTI_PR_PR15)
 80008a6:	4b02      	ldr	r3, [pc, #8]	; (80008b0 <EXTI15_10_IRQHandler+0x8c>)
 80008a8:	695b      	ldr	r3, [r3, #20]
//		else
//		{
//			rotation += 1;
//		}
	}
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40010400 	.word	0x40010400
 80008b4:	20000288 	.word	0x20000288
 80008b8:	40010c00 	.word	0x40010c00

080008bc <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
	if ((USART2->SR & USART_SR_RXNE)!=0)		//Прерывание по приёму данных?
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <USART2_IRQHandler+0x4c>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f003 0320 	and.w	r3, r3, #32
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d019      	beq.n	8000902 <USART2_IRQHandler+0x46>
	{
		uint8_t pos = strlen(RxBuffer);			//Вычисляем позицию свободной ячейки
 80008ce:	480f      	ldr	r0, [pc, #60]	; (800090c <USART2_IRQHandler+0x50>)
 80008d0:	f7ff fc4e 	bl	8000170 <strlen>
 80008d4:	4603      	mov	r3, r0
 80008d6:	71fb      	strb	r3, [r7, #7]

		RxBuffer[pos] = USART2->DR;				//Считываем содержимое регистра данных
 80008d8:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <USART2_IRQHandler+0x4c>)
 80008da:	685a      	ldr	r2, [r3, #4]
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	b2d1      	uxtb	r1, r2
 80008e0:	4a0a      	ldr	r2, [pc, #40]	; (800090c <USART2_IRQHandler+0x50>)
 80008e2:	54d1      	strb	r1, [r2, r3]

		if ((RxBuffer[pos]== 0x0A) && (RxBuffer[pos-1]== 0x0D))							//Если это символ конца строки
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	4a09      	ldr	r2, [pc, #36]	; (800090c <USART2_IRQHandler+0x50>)
 80008e8:	5cd3      	ldrb	r3, [r2, r3]
 80008ea:	2b0a      	cmp	r3, #10
 80008ec:	d109      	bne.n	8000902 <USART2_IRQHandler+0x46>
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	3b01      	subs	r3, #1
 80008f2:	4a06      	ldr	r2, [pc, #24]	; (800090c <USART2_IRQHandler+0x50>)
 80008f4:	5cd3      	ldrb	r3, [r2, r3]
 80008f6:	2b0d      	cmp	r3, #13
 80008f8:	d103      	bne.n	8000902 <USART2_IRQHandler+0x46>
		{
			ComReceived = true;					//- выставляем флаг приёма строки
 80008fa:	4b05      	ldr	r3, [pc, #20]	; (8000910 <USART2_IRQHandler+0x54>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	701a      	strb	r2, [r3, #0]
			return;								//- и выходим
 8000900:	bf00      	nop
		}
	}
}
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40004400 	.word	0x40004400
 800090c:	20000084 	.word	0x20000084
 8000910:	20000284 	.word	0x20000284

08000914 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
	TIM3->SR &= ~TIM_SR_UIF;			//Сброс флага переполнения
 8000918:	4b04      	ldr	r3, [pc, #16]	; (800092c <TIM3_IRQHandler+0x18>)
 800091a:	691b      	ldr	r3, [r3, #16]
 800091c:	4a03      	ldr	r2, [pc, #12]	; (800092c <TIM3_IRQHandler+0x18>)
 800091e:	f023 0301 	bic.w	r3, r3, #1
 8000922:	6113      	str	r3, [r2, #16]
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	40000400 	.word	0x40000400

08000930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000938:	4a14      	ldr	r2, [pc, #80]	; (800098c <_sbrk+0x5c>)
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <_sbrk+0x60>)
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000944:	4b13      	ldr	r3, [pc, #76]	; (8000994 <_sbrk+0x64>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d102      	bne.n	8000952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <_sbrk+0x64>)
 800094e:	4a12      	ldr	r2, [pc, #72]	; (8000998 <_sbrk+0x68>)
 8000950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <_sbrk+0x64>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4413      	add	r3, r2
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	429a      	cmp	r2, r3
 800095e:	d207      	bcs.n	8000970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000960:	f000 f846 	bl	80009f0 <__errno>
 8000964:	4603      	mov	r3, r0
 8000966:	220c      	movs	r2, #12
 8000968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800096a:	f04f 33ff 	mov.w	r3, #4294967295
 800096e:	e009      	b.n	8000984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <_sbrk+0x64>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000976:	4b07      	ldr	r3, [pc, #28]	; (8000994 <_sbrk+0x64>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4413      	add	r3, r2
 800097e:	4a05      	ldr	r2, [pc, #20]	; (8000994 <_sbrk+0x64>)
 8000980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000982:	68fb      	ldr	r3, [r7, #12]
}
 8000984:	4618      	mov	r0, r3
 8000986:	3718      	adds	r7, #24
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20005000 	.word	0x20005000
 8000990:	00000400 	.word	0x00000400
 8000994:	2000028c 	.word	0x2000028c
 8000998:	200002a0 	.word	0x200002a0

0800099c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800099c:	480d      	ldr	r0, [pc, #52]	; (80009d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800099e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a4:	480c      	ldr	r0, [pc, #48]	; (80009d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009a6:	490d      	ldr	r1, [pc, #52]	; (80009dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80009a8:	4a0d      	ldr	r2, [pc, #52]	; (80009e0 <LoopForever+0xe>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ac:	e002      	b.n	80009b4 <LoopCopyDataInit>

080009ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b2:	3304      	adds	r3, #4

080009b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b8:	d3f9      	bcc.n	80009ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ba:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009bc:	4c0a      	ldr	r4, [pc, #40]	; (80009e8 <LoopForever+0x16>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c0:	e001      	b.n	80009c6 <LoopFillZerobss>

080009c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c4:	3204      	adds	r2, #4

080009c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c8:	d3fb      	bcc.n	80009c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009ca:	f000 f817 	bl	80009fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ce:	f7ff ff09 	bl	80007e4 <main>

080009d2 <LoopForever>:

LoopForever:
  b LoopForever
 80009d2:	e7fe      	b.n	80009d2 <LoopForever>
  ldr   r0, =_estack
 80009d4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80009d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009dc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80009e0:	080018b4 	.word	0x080018b4
  ldr r2, =_sbss
 80009e4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80009e8:	200002a0 	.word	0x200002a0

080009ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009ec:	e7fe      	b.n	80009ec <ADC1_2_IRQHandler>
	...

080009f0 <__errno>:
 80009f0:	4b01      	ldr	r3, [pc, #4]	; (80009f8 <__errno+0x8>)
 80009f2:	6818      	ldr	r0, [r3, #0]
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	20000004 	.word	0x20000004

080009fc <__libc_init_array>:
 80009fc:	b570      	push	{r4, r5, r6, lr}
 80009fe:	2600      	movs	r6, #0
 8000a00:	4d0c      	ldr	r5, [pc, #48]	; (8000a34 <__libc_init_array+0x38>)
 8000a02:	4c0d      	ldr	r4, [pc, #52]	; (8000a38 <__libc_init_array+0x3c>)
 8000a04:	1b64      	subs	r4, r4, r5
 8000a06:	10a4      	asrs	r4, r4, #2
 8000a08:	42a6      	cmp	r6, r4
 8000a0a:	d109      	bne.n	8000a20 <__libc_init_array+0x24>
 8000a0c:	f000 fe38 	bl	8001680 <_init>
 8000a10:	2600      	movs	r6, #0
 8000a12:	4d0a      	ldr	r5, [pc, #40]	; (8000a3c <__libc_init_array+0x40>)
 8000a14:	4c0a      	ldr	r4, [pc, #40]	; (8000a40 <__libc_init_array+0x44>)
 8000a16:	1b64      	subs	r4, r4, r5
 8000a18:	10a4      	asrs	r4, r4, #2
 8000a1a:	42a6      	cmp	r6, r4
 8000a1c:	d105      	bne.n	8000a2a <__libc_init_array+0x2e>
 8000a1e:	bd70      	pop	{r4, r5, r6, pc}
 8000a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a24:	4798      	blx	r3
 8000a26:	3601      	adds	r6, #1
 8000a28:	e7ee      	b.n	8000a08 <__libc_init_array+0xc>
 8000a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a2e:	4798      	blx	r3
 8000a30:	3601      	adds	r6, #1
 8000a32:	e7f2      	b.n	8000a1a <__libc_init_array+0x1e>
 8000a34:	080018ac 	.word	0x080018ac
 8000a38:	080018ac 	.word	0x080018ac
 8000a3c:	080018ac 	.word	0x080018ac
 8000a40:	080018b0 	.word	0x080018b0

08000a44 <memset>:
 8000a44:	4603      	mov	r3, r0
 8000a46:	4402      	add	r2, r0
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d100      	bne.n	8000a4e <memset+0xa>
 8000a4c:	4770      	bx	lr
 8000a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8000a52:	e7f9      	b.n	8000a48 <memset+0x4>

08000a54 <siscanf>:
 8000a54:	b40e      	push	{r1, r2, r3}
 8000a56:	f44f 7201 	mov.w	r2, #516	; 0x204
 8000a5a:	b530      	push	{r4, r5, lr}
 8000a5c:	b09c      	sub	sp, #112	; 0x70
 8000a5e:	ac1f      	add	r4, sp, #124	; 0x7c
 8000a60:	f854 5b04 	ldr.w	r5, [r4], #4
 8000a64:	f8ad 2014 	strh.w	r2, [sp, #20]
 8000a68:	9002      	str	r0, [sp, #8]
 8000a6a:	9006      	str	r0, [sp, #24]
 8000a6c:	f7ff fb80 	bl	8000170 <strlen>
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <siscanf+0x4c>)
 8000a72:	9003      	str	r0, [sp, #12]
 8000a74:	930b      	str	r3, [sp, #44]	; 0x2c
 8000a76:	2300      	movs	r3, #0
 8000a78:	930f      	str	r3, [sp, #60]	; 0x3c
 8000a7a:	9314      	str	r3, [sp, #80]	; 0x50
 8000a7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a80:	9007      	str	r0, [sp, #28]
 8000a82:	4808      	ldr	r0, [pc, #32]	; (8000aa4 <siscanf+0x50>)
 8000a84:	f8ad 3016 	strh.w	r3, [sp, #22]
 8000a88:	462a      	mov	r2, r5
 8000a8a:	4623      	mov	r3, r4
 8000a8c:	a902      	add	r1, sp, #8
 8000a8e:	6800      	ldr	r0, [r0, #0]
 8000a90:	9401      	str	r4, [sp, #4]
 8000a92:	f000 f879 	bl	8000b88 <__ssvfiscanf_r>
 8000a96:	b01c      	add	sp, #112	; 0x70
 8000a98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000a9c:	b003      	add	sp, #12
 8000a9e:	4770      	bx	lr
 8000aa0:	08000aa9 	.word	0x08000aa9
 8000aa4:	20000004 	.word	0x20000004

08000aa8 <__seofread>:
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <strncmp>:
 8000aac:	4603      	mov	r3, r0
 8000aae:	b510      	push	{r4, lr}
 8000ab0:	b172      	cbz	r2, 8000ad0 <strncmp+0x24>
 8000ab2:	3901      	subs	r1, #1
 8000ab4:	1884      	adds	r4, r0, r2
 8000ab6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8000aba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8000abe:	4290      	cmp	r0, r2
 8000ac0:	d101      	bne.n	8000ac6 <strncmp+0x1a>
 8000ac2:	42a3      	cmp	r3, r4
 8000ac4:	d101      	bne.n	8000aca <strncmp+0x1e>
 8000ac6:	1a80      	subs	r0, r0, r2
 8000ac8:	bd10      	pop	{r4, pc}
 8000aca:	2800      	cmp	r0, #0
 8000acc:	d1f3      	bne.n	8000ab6 <strncmp+0xa>
 8000ace:	e7fa      	b.n	8000ac6 <strncmp+0x1a>
 8000ad0:	4610      	mov	r0, r2
 8000ad2:	e7f9      	b.n	8000ac8 <strncmp+0x1c>

08000ad4 <_sungetc_r>:
 8000ad4:	b538      	push	{r3, r4, r5, lr}
 8000ad6:	1c4b      	adds	r3, r1, #1
 8000ad8:	4614      	mov	r4, r2
 8000ada:	d103      	bne.n	8000ae4 <_sungetc_r+0x10>
 8000adc:	f04f 35ff 	mov.w	r5, #4294967295
 8000ae0:	4628      	mov	r0, r5
 8000ae2:	bd38      	pop	{r3, r4, r5, pc}
 8000ae4:	8993      	ldrh	r3, [r2, #12]
 8000ae6:	b2cd      	uxtb	r5, r1
 8000ae8:	f023 0320 	bic.w	r3, r3, #32
 8000aec:	8193      	strh	r3, [r2, #12]
 8000aee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000af0:	6852      	ldr	r2, [r2, #4]
 8000af2:	b18b      	cbz	r3, 8000b18 <_sungetc_r+0x44>
 8000af4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000af6:	4293      	cmp	r3, r2
 8000af8:	dd08      	ble.n	8000b0c <_sungetc_r+0x38>
 8000afa:	6823      	ldr	r3, [r4, #0]
 8000afc:	1e5a      	subs	r2, r3, #1
 8000afe:	6022      	str	r2, [r4, #0]
 8000b00:	f803 5c01 	strb.w	r5, [r3, #-1]
 8000b04:	6863      	ldr	r3, [r4, #4]
 8000b06:	3301      	adds	r3, #1
 8000b08:	6063      	str	r3, [r4, #4]
 8000b0a:	e7e9      	b.n	8000ae0 <_sungetc_r+0xc>
 8000b0c:	4621      	mov	r1, r4
 8000b0e:	f000 fc31 	bl	8001374 <__submore>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	d0f1      	beq.n	8000afa <_sungetc_r+0x26>
 8000b16:	e7e1      	b.n	8000adc <_sungetc_r+0x8>
 8000b18:	6921      	ldr	r1, [r4, #16]
 8000b1a:	6823      	ldr	r3, [r4, #0]
 8000b1c:	b151      	cbz	r1, 8000b34 <_sungetc_r+0x60>
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	d208      	bcs.n	8000b34 <_sungetc_r+0x60>
 8000b22:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8000b26:	42a9      	cmp	r1, r5
 8000b28:	d104      	bne.n	8000b34 <_sungetc_r+0x60>
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	3201      	adds	r2, #1
 8000b2e:	6023      	str	r3, [r4, #0]
 8000b30:	6062      	str	r2, [r4, #4]
 8000b32:	e7d5      	b.n	8000ae0 <_sungetc_r+0xc>
 8000b34:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8000b38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b3c:	6363      	str	r3, [r4, #52]	; 0x34
 8000b3e:	2303      	movs	r3, #3
 8000b40:	63a3      	str	r3, [r4, #56]	; 0x38
 8000b42:	4623      	mov	r3, r4
 8000b44:	f803 5f46 	strb.w	r5, [r3, #70]!
 8000b48:	6023      	str	r3, [r4, #0]
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e7dc      	b.n	8000b08 <_sungetc_r+0x34>

08000b4e <__ssrefill_r>:
 8000b4e:	b510      	push	{r4, lr}
 8000b50:	460c      	mov	r4, r1
 8000b52:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8000b54:	b169      	cbz	r1, 8000b72 <__ssrefill_r+0x24>
 8000b56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b5a:	4299      	cmp	r1, r3
 8000b5c:	d001      	beq.n	8000b62 <__ssrefill_r+0x14>
 8000b5e:	f000 fc5f 	bl	8001420 <_free_r>
 8000b62:	2000      	movs	r0, #0
 8000b64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b66:	6360      	str	r0, [r4, #52]	; 0x34
 8000b68:	6063      	str	r3, [r4, #4]
 8000b6a:	b113      	cbz	r3, 8000b72 <__ssrefill_r+0x24>
 8000b6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000b6e:	6023      	str	r3, [r4, #0]
 8000b70:	bd10      	pop	{r4, pc}
 8000b72:	6923      	ldr	r3, [r4, #16]
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	6023      	str	r3, [r4, #0]
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	6063      	str	r3, [r4, #4]
 8000b7e:	89a3      	ldrh	r3, [r4, #12]
 8000b80:	f043 0320 	orr.w	r3, r3, #32
 8000b84:	81a3      	strh	r3, [r4, #12]
 8000b86:	e7f3      	b.n	8000b70 <__ssrefill_r+0x22>

08000b88 <__ssvfiscanf_r>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	460c      	mov	r4, r1
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4606      	mov	r6, r0
 8000b92:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8000b96:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8000b9a:	49a7      	ldr	r1, [pc, #668]	; (8000e38 <__ssvfiscanf_r+0x2b0>)
 8000b9c:	f10d 0804 	add.w	r8, sp, #4
 8000ba0:	91a0      	str	r1, [sp, #640]	; 0x280
 8000ba2:	49a6      	ldr	r1, [pc, #664]	; (8000e3c <__ssvfiscanf_r+0x2b4>)
 8000ba4:	4fa6      	ldr	r7, [pc, #664]	; (8000e40 <__ssvfiscanf_r+0x2b8>)
 8000ba6:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8000e44 <__ssvfiscanf_r+0x2bc>
 8000baa:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8000bae:	91a1      	str	r1, [sp, #644]	; 0x284
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	7813      	ldrb	r3, [r2, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	f000 815c 	beq.w	8000e72 <__ssvfiscanf_r+0x2ea>
 8000bba:	5dd9      	ldrb	r1, [r3, r7]
 8000bbc:	1c55      	adds	r5, r2, #1
 8000bbe:	f011 0108 	ands.w	r1, r1, #8
 8000bc2:	d019      	beq.n	8000bf8 <__ssvfiscanf_r+0x70>
 8000bc4:	6863      	ldr	r3, [r4, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	dd0f      	ble.n	8000bea <__ssvfiscanf_r+0x62>
 8000bca:	6823      	ldr	r3, [r4, #0]
 8000bcc:	781a      	ldrb	r2, [r3, #0]
 8000bce:	5cba      	ldrb	r2, [r7, r2]
 8000bd0:	0712      	lsls	r2, r2, #28
 8000bd2:	d401      	bmi.n	8000bd8 <__ssvfiscanf_r+0x50>
 8000bd4:	462a      	mov	r2, r5
 8000bd6:	e7ec      	b.n	8000bb2 <__ssvfiscanf_r+0x2a>
 8000bd8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8000bda:	3301      	adds	r3, #1
 8000bdc:	3201      	adds	r2, #1
 8000bde:	9245      	str	r2, [sp, #276]	; 0x114
 8000be0:	6862      	ldr	r2, [r4, #4]
 8000be2:	6023      	str	r3, [r4, #0]
 8000be4:	3a01      	subs	r2, #1
 8000be6:	6062      	str	r2, [r4, #4]
 8000be8:	e7ec      	b.n	8000bc4 <__ssvfiscanf_r+0x3c>
 8000bea:	4621      	mov	r1, r4
 8000bec:	4630      	mov	r0, r6
 8000bee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8000bf0:	4798      	blx	r3
 8000bf2:	2800      	cmp	r0, #0
 8000bf4:	d0e9      	beq.n	8000bca <__ssvfiscanf_r+0x42>
 8000bf6:	e7ed      	b.n	8000bd4 <__ssvfiscanf_r+0x4c>
 8000bf8:	2b25      	cmp	r3, #37	; 0x25
 8000bfa:	d012      	beq.n	8000c22 <__ssvfiscanf_r+0x9a>
 8000bfc:	469a      	mov	sl, r3
 8000bfe:	6863      	ldr	r3, [r4, #4]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	f340 8094 	ble.w	8000d2e <__ssvfiscanf_r+0x1a6>
 8000c06:	6822      	ldr	r2, [r4, #0]
 8000c08:	7813      	ldrb	r3, [r2, #0]
 8000c0a:	4553      	cmp	r3, sl
 8000c0c:	f040 8131 	bne.w	8000e72 <__ssvfiscanf_r+0x2ea>
 8000c10:	6863      	ldr	r3, [r4, #4]
 8000c12:	3201      	adds	r2, #1
 8000c14:	3b01      	subs	r3, #1
 8000c16:	6063      	str	r3, [r4, #4]
 8000c18:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8000c1a:	6022      	str	r2, [r4, #0]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	9345      	str	r3, [sp, #276]	; 0x114
 8000c20:	e7d8      	b.n	8000bd4 <__ssvfiscanf_r+0x4c>
 8000c22:	9141      	str	r1, [sp, #260]	; 0x104
 8000c24:	9143      	str	r1, [sp, #268]	; 0x10c
 8000c26:	7853      	ldrb	r3, [r2, #1]
 8000c28:	2b2a      	cmp	r3, #42	; 0x2a
 8000c2a:	bf04      	itt	eq
 8000c2c:	2310      	moveq	r3, #16
 8000c2e:	1c95      	addeq	r5, r2, #2
 8000c30:	f04f 020a 	mov.w	r2, #10
 8000c34:	bf08      	it	eq
 8000c36:	9341      	streq	r3, [sp, #260]	; 0x104
 8000c38:	46aa      	mov	sl, r5
 8000c3a:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8000c3e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8000c42:	2b09      	cmp	r3, #9
 8000c44:	d91d      	bls.n	8000c82 <__ssvfiscanf_r+0xfa>
 8000c46:	2203      	movs	r2, #3
 8000c48:	487e      	ldr	r0, [pc, #504]	; (8000e44 <__ssvfiscanf_r+0x2bc>)
 8000c4a:	f000 fbcd 	bl	80013e8 <memchr>
 8000c4e:	b140      	cbz	r0, 8000c62 <__ssvfiscanf_r+0xda>
 8000c50:	2301      	movs	r3, #1
 8000c52:	4655      	mov	r5, sl
 8000c54:	eba0 0009 	sub.w	r0, r0, r9
 8000c58:	fa03 f000 	lsl.w	r0, r3, r0
 8000c5c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8000c5e:	4318      	orrs	r0, r3
 8000c60:	9041      	str	r0, [sp, #260]	; 0x104
 8000c62:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000c66:	2b78      	cmp	r3, #120	; 0x78
 8000c68:	d806      	bhi.n	8000c78 <__ssvfiscanf_r+0xf0>
 8000c6a:	2b57      	cmp	r3, #87	; 0x57
 8000c6c:	d810      	bhi.n	8000c90 <__ssvfiscanf_r+0x108>
 8000c6e:	2b25      	cmp	r3, #37	; 0x25
 8000c70:	d0c4      	beq.n	8000bfc <__ssvfiscanf_r+0x74>
 8000c72:	d857      	bhi.n	8000d24 <__ssvfiscanf_r+0x19c>
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d065      	beq.n	8000d44 <__ssvfiscanf_r+0x1bc>
 8000c78:	2303      	movs	r3, #3
 8000c7a:	9347      	str	r3, [sp, #284]	; 0x11c
 8000c7c:	230a      	movs	r3, #10
 8000c7e:	9342      	str	r3, [sp, #264]	; 0x108
 8000c80:	e072      	b.n	8000d68 <__ssvfiscanf_r+0x1e0>
 8000c82:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8000c84:	4655      	mov	r5, sl
 8000c86:	fb02 1103 	mla	r1, r2, r3, r1
 8000c8a:	3930      	subs	r1, #48	; 0x30
 8000c8c:	9143      	str	r1, [sp, #268]	; 0x10c
 8000c8e:	e7d3      	b.n	8000c38 <__ssvfiscanf_r+0xb0>
 8000c90:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8000c94:	2a20      	cmp	r2, #32
 8000c96:	d8ef      	bhi.n	8000c78 <__ssvfiscanf_r+0xf0>
 8000c98:	a101      	add	r1, pc, #4	; (adr r1, 8000ca0 <__ssvfiscanf_r+0x118>)
 8000c9a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8000c9e:	bf00      	nop
 8000ca0:	08000d53 	.word	0x08000d53
 8000ca4:	08000c79 	.word	0x08000c79
 8000ca8:	08000c79 	.word	0x08000c79
 8000cac:	08000db1 	.word	0x08000db1
 8000cb0:	08000c79 	.word	0x08000c79
 8000cb4:	08000c79 	.word	0x08000c79
 8000cb8:	08000c79 	.word	0x08000c79
 8000cbc:	08000c79 	.word	0x08000c79
 8000cc0:	08000c79 	.word	0x08000c79
 8000cc4:	08000c79 	.word	0x08000c79
 8000cc8:	08000c79 	.word	0x08000c79
 8000ccc:	08000dc7 	.word	0x08000dc7
 8000cd0:	08000d9d 	.word	0x08000d9d
 8000cd4:	08000d2b 	.word	0x08000d2b
 8000cd8:	08000d2b 	.word	0x08000d2b
 8000cdc:	08000d2b 	.word	0x08000d2b
 8000ce0:	08000c79 	.word	0x08000c79
 8000ce4:	08000da1 	.word	0x08000da1
 8000ce8:	08000c79 	.word	0x08000c79
 8000cec:	08000c79 	.word	0x08000c79
 8000cf0:	08000c79 	.word	0x08000c79
 8000cf4:	08000c79 	.word	0x08000c79
 8000cf8:	08000dd7 	.word	0x08000dd7
 8000cfc:	08000da9 	.word	0x08000da9
 8000d00:	08000d4b 	.word	0x08000d4b
 8000d04:	08000c79 	.word	0x08000c79
 8000d08:	08000c79 	.word	0x08000c79
 8000d0c:	08000dd3 	.word	0x08000dd3
 8000d10:	08000c79 	.word	0x08000c79
 8000d14:	08000d9d 	.word	0x08000d9d
 8000d18:	08000c79 	.word	0x08000c79
 8000d1c:	08000c79 	.word	0x08000c79
 8000d20:	08000d53 	.word	0x08000d53
 8000d24:	3b45      	subs	r3, #69	; 0x45
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d8a6      	bhi.n	8000c78 <__ssvfiscanf_r+0xf0>
 8000d2a:	2305      	movs	r3, #5
 8000d2c:	e01b      	b.n	8000d66 <__ssvfiscanf_r+0x1de>
 8000d2e:	4621      	mov	r1, r4
 8000d30:	4630      	mov	r0, r6
 8000d32:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8000d34:	4798      	blx	r3
 8000d36:	2800      	cmp	r0, #0
 8000d38:	f43f af65 	beq.w	8000c06 <__ssvfiscanf_r+0x7e>
 8000d3c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8000d3e:	2800      	cmp	r0, #0
 8000d40:	f040 808d 	bne.w	8000e5e <__ssvfiscanf_r+0x2d6>
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295
 8000d48:	e08f      	b.n	8000e6a <__ssvfiscanf_r+0x2e2>
 8000d4a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8000d4c:	f042 0220 	orr.w	r2, r2, #32
 8000d50:	9241      	str	r2, [sp, #260]	; 0x104
 8000d52:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8000d54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d58:	9241      	str	r2, [sp, #260]	; 0x104
 8000d5a:	2210      	movs	r2, #16
 8000d5c:	2b6f      	cmp	r3, #111	; 0x6f
 8000d5e:	bf34      	ite	cc
 8000d60:	2303      	movcc	r3, #3
 8000d62:	2304      	movcs	r3, #4
 8000d64:	9242      	str	r2, [sp, #264]	; 0x108
 8000d66:	9347      	str	r3, [sp, #284]	; 0x11c
 8000d68:	6863      	ldr	r3, [r4, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	dd42      	ble.n	8000df4 <__ssvfiscanf_r+0x26c>
 8000d6e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8000d70:	0659      	lsls	r1, r3, #25
 8000d72:	d404      	bmi.n	8000d7e <__ssvfiscanf_r+0x1f6>
 8000d74:	6823      	ldr	r3, [r4, #0]
 8000d76:	781a      	ldrb	r2, [r3, #0]
 8000d78:	5cba      	ldrb	r2, [r7, r2]
 8000d7a:	0712      	lsls	r2, r2, #28
 8000d7c:	d441      	bmi.n	8000e02 <__ssvfiscanf_r+0x27a>
 8000d7e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	dc50      	bgt.n	8000e26 <__ssvfiscanf_r+0x29e>
 8000d84:	466b      	mov	r3, sp
 8000d86:	4622      	mov	r2, r4
 8000d88:	4630      	mov	r0, r6
 8000d8a:	a941      	add	r1, sp, #260	; 0x104
 8000d8c:	f000 f876 	bl	8000e7c <_scanf_chars>
 8000d90:	2801      	cmp	r0, #1
 8000d92:	d06e      	beq.n	8000e72 <__ssvfiscanf_r+0x2ea>
 8000d94:	2802      	cmp	r0, #2
 8000d96:	f47f af1d 	bne.w	8000bd4 <__ssvfiscanf_r+0x4c>
 8000d9a:	e7cf      	b.n	8000d3c <__ssvfiscanf_r+0x1b4>
 8000d9c:	220a      	movs	r2, #10
 8000d9e:	e7dd      	b.n	8000d5c <__ssvfiscanf_r+0x1d4>
 8000da0:	2300      	movs	r3, #0
 8000da2:	9342      	str	r3, [sp, #264]	; 0x108
 8000da4:	2303      	movs	r3, #3
 8000da6:	e7de      	b.n	8000d66 <__ssvfiscanf_r+0x1de>
 8000da8:	2308      	movs	r3, #8
 8000daa:	9342      	str	r3, [sp, #264]	; 0x108
 8000dac:	2304      	movs	r3, #4
 8000dae:	e7da      	b.n	8000d66 <__ssvfiscanf_r+0x1de>
 8000db0:	4629      	mov	r1, r5
 8000db2:	4640      	mov	r0, r8
 8000db4:	f000 f9b4 	bl	8001120 <__sccl>
 8000db8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8000dba:	4605      	mov	r5, r0
 8000dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dc0:	9341      	str	r3, [sp, #260]	; 0x104
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e7cf      	b.n	8000d66 <__ssvfiscanf_r+0x1de>
 8000dc6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8000dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dcc:	9341      	str	r3, [sp, #260]	; 0x104
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e7c9      	b.n	8000d66 <__ssvfiscanf_r+0x1de>
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	e7c7      	b.n	8000d66 <__ssvfiscanf_r+0x1de>
 8000dd6:	9841      	ldr	r0, [sp, #260]	; 0x104
 8000dd8:	06c3      	lsls	r3, r0, #27
 8000dda:	f53f aefb 	bmi.w	8000bd4 <__ssvfiscanf_r+0x4c>
 8000dde:	9b00      	ldr	r3, [sp, #0]
 8000de0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8000de2:	1d19      	adds	r1, r3, #4
 8000de4:	9100      	str	r1, [sp, #0]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f010 0f01 	tst.w	r0, #1
 8000dec:	bf14      	ite	ne
 8000dee:	801a      	strhne	r2, [r3, #0]
 8000df0:	601a      	streq	r2, [r3, #0]
 8000df2:	e6ef      	b.n	8000bd4 <__ssvfiscanf_r+0x4c>
 8000df4:	4621      	mov	r1, r4
 8000df6:	4630      	mov	r0, r6
 8000df8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8000dfa:	4798      	blx	r3
 8000dfc:	2800      	cmp	r0, #0
 8000dfe:	d0b6      	beq.n	8000d6e <__ssvfiscanf_r+0x1e6>
 8000e00:	e79c      	b.n	8000d3c <__ssvfiscanf_r+0x1b4>
 8000e02:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8000e04:	3201      	adds	r2, #1
 8000e06:	9245      	str	r2, [sp, #276]	; 0x114
 8000e08:	6862      	ldr	r2, [r4, #4]
 8000e0a:	3a01      	subs	r2, #1
 8000e0c:	2a00      	cmp	r2, #0
 8000e0e:	6062      	str	r2, [r4, #4]
 8000e10:	dd02      	ble.n	8000e18 <__ssvfiscanf_r+0x290>
 8000e12:	3301      	adds	r3, #1
 8000e14:	6023      	str	r3, [r4, #0]
 8000e16:	e7ad      	b.n	8000d74 <__ssvfiscanf_r+0x1ec>
 8000e18:	4621      	mov	r1, r4
 8000e1a:	4630      	mov	r0, r6
 8000e1c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8000e1e:	4798      	blx	r3
 8000e20:	2800      	cmp	r0, #0
 8000e22:	d0a7      	beq.n	8000d74 <__ssvfiscanf_r+0x1ec>
 8000e24:	e78a      	b.n	8000d3c <__ssvfiscanf_r+0x1b4>
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	dc0e      	bgt.n	8000e48 <__ssvfiscanf_r+0x2c0>
 8000e2a:	466b      	mov	r3, sp
 8000e2c:	4622      	mov	r2, r4
 8000e2e:	4630      	mov	r0, r6
 8000e30:	a941      	add	r1, sp, #260	; 0x104
 8000e32:	f000 f87d 	bl	8000f30 <_scanf_i>
 8000e36:	e7ab      	b.n	8000d90 <__ssvfiscanf_r+0x208>
 8000e38:	08000ad5 	.word	0x08000ad5
 8000e3c:	08000b4f 	.word	0x08000b4f
 8000e40:	0800174c 	.word	0x0800174c
 8000e44:	0800172c 	.word	0x0800172c
 8000e48:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <__ssvfiscanf_r+0x2f0>)
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f43f aec2 	beq.w	8000bd4 <__ssvfiscanf_r+0x4c>
 8000e50:	466b      	mov	r3, sp
 8000e52:	4622      	mov	r2, r4
 8000e54:	4630      	mov	r0, r6
 8000e56:	a941      	add	r1, sp, #260	; 0x104
 8000e58:	f3af 8000 	nop.w
 8000e5c:	e798      	b.n	8000d90 <__ssvfiscanf_r+0x208>
 8000e5e:	89a3      	ldrh	r3, [r4, #12]
 8000e60:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000e64:	bf18      	it	ne
 8000e66:	f04f 30ff 	movne.w	r0, #4294967295
 8000e6a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	9844      	ldr	r0, [sp, #272]	; 0x110
 8000e74:	e7f9      	b.n	8000e6a <__ssvfiscanf_r+0x2e2>
 8000e76:	bf00      	nop
 8000e78:	00000000 	.word	0x00000000

08000e7c <_scanf_chars>:
 8000e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e80:	4615      	mov	r5, r2
 8000e82:	688a      	ldr	r2, [r1, #8]
 8000e84:	4680      	mov	r8, r0
 8000e86:	460c      	mov	r4, r1
 8000e88:	b932      	cbnz	r2, 8000e98 <_scanf_chars+0x1c>
 8000e8a:	698a      	ldr	r2, [r1, #24]
 8000e8c:	2a00      	cmp	r2, #0
 8000e8e:	bf0c      	ite	eq
 8000e90:	2201      	moveq	r2, #1
 8000e92:	f04f 32ff 	movne.w	r2, #4294967295
 8000e96:	608a      	str	r2, [r1, #8]
 8000e98:	2700      	movs	r7, #0
 8000e9a:	6822      	ldr	r2, [r4, #0]
 8000e9c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8000f2c <_scanf_chars+0xb0>
 8000ea0:	06d1      	lsls	r1, r2, #27
 8000ea2:	bf5f      	itttt	pl
 8000ea4:	681a      	ldrpl	r2, [r3, #0]
 8000ea6:	1d11      	addpl	r1, r2, #4
 8000ea8:	6019      	strpl	r1, [r3, #0]
 8000eaa:	6816      	ldrpl	r6, [r2, #0]
 8000eac:	69a0      	ldr	r0, [r4, #24]
 8000eae:	b188      	cbz	r0, 8000ed4 <_scanf_chars+0x58>
 8000eb0:	2801      	cmp	r0, #1
 8000eb2:	d107      	bne.n	8000ec4 <_scanf_chars+0x48>
 8000eb4:	682b      	ldr	r3, [r5, #0]
 8000eb6:	781a      	ldrb	r2, [r3, #0]
 8000eb8:	6963      	ldr	r3, [r4, #20]
 8000eba:	5c9b      	ldrb	r3, [r3, r2]
 8000ebc:	b953      	cbnz	r3, 8000ed4 <_scanf_chars+0x58>
 8000ebe:	2f00      	cmp	r7, #0
 8000ec0:	d031      	beq.n	8000f26 <_scanf_chars+0xaa>
 8000ec2:	e022      	b.n	8000f0a <_scanf_chars+0x8e>
 8000ec4:	2802      	cmp	r0, #2
 8000ec6:	d120      	bne.n	8000f0a <_scanf_chars+0x8e>
 8000ec8:	682b      	ldr	r3, [r5, #0]
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	f813 3009 	ldrb.w	r3, [r3, r9]
 8000ed0:	071b      	lsls	r3, r3, #28
 8000ed2:	d41a      	bmi.n	8000f0a <_scanf_chars+0x8e>
 8000ed4:	6823      	ldr	r3, [r4, #0]
 8000ed6:	3701      	adds	r7, #1
 8000ed8:	06da      	lsls	r2, r3, #27
 8000eda:	bf5e      	ittt	pl
 8000edc:	682b      	ldrpl	r3, [r5, #0]
 8000ede:	781b      	ldrbpl	r3, [r3, #0]
 8000ee0:	f806 3b01 	strbpl.w	r3, [r6], #1
 8000ee4:	682a      	ldr	r2, [r5, #0]
 8000ee6:	686b      	ldr	r3, [r5, #4]
 8000ee8:	3201      	adds	r2, #1
 8000eea:	602a      	str	r2, [r5, #0]
 8000eec:	68a2      	ldr	r2, [r4, #8]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	3a01      	subs	r2, #1
 8000ef2:	606b      	str	r3, [r5, #4]
 8000ef4:	60a2      	str	r2, [r4, #8]
 8000ef6:	b142      	cbz	r2, 8000f0a <_scanf_chars+0x8e>
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	dcd7      	bgt.n	8000eac <_scanf_chars+0x30>
 8000efc:	4629      	mov	r1, r5
 8000efe:	4640      	mov	r0, r8
 8000f00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8000f04:	4798      	blx	r3
 8000f06:	2800      	cmp	r0, #0
 8000f08:	d0d0      	beq.n	8000eac <_scanf_chars+0x30>
 8000f0a:	6823      	ldr	r3, [r4, #0]
 8000f0c:	f013 0310 	ands.w	r3, r3, #16
 8000f10:	d105      	bne.n	8000f1e <_scanf_chars+0xa2>
 8000f12:	68e2      	ldr	r2, [r4, #12]
 8000f14:	3201      	adds	r2, #1
 8000f16:	60e2      	str	r2, [r4, #12]
 8000f18:	69a2      	ldr	r2, [r4, #24]
 8000f1a:	b102      	cbz	r2, 8000f1e <_scanf_chars+0xa2>
 8000f1c:	7033      	strb	r3, [r6, #0]
 8000f1e:	2000      	movs	r0, #0
 8000f20:	6923      	ldr	r3, [r4, #16]
 8000f22:	443b      	add	r3, r7
 8000f24:	6123      	str	r3, [r4, #16]
 8000f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f2a:	bf00      	nop
 8000f2c:	0800174c 	.word	0x0800174c

08000f30 <_scanf_i>:
 8000f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f34:	460c      	mov	r4, r1
 8000f36:	4698      	mov	r8, r3
 8000f38:	4b75      	ldr	r3, [pc, #468]	; (8001110 <_scanf_i+0x1e0>)
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	4682      	mov	sl, r0
 8000f3e:	4616      	mov	r6, r2
 8000f40:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f44:	ab03      	add	r3, sp, #12
 8000f46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000f4a:	4b72      	ldr	r3, [pc, #456]	; (8001114 <_scanf_i+0x1e4>)
 8000f4c:	69a1      	ldr	r1, [r4, #24]
 8000f4e:	4a72      	ldr	r2, [pc, #456]	; (8001118 <_scanf_i+0x1e8>)
 8000f50:	4627      	mov	r7, r4
 8000f52:	2903      	cmp	r1, #3
 8000f54:	bf18      	it	ne
 8000f56:	461a      	movne	r2, r3
 8000f58:	68a3      	ldr	r3, [r4, #8]
 8000f5a:	9201      	str	r2, [sp, #4]
 8000f5c:	1e5a      	subs	r2, r3, #1
 8000f5e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8000f62:	bf81      	itttt	hi
 8000f64:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8000f68:	eb03 0905 	addhi.w	r9, r3, r5
 8000f6c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8000f70:	60a3      	strhi	r3, [r4, #8]
 8000f72:	f857 3b1c 	ldr.w	r3, [r7], #28
 8000f76:	bf98      	it	ls
 8000f78:	f04f 0900 	movls.w	r9, #0
 8000f7c:	463d      	mov	r5, r7
 8000f7e:	f04f 0b00 	mov.w	fp, #0
 8000f82:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8000f86:	6023      	str	r3, [r4, #0]
 8000f88:	6831      	ldr	r1, [r6, #0]
 8000f8a:	ab03      	add	r3, sp, #12
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	7809      	ldrb	r1, [r1, #0]
 8000f90:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8000f94:	f000 fa28 	bl	80013e8 <memchr>
 8000f98:	b328      	cbz	r0, 8000fe6 <_scanf_i+0xb6>
 8000f9a:	f1bb 0f01 	cmp.w	fp, #1
 8000f9e:	d159      	bne.n	8001054 <_scanf_i+0x124>
 8000fa0:	6862      	ldr	r2, [r4, #4]
 8000fa2:	b92a      	cbnz	r2, 8000fb0 <_scanf_i+0x80>
 8000fa4:	2308      	movs	r3, #8
 8000fa6:	6822      	ldr	r2, [r4, #0]
 8000fa8:	6063      	str	r3, [r4, #4]
 8000faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fae:	6022      	str	r2, [r4, #0]
 8000fb0:	6822      	ldr	r2, [r4, #0]
 8000fb2:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8000fb6:	6022      	str	r2, [r4, #0]
 8000fb8:	68a2      	ldr	r2, [r4, #8]
 8000fba:	1e51      	subs	r1, r2, #1
 8000fbc:	60a1      	str	r1, [r4, #8]
 8000fbe:	b192      	cbz	r2, 8000fe6 <_scanf_i+0xb6>
 8000fc0:	6832      	ldr	r2, [r6, #0]
 8000fc2:	1c51      	adds	r1, r2, #1
 8000fc4:	6031      	str	r1, [r6, #0]
 8000fc6:	7812      	ldrb	r2, [r2, #0]
 8000fc8:	f805 2b01 	strb.w	r2, [r5], #1
 8000fcc:	6872      	ldr	r2, [r6, #4]
 8000fce:	3a01      	subs	r2, #1
 8000fd0:	2a00      	cmp	r2, #0
 8000fd2:	6072      	str	r2, [r6, #4]
 8000fd4:	dc07      	bgt.n	8000fe6 <_scanf_i+0xb6>
 8000fd6:	4631      	mov	r1, r6
 8000fd8:	4650      	mov	r0, sl
 8000fda:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8000fde:	4790      	blx	r2
 8000fe0:	2800      	cmp	r0, #0
 8000fe2:	f040 8085 	bne.w	80010f0 <_scanf_i+0x1c0>
 8000fe6:	f10b 0b01 	add.w	fp, fp, #1
 8000fea:	f1bb 0f03 	cmp.w	fp, #3
 8000fee:	d1cb      	bne.n	8000f88 <_scanf_i+0x58>
 8000ff0:	6863      	ldr	r3, [r4, #4]
 8000ff2:	b90b      	cbnz	r3, 8000ff8 <_scanf_i+0xc8>
 8000ff4:	230a      	movs	r3, #10
 8000ff6:	6063      	str	r3, [r4, #4]
 8000ff8:	6863      	ldr	r3, [r4, #4]
 8000ffa:	4948      	ldr	r1, [pc, #288]	; (800111c <_scanf_i+0x1ec>)
 8000ffc:	6960      	ldr	r0, [r4, #20]
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	f000 f88e 	bl	8001120 <__sccl>
 8001004:	f04f 0b00 	mov.w	fp, #0
 8001008:	68a3      	ldr	r3, [r4, #8]
 800100a:	6822      	ldr	r2, [r4, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d03d      	beq.n	800108c <_scanf_i+0x15c>
 8001010:	6831      	ldr	r1, [r6, #0]
 8001012:	6960      	ldr	r0, [r4, #20]
 8001014:	f891 c000 	ldrb.w	ip, [r1]
 8001018:	f810 000c 	ldrb.w	r0, [r0, ip]
 800101c:	2800      	cmp	r0, #0
 800101e:	d035      	beq.n	800108c <_scanf_i+0x15c>
 8001020:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8001024:	d124      	bne.n	8001070 <_scanf_i+0x140>
 8001026:	0510      	lsls	r0, r2, #20
 8001028:	d522      	bpl.n	8001070 <_scanf_i+0x140>
 800102a:	f10b 0b01 	add.w	fp, fp, #1
 800102e:	f1b9 0f00 	cmp.w	r9, #0
 8001032:	d003      	beq.n	800103c <_scanf_i+0x10c>
 8001034:	3301      	adds	r3, #1
 8001036:	f109 39ff 	add.w	r9, r9, #4294967295
 800103a:	60a3      	str	r3, [r4, #8]
 800103c:	6873      	ldr	r3, [r6, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	2b00      	cmp	r3, #0
 8001042:	6073      	str	r3, [r6, #4]
 8001044:	dd1b      	ble.n	800107e <_scanf_i+0x14e>
 8001046:	6833      	ldr	r3, [r6, #0]
 8001048:	3301      	adds	r3, #1
 800104a:	6033      	str	r3, [r6, #0]
 800104c:	68a3      	ldr	r3, [r4, #8]
 800104e:	3b01      	subs	r3, #1
 8001050:	60a3      	str	r3, [r4, #8]
 8001052:	e7d9      	b.n	8001008 <_scanf_i+0xd8>
 8001054:	f1bb 0f02 	cmp.w	fp, #2
 8001058:	d1ae      	bne.n	8000fb8 <_scanf_i+0x88>
 800105a:	6822      	ldr	r2, [r4, #0]
 800105c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8001060:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001064:	d1bf      	bne.n	8000fe6 <_scanf_i+0xb6>
 8001066:	2310      	movs	r3, #16
 8001068:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800106c:	6063      	str	r3, [r4, #4]
 800106e:	e7a2      	b.n	8000fb6 <_scanf_i+0x86>
 8001070:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8001074:	6022      	str	r2, [r4, #0]
 8001076:	780b      	ldrb	r3, [r1, #0]
 8001078:	f805 3b01 	strb.w	r3, [r5], #1
 800107c:	e7de      	b.n	800103c <_scanf_i+0x10c>
 800107e:	4631      	mov	r1, r6
 8001080:	4650      	mov	r0, sl
 8001082:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8001086:	4798      	blx	r3
 8001088:	2800      	cmp	r0, #0
 800108a:	d0df      	beq.n	800104c <_scanf_i+0x11c>
 800108c:	6823      	ldr	r3, [r4, #0]
 800108e:	05db      	lsls	r3, r3, #23
 8001090:	d50d      	bpl.n	80010ae <_scanf_i+0x17e>
 8001092:	42bd      	cmp	r5, r7
 8001094:	d909      	bls.n	80010aa <_scanf_i+0x17a>
 8001096:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800109a:	4632      	mov	r2, r6
 800109c:	4650      	mov	r0, sl
 800109e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80010a2:	f105 39ff 	add.w	r9, r5, #4294967295
 80010a6:	4798      	blx	r3
 80010a8:	464d      	mov	r5, r9
 80010aa:	42bd      	cmp	r5, r7
 80010ac:	d02d      	beq.n	800110a <_scanf_i+0x1da>
 80010ae:	6822      	ldr	r2, [r4, #0]
 80010b0:	f012 0210 	ands.w	r2, r2, #16
 80010b4:	d113      	bne.n	80010de <_scanf_i+0x1ae>
 80010b6:	702a      	strb	r2, [r5, #0]
 80010b8:	4639      	mov	r1, r7
 80010ba:	6863      	ldr	r3, [r4, #4]
 80010bc:	4650      	mov	r0, sl
 80010be:	9e01      	ldr	r6, [sp, #4]
 80010c0:	47b0      	blx	r6
 80010c2:	6821      	ldr	r1, [r4, #0]
 80010c4:	f8d8 3000 	ldr.w	r3, [r8]
 80010c8:	f011 0f20 	tst.w	r1, #32
 80010cc:	d013      	beq.n	80010f6 <_scanf_i+0x1c6>
 80010ce:	1d1a      	adds	r2, r3, #4
 80010d0:	f8c8 2000 	str.w	r2, [r8]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	6018      	str	r0, [r3, #0]
 80010d8:	68e3      	ldr	r3, [r4, #12]
 80010da:	3301      	adds	r3, #1
 80010dc:	60e3      	str	r3, [r4, #12]
 80010de:	2000      	movs	r0, #0
 80010e0:	1bed      	subs	r5, r5, r7
 80010e2:	44ab      	add	fp, r5
 80010e4:	6925      	ldr	r5, [r4, #16]
 80010e6:	445d      	add	r5, fp
 80010e8:	6125      	str	r5, [r4, #16]
 80010ea:	b007      	add	sp, #28
 80010ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010f0:	f04f 0b00 	mov.w	fp, #0
 80010f4:	e7ca      	b.n	800108c <_scanf_i+0x15c>
 80010f6:	1d1a      	adds	r2, r3, #4
 80010f8:	f8c8 2000 	str.w	r2, [r8]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f011 0f01 	tst.w	r1, #1
 8001102:	bf14      	ite	ne
 8001104:	8018      	strhne	r0, [r3, #0]
 8001106:	6018      	streq	r0, [r3, #0]
 8001108:	e7e6      	b.n	80010d8 <_scanf_i+0x1a8>
 800110a:	2001      	movs	r0, #1
 800110c:	e7ed      	b.n	80010ea <_scanf_i+0x1ba>
 800110e:	bf00      	nop
 8001110:	08001720 	.word	0x08001720
 8001114:	08001371 	.word	0x08001371
 8001118:	08001289 	.word	0x08001289
 800111c:	08001749 	.word	0x08001749

08001120 <__sccl>:
 8001120:	b570      	push	{r4, r5, r6, lr}
 8001122:	780b      	ldrb	r3, [r1, #0]
 8001124:	4604      	mov	r4, r0
 8001126:	2b5e      	cmp	r3, #94	; 0x5e
 8001128:	bf13      	iteet	ne
 800112a:	2200      	movne	r2, #0
 800112c:	2201      	moveq	r2, #1
 800112e:	784b      	ldrbeq	r3, [r1, #1]
 8001130:	1c48      	addne	r0, r1, #1
 8001132:	bf08      	it	eq
 8001134:	1c88      	addeq	r0, r1, #2
 8001136:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800113a:	1e61      	subs	r1, r4, #1
 800113c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8001140:	42a9      	cmp	r1, r5
 8001142:	d1fb      	bne.n	800113c <__sccl+0x1c>
 8001144:	b90b      	cbnz	r3, 800114a <__sccl+0x2a>
 8001146:	3801      	subs	r0, #1
 8001148:	bd70      	pop	{r4, r5, r6, pc}
 800114a:	f082 0201 	eor.w	r2, r2, #1
 800114e:	4605      	mov	r5, r0
 8001150:	54e2      	strb	r2, [r4, r3]
 8001152:	4628      	mov	r0, r5
 8001154:	f810 1b01 	ldrb.w	r1, [r0], #1
 8001158:	292d      	cmp	r1, #45	; 0x2d
 800115a:	d006      	beq.n	800116a <__sccl+0x4a>
 800115c:	295d      	cmp	r1, #93	; 0x5d
 800115e:	d0f3      	beq.n	8001148 <__sccl+0x28>
 8001160:	b909      	cbnz	r1, 8001166 <__sccl+0x46>
 8001162:	4628      	mov	r0, r5
 8001164:	e7f0      	b.n	8001148 <__sccl+0x28>
 8001166:	460b      	mov	r3, r1
 8001168:	e7f1      	b.n	800114e <__sccl+0x2e>
 800116a:	786e      	ldrb	r6, [r5, #1]
 800116c:	2e5d      	cmp	r6, #93	; 0x5d
 800116e:	d0fa      	beq.n	8001166 <__sccl+0x46>
 8001170:	42b3      	cmp	r3, r6
 8001172:	dcf8      	bgt.n	8001166 <__sccl+0x46>
 8001174:	4619      	mov	r1, r3
 8001176:	3502      	adds	r5, #2
 8001178:	3101      	adds	r1, #1
 800117a:	428e      	cmp	r6, r1
 800117c:	5462      	strb	r2, [r4, r1]
 800117e:	dcfb      	bgt.n	8001178 <__sccl+0x58>
 8001180:	1af1      	subs	r1, r6, r3
 8001182:	3901      	subs	r1, #1
 8001184:	42b3      	cmp	r3, r6
 8001186:	bfa8      	it	ge
 8001188:	2100      	movge	r1, #0
 800118a:	1c58      	adds	r0, r3, #1
 800118c:	1843      	adds	r3, r0, r1
 800118e:	e7e0      	b.n	8001152 <__sccl+0x32>

08001190 <_strtol_l.constprop.0>:
 8001190:	2b01      	cmp	r3, #1
 8001192:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001196:	4680      	mov	r8, r0
 8001198:	d001      	beq.n	800119e <_strtol_l.constprop.0+0xe>
 800119a:	2b24      	cmp	r3, #36	; 0x24
 800119c:	d906      	bls.n	80011ac <_strtol_l.constprop.0+0x1c>
 800119e:	f7ff fc27 	bl	80009f0 <__errno>
 80011a2:	2316      	movs	r3, #22
 80011a4:	6003      	str	r3, [r0, #0]
 80011a6:	2000      	movs	r0, #0
 80011a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ac:	460d      	mov	r5, r1
 80011ae:	4f35      	ldr	r7, [pc, #212]	; (8001284 <_strtol_l.constprop.0+0xf4>)
 80011b0:	4628      	mov	r0, r5
 80011b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80011b6:	5de6      	ldrb	r6, [r4, r7]
 80011b8:	f016 0608 	ands.w	r6, r6, #8
 80011bc:	d1f8      	bne.n	80011b0 <_strtol_l.constprop.0+0x20>
 80011be:	2c2d      	cmp	r4, #45	; 0x2d
 80011c0:	d12f      	bne.n	8001222 <_strtol_l.constprop.0+0x92>
 80011c2:	2601      	movs	r6, #1
 80011c4:	782c      	ldrb	r4, [r5, #0]
 80011c6:	1c85      	adds	r5, r0, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d057      	beq.n	800127c <_strtol_l.constprop.0+0xec>
 80011cc:	2b10      	cmp	r3, #16
 80011ce:	d109      	bne.n	80011e4 <_strtol_l.constprop.0+0x54>
 80011d0:	2c30      	cmp	r4, #48	; 0x30
 80011d2:	d107      	bne.n	80011e4 <_strtol_l.constprop.0+0x54>
 80011d4:	7828      	ldrb	r0, [r5, #0]
 80011d6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80011da:	2858      	cmp	r0, #88	; 0x58
 80011dc:	d149      	bne.n	8001272 <_strtol_l.constprop.0+0xe2>
 80011de:	2310      	movs	r3, #16
 80011e0:	786c      	ldrb	r4, [r5, #1]
 80011e2:	3502      	adds	r5, #2
 80011e4:	2700      	movs	r7, #0
 80011e6:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80011ea:	f10e 3eff 	add.w	lr, lr, #4294967295
 80011ee:	fbbe f9f3 	udiv	r9, lr, r3
 80011f2:	4638      	mov	r0, r7
 80011f4:	fb03 ea19 	mls	sl, r3, r9, lr
 80011f8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80011fc:	f1bc 0f09 	cmp.w	ip, #9
 8001200:	d814      	bhi.n	800122c <_strtol_l.constprop.0+0x9c>
 8001202:	4664      	mov	r4, ip
 8001204:	42a3      	cmp	r3, r4
 8001206:	dd22      	ble.n	800124e <_strtol_l.constprop.0+0xbe>
 8001208:	2f00      	cmp	r7, #0
 800120a:	db1d      	blt.n	8001248 <_strtol_l.constprop.0+0xb8>
 800120c:	4581      	cmp	r9, r0
 800120e:	d31b      	bcc.n	8001248 <_strtol_l.constprop.0+0xb8>
 8001210:	d101      	bne.n	8001216 <_strtol_l.constprop.0+0x86>
 8001212:	45a2      	cmp	sl, r4
 8001214:	db18      	blt.n	8001248 <_strtol_l.constprop.0+0xb8>
 8001216:	2701      	movs	r7, #1
 8001218:	fb00 4003 	mla	r0, r0, r3, r4
 800121c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001220:	e7ea      	b.n	80011f8 <_strtol_l.constprop.0+0x68>
 8001222:	2c2b      	cmp	r4, #43	; 0x2b
 8001224:	bf04      	itt	eq
 8001226:	782c      	ldrbeq	r4, [r5, #0]
 8001228:	1c85      	addeq	r5, r0, #2
 800122a:	e7cd      	b.n	80011c8 <_strtol_l.constprop.0+0x38>
 800122c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8001230:	f1bc 0f19 	cmp.w	ip, #25
 8001234:	d801      	bhi.n	800123a <_strtol_l.constprop.0+0xaa>
 8001236:	3c37      	subs	r4, #55	; 0x37
 8001238:	e7e4      	b.n	8001204 <_strtol_l.constprop.0+0x74>
 800123a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800123e:	f1bc 0f19 	cmp.w	ip, #25
 8001242:	d804      	bhi.n	800124e <_strtol_l.constprop.0+0xbe>
 8001244:	3c57      	subs	r4, #87	; 0x57
 8001246:	e7dd      	b.n	8001204 <_strtol_l.constprop.0+0x74>
 8001248:	f04f 37ff 	mov.w	r7, #4294967295
 800124c:	e7e6      	b.n	800121c <_strtol_l.constprop.0+0x8c>
 800124e:	2f00      	cmp	r7, #0
 8001250:	da07      	bge.n	8001262 <_strtol_l.constprop.0+0xd2>
 8001252:	2322      	movs	r3, #34	; 0x22
 8001254:	4670      	mov	r0, lr
 8001256:	f8c8 3000 	str.w	r3, [r8]
 800125a:	2a00      	cmp	r2, #0
 800125c:	d0a4      	beq.n	80011a8 <_strtol_l.constprop.0+0x18>
 800125e:	1e69      	subs	r1, r5, #1
 8001260:	e005      	b.n	800126e <_strtol_l.constprop.0+0xde>
 8001262:	b106      	cbz	r6, 8001266 <_strtol_l.constprop.0+0xd6>
 8001264:	4240      	negs	r0, r0
 8001266:	2a00      	cmp	r2, #0
 8001268:	d09e      	beq.n	80011a8 <_strtol_l.constprop.0+0x18>
 800126a:	2f00      	cmp	r7, #0
 800126c:	d1f7      	bne.n	800125e <_strtol_l.constprop.0+0xce>
 800126e:	6011      	str	r1, [r2, #0]
 8001270:	e79a      	b.n	80011a8 <_strtol_l.constprop.0+0x18>
 8001272:	2430      	movs	r4, #48	; 0x30
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1b5      	bne.n	80011e4 <_strtol_l.constprop.0+0x54>
 8001278:	2308      	movs	r3, #8
 800127a:	e7b3      	b.n	80011e4 <_strtol_l.constprop.0+0x54>
 800127c:	2c30      	cmp	r4, #48	; 0x30
 800127e:	d0a9      	beq.n	80011d4 <_strtol_l.constprop.0+0x44>
 8001280:	230a      	movs	r3, #10
 8001282:	e7af      	b.n	80011e4 <_strtol_l.constprop.0+0x54>
 8001284:	0800174c 	.word	0x0800174c

08001288 <_strtol_r>:
 8001288:	f7ff bf82 	b.w	8001190 <_strtol_l.constprop.0>

0800128c <_strtoul_l.constprop.0>:
 800128c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001290:	4686      	mov	lr, r0
 8001292:	460d      	mov	r5, r1
 8001294:	4f35      	ldr	r7, [pc, #212]	; (800136c <_strtoul_l.constprop.0+0xe0>)
 8001296:	4628      	mov	r0, r5
 8001298:	f815 4b01 	ldrb.w	r4, [r5], #1
 800129c:	5de6      	ldrb	r6, [r4, r7]
 800129e:	f016 0608 	ands.w	r6, r6, #8
 80012a2:	d1f8      	bne.n	8001296 <_strtoul_l.constprop.0+0xa>
 80012a4:	2c2d      	cmp	r4, #45	; 0x2d
 80012a6:	d12f      	bne.n	8001308 <_strtoul_l.constprop.0+0x7c>
 80012a8:	2601      	movs	r6, #1
 80012aa:	782c      	ldrb	r4, [r5, #0]
 80012ac:	1c85      	adds	r5, r0, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d057      	beq.n	8001362 <_strtoul_l.constprop.0+0xd6>
 80012b2:	2b10      	cmp	r3, #16
 80012b4:	d109      	bne.n	80012ca <_strtoul_l.constprop.0+0x3e>
 80012b6:	2c30      	cmp	r4, #48	; 0x30
 80012b8:	d107      	bne.n	80012ca <_strtoul_l.constprop.0+0x3e>
 80012ba:	7828      	ldrb	r0, [r5, #0]
 80012bc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80012c0:	2858      	cmp	r0, #88	; 0x58
 80012c2:	d149      	bne.n	8001358 <_strtoul_l.constprop.0+0xcc>
 80012c4:	2310      	movs	r3, #16
 80012c6:	786c      	ldrb	r4, [r5, #1]
 80012c8:	3502      	adds	r5, #2
 80012ca:	f04f 38ff 	mov.w	r8, #4294967295
 80012ce:	fbb8 f8f3 	udiv	r8, r8, r3
 80012d2:	2700      	movs	r7, #0
 80012d4:	fb03 f908 	mul.w	r9, r3, r8
 80012d8:	4638      	mov	r0, r7
 80012da:	ea6f 0909 	mvn.w	r9, r9
 80012de:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80012e2:	f1bc 0f09 	cmp.w	ip, #9
 80012e6:	d814      	bhi.n	8001312 <_strtoul_l.constprop.0+0x86>
 80012e8:	4664      	mov	r4, ip
 80012ea:	42a3      	cmp	r3, r4
 80012ec:	dd22      	ble.n	8001334 <_strtoul_l.constprop.0+0xa8>
 80012ee:	2f00      	cmp	r7, #0
 80012f0:	db1d      	blt.n	800132e <_strtoul_l.constprop.0+0xa2>
 80012f2:	4580      	cmp	r8, r0
 80012f4:	d31b      	bcc.n	800132e <_strtoul_l.constprop.0+0xa2>
 80012f6:	d101      	bne.n	80012fc <_strtoul_l.constprop.0+0x70>
 80012f8:	45a1      	cmp	r9, r4
 80012fa:	db18      	blt.n	800132e <_strtoul_l.constprop.0+0xa2>
 80012fc:	2701      	movs	r7, #1
 80012fe:	fb00 4003 	mla	r0, r0, r3, r4
 8001302:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001306:	e7ea      	b.n	80012de <_strtoul_l.constprop.0+0x52>
 8001308:	2c2b      	cmp	r4, #43	; 0x2b
 800130a:	bf04      	itt	eq
 800130c:	782c      	ldrbeq	r4, [r5, #0]
 800130e:	1c85      	addeq	r5, r0, #2
 8001310:	e7cd      	b.n	80012ae <_strtoul_l.constprop.0+0x22>
 8001312:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8001316:	f1bc 0f19 	cmp.w	ip, #25
 800131a:	d801      	bhi.n	8001320 <_strtoul_l.constprop.0+0x94>
 800131c:	3c37      	subs	r4, #55	; 0x37
 800131e:	e7e4      	b.n	80012ea <_strtoul_l.constprop.0+0x5e>
 8001320:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8001324:	f1bc 0f19 	cmp.w	ip, #25
 8001328:	d804      	bhi.n	8001334 <_strtoul_l.constprop.0+0xa8>
 800132a:	3c57      	subs	r4, #87	; 0x57
 800132c:	e7dd      	b.n	80012ea <_strtoul_l.constprop.0+0x5e>
 800132e:	f04f 37ff 	mov.w	r7, #4294967295
 8001332:	e7e6      	b.n	8001302 <_strtoul_l.constprop.0+0x76>
 8001334:	2f00      	cmp	r7, #0
 8001336:	da07      	bge.n	8001348 <_strtoul_l.constprop.0+0xbc>
 8001338:	2322      	movs	r3, #34	; 0x22
 800133a:	f04f 30ff 	mov.w	r0, #4294967295
 800133e:	f8ce 3000 	str.w	r3, [lr]
 8001342:	b932      	cbnz	r2, 8001352 <_strtoul_l.constprop.0+0xc6>
 8001344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001348:	b106      	cbz	r6, 800134c <_strtoul_l.constprop.0+0xc0>
 800134a:	4240      	negs	r0, r0
 800134c:	2a00      	cmp	r2, #0
 800134e:	d0f9      	beq.n	8001344 <_strtoul_l.constprop.0+0xb8>
 8001350:	b107      	cbz	r7, 8001354 <_strtoul_l.constprop.0+0xc8>
 8001352:	1e69      	subs	r1, r5, #1
 8001354:	6011      	str	r1, [r2, #0]
 8001356:	e7f5      	b.n	8001344 <_strtoul_l.constprop.0+0xb8>
 8001358:	2430      	movs	r4, #48	; 0x30
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1b5      	bne.n	80012ca <_strtoul_l.constprop.0+0x3e>
 800135e:	2308      	movs	r3, #8
 8001360:	e7b3      	b.n	80012ca <_strtoul_l.constprop.0+0x3e>
 8001362:	2c30      	cmp	r4, #48	; 0x30
 8001364:	d0a9      	beq.n	80012ba <_strtoul_l.constprop.0+0x2e>
 8001366:	230a      	movs	r3, #10
 8001368:	e7af      	b.n	80012ca <_strtoul_l.constprop.0+0x3e>
 800136a:	bf00      	nop
 800136c:	0800174c 	.word	0x0800174c

08001370 <_strtoul_r>:
 8001370:	f7ff bf8c 	b.w	800128c <_strtoul_l.constprop.0>

08001374 <__submore>:
 8001374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001378:	460c      	mov	r4, r1
 800137a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800137c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001380:	4299      	cmp	r1, r3
 8001382:	d11b      	bne.n	80013bc <__submore+0x48>
 8001384:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001388:	f000 f8b2 	bl	80014f0 <_malloc_r>
 800138c:	b918      	cbnz	r0, 8001396 <__submore+0x22>
 800138e:	f04f 30ff 	mov.w	r0, #4294967295
 8001392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800139a:	63a3      	str	r3, [r4, #56]	; 0x38
 800139c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80013a0:	6360      	str	r0, [r4, #52]	; 0x34
 80013a2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80013a6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80013aa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80013ae:	7043      	strb	r3, [r0, #1]
 80013b0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80013b4:	7003      	strb	r3, [r0, #0]
 80013b6:	6020      	str	r0, [r4, #0]
 80013b8:	2000      	movs	r0, #0
 80013ba:	e7ea      	b.n	8001392 <__submore+0x1e>
 80013bc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80013be:	0077      	lsls	r7, r6, #1
 80013c0:	463a      	mov	r2, r7
 80013c2:	f000 f909 	bl	80015d8 <_realloc_r>
 80013c6:	4605      	mov	r5, r0
 80013c8:	2800      	cmp	r0, #0
 80013ca:	d0e0      	beq.n	800138e <__submore+0x1a>
 80013cc:	eb00 0806 	add.w	r8, r0, r6
 80013d0:	4601      	mov	r1, r0
 80013d2:	4632      	mov	r2, r6
 80013d4:	4640      	mov	r0, r8
 80013d6:	f000 f815 	bl	8001404 <memcpy>
 80013da:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80013de:	f8c4 8000 	str.w	r8, [r4]
 80013e2:	e7e9      	b.n	80013b8 <__submore+0x44>

080013e4 <__retarget_lock_acquire_recursive>:
 80013e4:	4770      	bx	lr

080013e6 <__retarget_lock_release_recursive>:
 80013e6:	4770      	bx	lr

080013e8 <memchr>:
 80013e8:	4603      	mov	r3, r0
 80013ea:	b510      	push	{r4, lr}
 80013ec:	b2c9      	uxtb	r1, r1
 80013ee:	4402      	add	r2, r0
 80013f0:	4293      	cmp	r3, r2
 80013f2:	4618      	mov	r0, r3
 80013f4:	d101      	bne.n	80013fa <memchr+0x12>
 80013f6:	2000      	movs	r0, #0
 80013f8:	e003      	b.n	8001402 <memchr+0x1a>
 80013fa:	7804      	ldrb	r4, [r0, #0]
 80013fc:	3301      	adds	r3, #1
 80013fe:	428c      	cmp	r4, r1
 8001400:	d1f6      	bne.n	80013f0 <memchr+0x8>
 8001402:	bd10      	pop	{r4, pc}

08001404 <memcpy>:
 8001404:	440a      	add	r2, r1
 8001406:	4291      	cmp	r1, r2
 8001408:	f100 33ff 	add.w	r3, r0, #4294967295
 800140c:	d100      	bne.n	8001410 <memcpy+0xc>
 800140e:	4770      	bx	lr
 8001410:	b510      	push	{r4, lr}
 8001412:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001416:	4291      	cmp	r1, r2
 8001418:	f803 4f01 	strb.w	r4, [r3, #1]!
 800141c:	d1f9      	bne.n	8001412 <memcpy+0xe>
 800141e:	bd10      	pop	{r4, pc}

08001420 <_free_r>:
 8001420:	b538      	push	{r3, r4, r5, lr}
 8001422:	4605      	mov	r5, r0
 8001424:	2900      	cmp	r1, #0
 8001426:	d040      	beq.n	80014aa <_free_r+0x8a>
 8001428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800142c:	1f0c      	subs	r4, r1, #4
 800142e:	2b00      	cmp	r3, #0
 8001430:	bfb8      	it	lt
 8001432:	18e4      	addlt	r4, r4, r3
 8001434:	f000 f910 	bl	8001658 <__malloc_lock>
 8001438:	4a1c      	ldr	r2, [pc, #112]	; (80014ac <_free_r+0x8c>)
 800143a:	6813      	ldr	r3, [r2, #0]
 800143c:	b933      	cbnz	r3, 800144c <_free_r+0x2c>
 800143e:	6063      	str	r3, [r4, #4]
 8001440:	6014      	str	r4, [r2, #0]
 8001442:	4628      	mov	r0, r5
 8001444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001448:	f000 b90c 	b.w	8001664 <__malloc_unlock>
 800144c:	42a3      	cmp	r3, r4
 800144e:	d908      	bls.n	8001462 <_free_r+0x42>
 8001450:	6820      	ldr	r0, [r4, #0]
 8001452:	1821      	adds	r1, r4, r0
 8001454:	428b      	cmp	r3, r1
 8001456:	bf01      	itttt	eq
 8001458:	6819      	ldreq	r1, [r3, #0]
 800145a:	685b      	ldreq	r3, [r3, #4]
 800145c:	1809      	addeq	r1, r1, r0
 800145e:	6021      	streq	r1, [r4, #0]
 8001460:	e7ed      	b.n	800143e <_free_r+0x1e>
 8001462:	461a      	mov	r2, r3
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	b10b      	cbz	r3, 800146c <_free_r+0x4c>
 8001468:	42a3      	cmp	r3, r4
 800146a:	d9fa      	bls.n	8001462 <_free_r+0x42>
 800146c:	6811      	ldr	r1, [r2, #0]
 800146e:	1850      	adds	r0, r2, r1
 8001470:	42a0      	cmp	r0, r4
 8001472:	d10b      	bne.n	800148c <_free_r+0x6c>
 8001474:	6820      	ldr	r0, [r4, #0]
 8001476:	4401      	add	r1, r0
 8001478:	1850      	adds	r0, r2, r1
 800147a:	4283      	cmp	r3, r0
 800147c:	6011      	str	r1, [r2, #0]
 800147e:	d1e0      	bne.n	8001442 <_free_r+0x22>
 8001480:	6818      	ldr	r0, [r3, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	4401      	add	r1, r0
 8001486:	6011      	str	r1, [r2, #0]
 8001488:	6053      	str	r3, [r2, #4]
 800148a:	e7da      	b.n	8001442 <_free_r+0x22>
 800148c:	d902      	bls.n	8001494 <_free_r+0x74>
 800148e:	230c      	movs	r3, #12
 8001490:	602b      	str	r3, [r5, #0]
 8001492:	e7d6      	b.n	8001442 <_free_r+0x22>
 8001494:	6820      	ldr	r0, [r4, #0]
 8001496:	1821      	adds	r1, r4, r0
 8001498:	428b      	cmp	r3, r1
 800149a:	bf01      	itttt	eq
 800149c:	6819      	ldreq	r1, [r3, #0]
 800149e:	685b      	ldreq	r3, [r3, #4]
 80014a0:	1809      	addeq	r1, r1, r0
 80014a2:	6021      	streq	r1, [r4, #0]
 80014a4:	6063      	str	r3, [r4, #4]
 80014a6:	6054      	str	r4, [r2, #4]
 80014a8:	e7cb      	b.n	8001442 <_free_r+0x22>
 80014aa:	bd38      	pop	{r3, r4, r5, pc}
 80014ac:	20000298 	.word	0x20000298

080014b0 <sbrk_aligned>:
 80014b0:	b570      	push	{r4, r5, r6, lr}
 80014b2:	4e0e      	ldr	r6, [pc, #56]	; (80014ec <sbrk_aligned+0x3c>)
 80014b4:	460c      	mov	r4, r1
 80014b6:	6831      	ldr	r1, [r6, #0]
 80014b8:	4605      	mov	r5, r0
 80014ba:	b911      	cbnz	r1, 80014c2 <sbrk_aligned+0x12>
 80014bc:	f000 f8bc 	bl	8001638 <_sbrk_r>
 80014c0:	6030      	str	r0, [r6, #0]
 80014c2:	4621      	mov	r1, r4
 80014c4:	4628      	mov	r0, r5
 80014c6:	f000 f8b7 	bl	8001638 <_sbrk_r>
 80014ca:	1c43      	adds	r3, r0, #1
 80014cc:	d00a      	beq.n	80014e4 <sbrk_aligned+0x34>
 80014ce:	1cc4      	adds	r4, r0, #3
 80014d0:	f024 0403 	bic.w	r4, r4, #3
 80014d4:	42a0      	cmp	r0, r4
 80014d6:	d007      	beq.n	80014e8 <sbrk_aligned+0x38>
 80014d8:	1a21      	subs	r1, r4, r0
 80014da:	4628      	mov	r0, r5
 80014dc:	f000 f8ac 	bl	8001638 <_sbrk_r>
 80014e0:	3001      	adds	r0, #1
 80014e2:	d101      	bne.n	80014e8 <sbrk_aligned+0x38>
 80014e4:	f04f 34ff 	mov.w	r4, #4294967295
 80014e8:	4620      	mov	r0, r4
 80014ea:	bd70      	pop	{r4, r5, r6, pc}
 80014ec:	2000029c 	.word	0x2000029c

080014f0 <_malloc_r>:
 80014f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014f4:	1ccd      	adds	r5, r1, #3
 80014f6:	f025 0503 	bic.w	r5, r5, #3
 80014fa:	3508      	adds	r5, #8
 80014fc:	2d0c      	cmp	r5, #12
 80014fe:	bf38      	it	cc
 8001500:	250c      	movcc	r5, #12
 8001502:	2d00      	cmp	r5, #0
 8001504:	4607      	mov	r7, r0
 8001506:	db01      	blt.n	800150c <_malloc_r+0x1c>
 8001508:	42a9      	cmp	r1, r5
 800150a:	d905      	bls.n	8001518 <_malloc_r+0x28>
 800150c:	230c      	movs	r3, #12
 800150e:	2600      	movs	r6, #0
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	4630      	mov	r0, r6
 8001514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001518:	4e2e      	ldr	r6, [pc, #184]	; (80015d4 <_malloc_r+0xe4>)
 800151a:	f000 f89d 	bl	8001658 <__malloc_lock>
 800151e:	6833      	ldr	r3, [r6, #0]
 8001520:	461c      	mov	r4, r3
 8001522:	bb34      	cbnz	r4, 8001572 <_malloc_r+0x82>
 8001524:	4629      	mov	r1, r5
 8001526:	4638      	mov	r0, r7
 8001528:	f7ff ffc2 	bl	80014b0 <sbrk_aligned>
 800152c:	1c43      	adds	r3, r0, #1
 800152e:	4604      	mov	r4, r0
 8001530:	d14d      	bne.n	80015ce <_malloc_r+0xde>
 8001532:	6834      	ldr	r4, [r6, #0]
 8001534:	4626      	mov	r6, r4
 8001536:	2e00      	cmp	r6, #0
 8001538:	d140      	bne.n	80015bc <_malloc_r+0xcc>
 800153a:	6823      	ldr	r3, [r4, #0]
 800153c:	4631      	mov	r1, r6
 800153e:	4638      	mov	r0, r7
 8001540:	eb04 0803 	add.w	r8, r4, r3
 8001544:	f000 f878 	bl	8001638 <_sbrk_r>
 8001548:	4580      	cmp	r8, r0
 800154a:	d13a      	bne.n	80015c2 <_malloc_r+0xd2>
 800154c:	6821      	ldr	r1, [r4, #0]
 800154e:	3503      	adds	r5, #3
 8001550:	1a6d      	subs	r5, r5, r1
 8001552:	f025 0503 	bic.w	r5, r5, #3
 8001556:	3508      	adds	r5, #8
 8001558:	2d0c      	cmp	r5, #12
 800155a:	bf38      	it	cc
 800155c:	250c      	movcc	r5, #12
 800155e:	4638      	mov	r0, r7
 8001560:	4629      	mov	r1, r5
 8001562:	f7ff ffa5 	bl	80014b0 <sbrk_aligned>
 8001566:	3001      	adds	r0, #1
 8001568:	d02b      	beq.n	80015c2 <_malloc_r+0xd2>
 800156a:	6823      	ldr	r3, [r4, #0]
 800156c:	442b      	add	r3, r5
 800156e:	6023      	str	r3, [r4, #0]
 8001570:	e00e      	b.n	8001590 <_malloc_r+0xa0>
 8001572:	6822      	ldr	r2, [r4, #0]
 8001574:	1b52      	subs	r2, r2, r5
 8001576:	d41e      	bmi.n	80015b6 <_malloc_r+0xc6>
 8001578:	2a0b      	cmp	r2, #11
 800157a:	d916      	bls.n	80015aa <_malloc_r+0xba>
 800157c:	1961      	adds	r1, r4, r5
 800157e:	42a3      	cmp	r3, r4
 8001580:	6025      	str	r5, [r4, #0]
 8001582:	bf18      	it	ne
 8001584:	6059      	strne	r1, [r3, #4]
 8001586:	6863      	ldr	r3, [r4, #4]
 8001588:	bf08      	it	eq
 800158a:	6031      	streq	r1, [r6, #0]
 800158c:	5162      	str	r2, [r4, r5]
 800158e:	604b      	str	r3, [r1, #4]
 8001590:	4638      	mov	r0, r7
 8001592:	f104 060b 	add.w	r6, r4, #11
 8001596:	f000 f865 	bl	8001664 <__malloc_unlock>
 800159a:	f026 0607 	bic.w	r6, r6, #7
 800159e:	1d23      	adds	r3, r4, #4
 80015a0:	1af2      	subs	r2, r6, r3
 80015a2:	d0b6      	beq.n	8001512 <_malloc_r+0x22>
 80015a4:	1b9b      	subs	r3, r3, r6
 80015a6:	50a3      	str	r3, [r4, r2]
 80015a8:	e7b3      	b.n	8001512 <_malloc_r+0x22>
 80015aa:	6862      	ldr	r2, [r4, #4]
 80015ac:	42a3      	cmp	r3, r4
 80015ae:	bf0c      	ite	eq
 80015b0:	6032      	streq	r2, [r6, #0]
 80015b2:	605a      	strne	r2, [r3, #4]
 80015b4:	e7ec      	b.n	8001590 <_malloc_r+0xa0>
 80015b6:	4623      	mov	r3, r4
 80015b8:	6864      	ldr	r4, [r4, #4]
 80015ba:	e7b2      	b.n	8001522 <_malloc_r+0x32>
 80015bc:	4634      	mov	r4, r6
 80015be:	6876      	ldr	r6, [r6, #4]
 80015c0:	e7b9      	b.n	8001536 <_malloc_r+0x46>
 80015c2:	230c      	movs	r3, #12
 80015c4:	4638      	mov	r0, r7
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	f000 f84c 	bl	8001664 <__malloc_unlock>
 80015cc:	e7a1      	b.n	8001512 <_malloc_r+0x22>
 80015ce:	6025      	str	r5, [r4, #0]
 80015d0:	e7de      	b.n	8001590 <_malloc_r+0xa0>
 80015d2:	bf00      	nop
 80015d4:	20000298 	.word	0x20000298

080015d8 <_realloc_r>:
 80015d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015dc:	4680      	mov	r8, r0
 80015de:	4614      	mov	r4, r2
 80015e0:	460e      	mov	r6, r1
 80015e2:	b921      	cbnz	r1, 80015ee <_realloc_r+0x16>
 80015e4:	4611      	mov	r1, r2
 80015e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80015ea:	f7ff bf81 	b.w	80014f0 <_malloc_r>
 80015ee:	b92a      	cbnz	r2, 80015fc <_realloc_r+0x24>
 80015f0:	f7ff ff16 	bl	8001420 <_free_r>
 80015f4:	4625      	mov	r5, r4
 80015f6:	4628      	mov	r0, r5
 80015f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015fc:	f000 f838 	bl	8001670 <_malloc_usable_size_r>
 8001600:	4284      	cmp	r4, r0
 8001602:	4607      	mov	r7, r0
 8001604:	d802      	bhi.n	800160c <_realloc_r+0x34>
 8001606:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800160a:	d812      	bhi.n	8001632 <_realloc_r+0x5a>
 800160c:	4621      	mov	r1, r4
 800160e:	4640      	mov	r0, r8
 8001610:	f7ff ff6e 	bl	80014f0 <_malloc_r>
 8001614:	4605      	mov	r5, r0
 8001616:	2800      	cmp	r0, #0
 8001618:	d0ed      	beq.n	80015f6 <_realloc_r+0x1e>
 800161a:	42bc      	cmp	r4, r7
 800161c:	4622      	mov	r2, r4
 800161e:	4631      	mov	r1, r6
 8001620:	bf28      	it	cs
 8001622:	463a      	movcs	r2, r7
 8001624:	f7ff feee 	bl	8001404 <memcpy>
 8001628:	4631      	mov	r1, r6
 800162a:	4640      	mov	r0, r8
 800162c:	f7ff fef8 	bl	8001420 <_free_r>
 8001630:	e7e1      	b.n	80015f6 <_realloc_r+0x1e>
 8001632:	4635      	mov	r5, r6
 8001634:	e7df      	b.n	80015f6 <_realloc_r+0x1e>
	...

08001638 <_sbrk_r>:
 8001638:	b538      	push	{r3, r4, r5, lr}
 800163a:	2300      	movs	r3, #0
 800163c:	4d05      	ldr	r5, [pc, #20]	; (8001654 <_sbrk_r+0x1c>)
 800163e:	4604      	mov	r4, r0
 8001640:	4608      	mov	r0, r1
 8001642:	602b      	str	r3, [r5, #0]
 8001644:	f7ff f974 	bl	8000930 <_sbrk>
 8001648:	1c43      	adds	r3, r0, #1
 800164a:	d102      	bne.n	8001652 <_sbrk_r+0x1a>
 800164c:	682b      	ldr	r3, [r5, #0]
 800164e:	b103      	cbz	r3, 8001652 <_sbrk_r+0x1a>
 8001650:	6023      	str	r3, [r4, #0]
 8001652:	bd38      	pop	{r3, r4, r5, pc}
 8001654:	20000290 	.word	0x20000290

08001658 <__malloc_lock>:
 8001658:	4801      	ldr	r0, [pc, #4]	; (8001660 <__malloc_lock+0x8>)
 800165a:	f7ff bec3 	b.w	80013e4 <__retarget_lock_acquire_recursive>
 800165e:	bf00      	nop
 8001660:	20000294 	.word	0x20000294

08001664 <__malloc_unlock>:
 8001664:	4801      	ldr	r0, [pc, #4]	; (800166c <__malloc_unlock+0x8>)
 8001666:	f7ff bebe 	b.w	80013e6 <__retarget_lock_release_recursive>
 800166a:	bf00      	nop
 800166c:	20000294 	.word	0x20000294

08001670 <_malloc_usable_size_r>:
 8001670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001674:	1f18      	subs	r0, r3, #4
 8001676:	2b00      	cmp	r3, #0
 8001678:	bfbc      	itt	lt
 800167a:	580b      	ldrlt	r3, [r1, r0]
 800167c:	18c0      	addlt	r0, r0, r3
 800167e:	4770      	bx	lr

08001680 <_init>:
 8001680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001682:	bf00      	nop
 8001684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001686:	bc08      	pop	{r3}
 8001688:	469e      	mov	lr, r3
 800168a:	4770      	bx	lr

0800168c <_fini>:
 800168c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800168e:	bf00      	nop
 8001690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001692:	bc08      	pop	{r3}
 8001694:	469e      	mov	lr, r3
 8001696:	4770      	bx	lr
