
den4ik_deeplom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d08  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08001e38  08001e38  00011e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020e4  080020e4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080020e4  080020e4  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020e4  080020e4  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020e4  080020e4  000120e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020e8  080020e8  000120e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080020ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  2000006c  08002158  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08002158  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000e63  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003aa  00000000  00000000  00020ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000e8  00000000  00000000  000212a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000c0  00000000  00000000  00021390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011099  00000000  00000000  00021450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000105c  00000000  00000000  000324e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058fd2  00000000  00000000  00033545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008c517  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ba4  00000000  00000000  0008c568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000006c 	.word	0x2000006c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001e20 	.word	0x08001e20

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000070 	.word	0x20000070
 800016c:	08001e20 	.word	0x08001e20

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	4603      	mov	r3, r0
 8000188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	2b00      	cmp	r3, #0
 8000190:	db0b      	blt.n	80001aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	f003 021f 	and.w	r2, r3, #31
 8000198:	4906      	ldr	r1, [pc, #24]	; (80001b4 <__NVIC_EnableIRQ+0x34>)
 800019a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800019e:	095b      	lsrs	r3, r3, #5
 80001a0:	2001      	movs	r0, #1
 80001a2:	fa00 f202 	lsl.w	r2, r0, r2
 80001a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001aa:	bf00      	nop
 80001ac:	370c      	adds	r7, #12
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	e000e100 	.word	0xe000e100

080001b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001b8:	b480      	push	{r7}
 80001ba:	b083      	sub	sp, #12
 80001bc:	af00      	add	r7, sp, #0
 80001be:	4603      	mov	r3, r0
 80001c0:	6039      	str	r1, [r7, #0]
 80001c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	db0a      	blt.n	80001e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001cc:	683b      	ldr	r3, [r7, #0]
 80001ce:	b2da      	uxtb	r2, r3
 80001d0:	490c      	ldr	r1, [pc, #48]	; (8000204 <__NVIC_SetPriority+0x4c>)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	0112      	lsls	r2, r2, #4
 80001d8:	b2d2      	uxtb	r2, r2
 80001da:	440b      	add	r3, r1
 80001dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001e0:	e00a      	b.n	80001f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	b2da      	uxtb	r2, r3
 80001e6:	4908      	ldr	r1, [pc, #32]	; (8000208 <__NVIC_SetPriority+0x50>)
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	f003 030f 	and.w	r3, r3, #15
 80001ee:	3b04      	subs	r3, #4
 80001f0:	0112      	lsls	r2, r2, #4
 80001f2:	b2d2      	uxtb	r2, r2
 80001f4:	440b      	add	r3, r1
 80001f6:	761a      	strb	r2, [r3, #24]
}
 80001f8:	bf00      	nop
 80001fa:	370c      	adds	r7, #12
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bc80      	pop	{r7}
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	e000e100 	.word	0xe000e100
 8000208:	e000ed00 	.word	0xe000ed00

0800020c <initClk>:
} States;

uint8_t state = MOTOR_OFF;
uint32_t speed = 100;
void initClk(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
	// Enable HSI
	RCC->CR |= RCC_CR_HSION;
 8000210:	4b2e      	ldr	r3, [pc, #184]	; (80002cc <initClk+0xc0>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a2d      	ldr	r2, [pc, #180]	; (80002cc <initClk+0xc0>)
 8000216:	f043 0301 	orr.w	r3, r3, #1
 800021a:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSIRDY)){};
 800021c:	bf00      	nop
 800021e:	4b2b      	ldr	r3, [pc, #172]	; (80002cc <initClk+0xc0>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f003 0302 	and.w	r3, r3, #2
 8000226:	2b00      	cmp	r3, #0
 8000228:	d0f9      	beq.n	800021e <initClk+0x12>
	// Enable Prefetch Buffer
	FLASH->ACR |= FLASH_ACR_PRFTBE;
 800022a:	4b29      	ldr	r3, [pc, #164]	; (80002d0 <initClk+0xc4>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4a28      	ldr	r2, [pc, #160]	; (80002d0 <initClk+0xc4>)
 8000230:	f043 0310 	orr.w	r3, r3, #16
 8000234:	6013      	str	r3, [r2, #0]
	// Flash 2 wait state
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 8000236:	4b26      	ldr	r3, [pc, #152]	; (80002d0 <initClk+0xc4>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4a25      	ldr	r2, [pc, #148]	; (80002d0 <initClk+0xc4>)
 800023c:	f023 0307 	bic.w	r3, r3, #7
 8000240:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_2;
 8000242:	4b23      	ldr	r3, [pc, #140]	; (80002d0 <initClk+0xc4>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a22      	ldr	r2, [pc, #136]	; (80002d0 <initClk+0xc4>)
 8000248:	f043 0304 	orr.w	r3, r3, #4
 800024c:	6013      	str	r3, [r2, #0]
	// HCLK = SYSCLK
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800024e:	4b1f      	ldr	r3, [pc, #124]	; (80002cc <initClk+0xc0>)
 8000250:	4a1e      	ldr	r2, [pc, #120]	; (80002cc <initClk+0xc0>)
 8000252:	685b      	ldr	r3, [r3, #4]
 8000254:	6053      	str	r3, [r2, #4]
	// PCLK2 = HCLK
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000256:	4b1d      	ldr	r3, [pc, #116]	; (80002cc <initClk+0xc0>)
 8000258:	4a1c      	ldr	r2, [pc, #112]	; (80002cc <initClk+0xc0>)
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	6053      	str	r3, [r2, #4]
	// PCLK1 = HCLK/2
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 800025e:	4b1b      	ldr	r3, [pc, #108]	; (80002cc <initClk+0xc0>)
 8000260:	685b      	ldr	r3, [r3, #4]
 8000262:	4a1a      	ldr	r2, [pc, #104]	; (80002cc <initClk+0xc0>)
 8000264:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000268:	6053      	str	r3, [r2, #4]
	// PLL configuration: PLLCLK = HSI/2 * 16 = 64 MHz
	RCC->CFGR &= ~RCC_CFGR_PLLSRC;
 800026a:	4b18      	ldr	r3, [pc, #96]	; (80002cc <initClk+0xc0>)
 800026c:	685b      	ldr	r3, [r3, #4]
 800026e:	4a17      	ldr	r2, [pc, #92]	; (80002cc <initClk+0xc0>)
 8000270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000274:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLMULL16;
 8000276:	4b15      	ldr	r3, [pc, #84]	; (80002cc <initClk+0xc0>)
 8000278:	685b      	ldr	r3, [r3, #4]
 800027a:	4a14      	ldr	r2, [pc, #80]	; (80002cc <initClk+0xc0>)
 800027c:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8000280:	6053      	str	r3, [r2, #4]
	// Enable PLL
	RCC->CR |= RCC_CR_PLLON;
 8000282:	4b12      	ldr	r3, [pc, #72]	; (80002cc <initClk+0xc0>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a11      	ldr	r2, [pc, #68]	; (80002cc <initClk+0xc0>)
 8000288:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800028c:	6013      	str	r3, [r2, #0]
	// Wait till PLL is ready
	while((RCC->CR & RCC_CR_PLLRDY) == 0) {};
 800028e:	bf00      	nop
 8000290:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <initClk+0xc0>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000298:	2b00      	cmp	r3, #0
 800029a:	d0f9      	beq.n	8000290 <initClk+0x84>
	// Select PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <initClk+0xc0>)
 800029e:	685b      	ldr	r3, [r3, #4]
 80002a0:	4a0a      	ldr	r2, [pc, #40]	; (80002cc <initClk+0xc0>)
 80002a2:	f023 0303 	bic.w	r3, r3, #3
 80002a6:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80002a8:	4b08      	ldr	r3, [pc, #32]	; (80002cc <initClk+0xc0>)
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	4a07      	ldr	r2, [pc, #28]	; (80002cc <initClk+0xc0>)
 80002ae:	f043 0302 	orr.w	r3, r3, #2
 80002b2:	6053      	str	r3, [r2, #4]
	// Wait till PLL is used as system clock source
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL){};
 80002b4:	bf00      	nop
 80002b6:	4b05      	ldr	r3, [pc, #20]	; (80002cc <initClk+0xc0>)
 80002b8:	685b      	ldr	r3, [r3, #4]
 80002ba:	f003 030c 	and.w	r3, r3, #12
 80002be:	2b08      	cmp	r3, #8
 80002c0:	d1f9      	bne.n	80002b6 <initClk+0xaa>
}
 80002c2:	bf00      	nop
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	40021000 	.word	0x40021000
 80002d0:	40022000 	.word	0x40022000

080002d4 <setTIM3_period>:

void setTIM3_period(uint16_t period)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	80fb      	strh	r3, [r7, #6]
	TIM3->ARR = period;
 80002de:	4a06      	ldr	r2, [pc, #24]	; (80002f8 <setTIM3_period+0x24>)
 80002e0:	88fb      	ldrh	r3, [r7, #6]
 80002e2:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM3->CCR1 = period/2;
 80002e4:	88fb      	ldrh	r3, [r7, #6]
 80002e6:	085b      	lsrs	r3, r3, #1
 80002e8:	b29a      	uxth	r2, r3
 80002ea:	4b03      	ldr	r3, [pc, #12]	; (80002f8 <setTIM3_period+0x24>)
 80002ec:	635a      	str	r2, [r3, #52]	; 0x34
}
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr
 80002f8:	40000400 	.word	0x40000400

080002fc <initUSART1>:

void initUSART1(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
    // Включение тактирования GPIOA и USART1
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_AFIOEN | RCC_APB2ENR_USART1EN;
 8000300:	4b1b      	ldr	r3, [pc, #108]	; (8000370 <initUSART1+0x74>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	4a1a      	ldr	r2, [pc, #104]	; (8000370 <initUSART1+0x74>)
 8000306:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800030a:	f043 0305 	orr.w	r3, r3, #5
 800030e:	6193      	str	r3, [r2, #24]

    // Настройка PA9 (TX) как alternate function push-pull output
    GPIOA->CRH &= ~(GPIO_CRH_MODE9 | GPIO_CRH_CNF9);
 8000310:	4b18      	ldr	r3, [pc, #96]	; (8000374 <initUSART1+0x78>)
 8000312:	685b      	ldr	r3, [r3, #4]
 8000314:	4a17      	ldr	r2, [pc, #92]	; (8000374 <initUSART1+0x78>)
 8000316:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800031a:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= (GPIO_CRH_MODE9_1 | GPIO_CRH_MODE9_0) | GPIO_CRH_CNF9_1;
 800031c:	4b15      	ldr	r3, [pc, #84]	; (8000374 <initUSART1+0x78>)
 800031e:	685b      	ldr	r3, [r3, #4]
 8000320:	4a14      	ldr	r2, [pc, #80]	; (8000374 <initUSART1+0x78>)
 8000322:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8000326:	6053      	str	r3, [r2, #4]

    // Настройка PA10 (RX) как input floating
    GPIOA->CRH &= ~(GPIO_CRH_MODE10 | GPIO_CRH_CNF10);
 8000328:	4b12      	ldr	r3, [pc, #72]	; (8000374 <initUSART1+0x78>)
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	4a11      	ldr	r2, [pc, #68]	; (8000374 <initUSART1+0x78>)
 800032e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000332:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= GPIO_CRH_CNF10_0;
 8000334:	4b0f      	ldr	r3, [pc, #60]	; (8000374 <initUSART1+0x78>)
 8000336:	685b      	ldr	r3, [r3, #4]
 8000338:	4a0e      	ldr	r2, [pc, #56]	; (8000374 <initUSART1+0x78>)
 800033a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800033e:	6053      	str	r3, [r2, #4]
	1. USARTDIV = 64'000'000/(16*9600) = 416.6
	2. 416 = 0x1A0
	3. 16*0.6 = 9,6
	4. Итого 0xD05
	*****************************************/
    USART1->BRR = 0x1A0A;
 8000340:	4b0d      	ldr	r3, [pc, #52]	; (8000378 <initUSART1+0x7c>)
 8000342:	f641 220a 	movw	r2, #6666	; 0x1a0a
 8000346:	609a      	str	r2, [r3, #8]

    // Включение USART1, передатчика и приемника
    USART1->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8000348:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <initUSART1+0x7c>)
 800034a:	68db      	ldr	r3, [r3, #12]
 800034c:	4a0a      	ldr	r2, [pc, #40]	; (8000378 <initUSART1+0x7c>)
 800034e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000352:	f043 030c 	orr.w	r3, r3, #12
 8000356:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_RXNEIE;  // Разрешить прерывание по приему
 8000358:	4b07      	ldr	r3, [pc, #28]	; (8000378 <initUSART1+0x7c>)
 800035a:	68db      	ldr	r3, [r3, #12]
 800035c:	4a06      	ldr	r2, [pc, #24]	; (8000378 <initUSART1+0x7c>)
 800035e:	f043 0320 	orr.w	r3, r3, #32
 8000362:	60d3      	str	r3, [r2, #12]

    NVIC_EnableIRQ(USART1_IRQn);
 8000364:	2025      	movs	r0, #37	; 0x25
 8000366:	f7ff ff0b 	bl	8000180 <__NVIC_EnableIRQ>
}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40021000 	.word	0x40021000
 8000374:	40010800 	.word	0x40010800
 8000378:	40013800 	.word	0x40013800

0800037c <txStr>:

void txStr(char *str)
{
 800037c:	b590      	push	{r4, r7, lr}
 800037e:	b085      	sub	sp, #20
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
	uint16_t i;
	strcat(str,"\r\n");									//добавляем символ конца строки
 8000384:	6878      	ldr	r0, [r7, #4]
 8000386:	f7ff fef3 	bl	8000170 <strlen>
 800038a:	4603      	mov	r3, r0
 800038c:	461a      	mov	r2, r3
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4413      	add	r3, r2
 8000392:	4a12      	ldr	r2, [pc, #72]	; (80003dc <txStr+0x60>)
 8000394:	8811      	ldrh	r1, [r2, #0]
 8000396:	7892      	ldrb	r2, [r2, #2]
 8000398:	8019      	strh	r1, [r3, #0]
 800039a:	709a      	strb	r2, [r3, #2]
	for (i = 0; i < strlen(str); i++)
 800039c:	2300      	movs	r3, #0
 800039e:	81fb      	strh	r3, [r7, #14]
 80003a0:	e00f      	b.n	80003c2 <txStr+0x46>
	{
		USART1->DR = str[i];								//передаём байт данных
 80003a2:	89fb      	ldrh	r3, [r7, #14]
 80003a4:	687a      	ldr	r2, [r7, #4]
 80003a6:	4413      	add	r3, r2
 80003a8:	781a      	ldrb	r2, [r3, #0]
 80003aa:	4b0d      	ldr	r3, [pc, #52]	; (80003e0 <txStr+0x64>)
 80003ac:	605a      	str	r2, [r3, #4]
		while ((USART1->SR & USART_SR_TC)==0) {};			//ждём окончания передачи
 80003ae:	bf00      	nop
 80003b0:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <txStr+0x64>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d0f9      	beq.n	80003b0 <txStr+0x34>
	for (i = 0; i < strlen(str); i++)
 80003bc:	89fb      	ldrh	r3, [r7, #14]
 80003be:	3301      	adds	r3, #1
 80003c0:	81fb      	strh	r3, [r7, #14]
 80003c2:	89fc      	ldrh	r4, [r7, #14]
 80003c4:	6878      	ldr	r0, [r7, #4]
 80003c6:	f7ff fed3 	bl	8000170 <strlen>
 80003ca:	4603      	mov	r3, r0
 80003cc:	429c      	cmp	r4, r3
 80003ce:	d3e8      	bcc.n	80003a2 <txStr+0x26>
	}
}
 80003d0:	bf00      	nop
 80003d2:	bf00      	nop
 80003d4:	3714      	adds	r7, #20
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd90      	pop	{r4, r7, pc}
 80003da:	bf00      	nop
 80003dc:	08001e38 	.word	0x08001e38
 80003e0:	40013800 	.word	0x40013800

080003e4 <initTIM3_PWM>:

void initTIM3_PWM(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80003e8:	4b22      	ldr	r3, [pc, #136]	; (8000474 <initTIM3_PWM+0x90>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a21      	ldr	r2, [pc, #132]	; (8000474 <initTIM3_PWM+0x90>)
 80003ee:	f043 0304 	orr.w	r3, r3, #4
 80003f2:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= ~(GPIO_CRL_CNF6 | GPIO_CRL_MODE6);
 80003f4:	4b20      	ldr	r3, [pc, #128]	; (8000478 <initTIM3_PWM+0x94>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a1f      	ldr	r2, [pc, #124]	; (8000478 <initTIM3_PWM+0x94>)
 80003fa:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80003fe:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_MODE6_0|GPIO_CRL_CNF6_1;	//PA6, альтернативный выход 2МГц
 8000400:	4b1d      	ldr	r3, [pc, #116]	; (8000478 <initTIM3_PWM+0x94>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a1c      	ldr	r2, [pc, #112]	; (8000478 <initTIM3_PWM+0x94>)
 8000406:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
 800040a:	6013      	str	r3, [r2, #0]

	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;				//Включить тактирование TIM3
 800040c:	4b19      	ldr	r3, [pc, #100]	; (8000474 <initTIM3_PWM+0x90>)
 800040e:	69db      	ldr	r3, [r3, #28]
 8000410:	4a18      	ldr	r2, [pc, #96]	; (8000474 <initTIM3_PWM+0x90>)
 8000412:	f043 0302 	orr.w	r3, r3, #2
 8000416:	61d3      	str	r3, [r2, #28]

	//Частота APB1 для таймеров = APB1Clk * 2 = 32МГц * 2 = 64МГц
	TIM3->PSC = 10000-1;								//Предделитель частоты (64000МГц/100 = 640кГц)
 8000418:	4b18      	ldr	r3, [pc, #96]	; (800047c <initTIM3_PWM+0x98>)
 800041a:	f242 720f 	movw	r2, #9999	; 0x270f
 800041e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 320-1;								//Модуль счёта таймера (640кГц/320 = 2кГц)
 8000420:	4b16      	ldr	r3, [pc, #88]	; (800047c <initTIM3_PWM+0x98>)
 8000422:	f240 123f 	movw	r2, #319	; 0x13f
 8000426:	62da      	str	r2, [r3, #44]	; 0x2c
	//TIM2->ARR = 80-1;								//Модуль счёта таймера (640кГц/80 = 8кГц)
	TIM3->CCR1 = TIM3->ARR/2;
 8000428:	4b14      	ldr	r3, [pc, #80]	; (800047c <initTIM3_PWM+0x98>)
 800042a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800042c:	4a13      	ldr	r2, [pc, #76]	; (800047c <initTIM3_PWM+0x98>)
 800042e:	085b      	lsrs	r3, r3, #1
 8000430:	6353      	str	r3, [r2, #52]	; 0x34
	TIM3->DIER |= TIM_DIER_UIE;						//Разрешить прерывание по переполнению таймера
 8000432:	4b12      	ldr	r3, [pc, #72]	; (800047c <initTIM3_PWM+0x98>)
 8000434:	68db      	ldr	r3, [r3, #12]
 8000436:	4a11      	ldr	r2, [pc, #68]	; (800047c <initTIM3_PWM+0x98>)
 8000438:	f043 0301 	orr.w	r3, r3, #1
 800043c:	60d3      	str	r3, [r2, #12]
	TIM3->CCER |= TIM_CCER_CC1E;					//разблокируем выход
 800043e:	4b0f      	ldr	r3, [pc, #60]	; (800047c <initTIM3_PWM+0x98>)
 8000440:	6a1b      	ldr	r3, [r3, #32]
 8000442:	4a0e      	ldr	r2, [pc, #56]	; (800047c <initTIM3_PWM+0x98>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	6213      	str	r3, [r2, #32]
	TIM3->CCMR1 |= TIM_CCMR1_OC1M; 					//pwm mod1 110
 800044a:	4b0c      	ldr	r3, [pc, #48]	; (800047c <initTIM3_PWM+0x98>)
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	4a0b      	ldr	r2, [pc, #44]	; (800047c <initTIM3_PWM+0x98>)
 8000450:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000454:	6193      	str	r3, [r2, #24]
	TIM3->CR1 |= TIM_CR1_CEN;						//Включить таймер
 8000456:	4b09      	ldr	r3, [pc, #36]	; (800047c <initTIM3_PWM+0x98>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a08      	ldr	r2, [pc, #32]	; (800047c <initTIM3_PWM+0x98>)
 800045c:	f043 0301 	orr.w	r3, r3, #1
 8000460:	6013      	str	r3, [r2, #0]

	NVIC_EnableIRQ(TIM3_IRQn);				//Рарзрешить прерывание от TIM2
 8000462:	201d      	movs	r0, #29
 8000464:	f7ff fe8c 	bl	8000180 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM3_IRQn, 1);			//Выставляем приоритет
 8000468:	2101      	movs	r1, #1
 800046a:	201d      	movs	r0, #29
 800046c:	f7ff fea4 	bl	80001b8 <__NVIC_SetPriority>
}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}
 8000474:	40021000 	.word	0x40021000
 8000478:	40010800 	.word	0x40010800
 800047c:	40000400 	.word	0x40000400

08000480 <closeWindow>:

void closeWindow(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
	if (state == MOTOR_STOP)
 8000484:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <closeWindow+0x38>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b03      	cmp	r3, #3
 800048a:	d110      	bne.n	80004ae <closeWindow+0x2e>
	{
		state = MOTOR_CLOSE;
 800048c:	4b0a      	ldr	r3, [pc, #40]	; (80004b8 <closeWindow+0x38>)
 800048e:	2202      	movs	r2, #2
 8000490:	701a      	strb	r2, [r3, #0]
		EN1_ON();
 8000492:	4b0a      	ldr	r3, [pc, #40]	; (80004bc <closeWindow+0x3c>)
 8000494:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000498:	611a      	str	r2, [r3, #16]
		EN2_OFF();
 800049a:	4b08      	ldr	r3, [pc, #32]	; (80004bc <closeWindow+0x3c>)
 800049c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80004a0:	611a      	str	r2, [r3, #16]
		TIM3->CR1 |= TIM_CR1_CEN;
 80004a2:	4b07      	ldr	r3, [pc, #28]	; (80004c0 <closeWindow+0x40>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a06      	ldr	r2, [pc, #24]	; (80004c0 <closeWindow+0x40>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	6013      	str	r3, [r2, #0]
	}
}
 80004ae:	bf00      	nop
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	20000290 	.word	0x20000290
 80004bc:	40010c00 	.word	0x40010c00
 80004c0:	40000400 	.word	0x40000400

080004c4 <openWindow>:
void openWindow(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
	if (state == MOTOR_STOP)
 80004c8:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <openWindow+0x38>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	2b03      	cmp	r3, #3
 80004ce:	d110      	bne.n	80004f2 <openWindow+0x2e>
	{
		state = MOTOR_OPEN;
 80004d0:	4b0a      	ldr	r3, [pc, #40]	; (80004fc <openWindow+0x38>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	701a      	strb	r2, [r3, #0]
		EN1_OFF();
 80004d6:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <openWindow+0x3c>)
 80004d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004dc:	611a      	str	r2, [r3, #16]
		EN2_ON();
 80004de:	4b08      	ldr	r3, [pc, #32]	; (8000500 <openWindow+0x3c>)
 80004e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004e4:	611a      	str	r2, [r3, #16]
		TIM3->CR1 |= TIM_CR1_CEN;
 80004e6:	4b07      	ldr	r3, [pc, #28]	; (8000504 <openWindow+0x40>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a06      	ldr	r2, [pc, #24]	; (8000504 <openWindow+0x40>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6013      	str	r3, [r2, #0]
	}
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bc80      	pop	{r7}
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	20000290 	.word	0x20000290
 8000500:	40010c00 	.word	0x40010c00
 8000504:	40000400 	.word	0x40000400

08000508 <stopWindow>:
void stopWindow(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
	state = MOTOR_STOP;
 800050c:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <stopWindow+0x30>)
 800050e:	2203      	movs	r2, #3
 8000510:	701a      	strb	r2, [r3, #0]
	EN1_OFF();
 8000512:	4b0a      	ldr	r3, [pc, #40]	; (800053c <stopWindow+0x34>)
 8000514:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000518:	611a      	str	r2, [r3, #16]
	EN2_OFF();
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <stopWindow+0x34>)
 800051c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000520:	611a      	str	r2, [r3, #16]
	TIM3->CR1 &= ~TIM_CR1_CEN;
 8000522:	4b07      	ldr	r3, [pc, #28]	; (8000540 <stopWindow+0x38>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a06      	ldr	r2, [pc, #24]	; (8000540 <stopWindow+0x38>)
 8000528:	f023 0301 	bic.w	r3, r3, #1
 800052c:	6013      	str	r3, [r2, #0]
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	bc80      	pop	{r7}
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000290 	.word	0x20000290
 800053c:	40010c00 	.word	0x40010c00
 8000540:	40000400 	.word	0x40000400

08000544 <ExecuteCommand>:
void ExecuteCommand(void)
{
 8000544:	b5b0      	push	{r4, r5, r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
//	txStr(RxBuffer, false);
	memset(TxBuffer,0,sizeof(TxBuffer));					//Очистка буфера передачи
 800054a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800054e:	2100      	movs	r1, #0
 8000550:	486a      	ldr	r0, [pc, #424]	; (80006fc <ExecuteCommand+0x1b8>)
 8000552:	f000 fb1b 	bl	8000b8c <memset>

	/* Обработчик команд */
	if (strncmp(RxBuffer,"*IDN?",5) == 0)					//Это команда "*IDN?"
 8000556:	2205      	movs	r2, #5
 8000558:	4969      	ldr	r1, [pc, #420]	; (8000700 <ExecuteCommand+0x1bc>)
 800055a:	486a      	ldr	r0, [pc, #424]	; (8000704 <ExecuteCommand+0x1c0>)
 800055c:	f000 fb6a 	bl	8000c34 <strncmp>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d10a      	bne.n	800057c <ExecuteCommand+0x38>
	{
		//Она самая, возвращаем строку идентификации
		strcpy(TxBuffer, "Denis Chernishev, IU4-41M");
 8000566:	4a65      	ldr	r2, [pc, #404]	; (80006fc <ExecuteCommand+0x1b8>)
 8000568:	4b67      	ldr	r3, [pc, #412]	; (8000708 <ExecuteCommand+0x1c4>)
 800056a:	4614      	mov	r4, r2
 800056c:	461d      	mov	r5, r3
 800056e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000572:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000576:	c403      	stmia	r4!, {r0, r1}
 8000578:	8022      	strh	r2, [r4, #0]
 800057a:	e0af      	b.n	80006dc <ExecuteCommand+0x198>
	}
	else if (strncmp(RxBuffer,"OPEN",4) == 0)				//Команда запуска таймера?
 800057c:	2204      	movs	r2, #4
 800057e:	4963      	ldr	r1, [pc, #396]	; (800070c <ExecuteCommand+0x1c8>)
 8000580:	4860      	ldr	r0, [pc, #384]	; (8000704 <ExecuteCommand+0x1c0>)
 8000582:	f000 fb57 	bl	8000c34 <strncmp>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d119      	bne.n	80005c0 <ExecuteCommand+0x7c>
	{
		if (rotation < MAX_ROTATION)
 800058c:	4b60      	ldr	r3, [pc, #384]	; (8000710 <ExecuteCommand+0x1cc>)
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	4b60      	ldr	r3, [pc, #384]	; (8000714 <ExecuteCommand+0x1d0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	429a      	cmp	r2, r3
 8000596:	da08      	bge.n	80005aa <ExecuteCommand+0x66>
		{
			openWindow();
 8000598:	f7ff ff94 	bl	80004c4 <openWindow>
			strcpy(TxBuffer, "OK OPEN");
 800059c:	4b57      	ldr	r3, [pc, #348]	; (80006fc <ExecuteCommand+0x1b8>)
 800059e:	4a5e      	ldr	r2, [pc, #376]	; (8000718 <ExecuteCommand+0x1d4>)
 80005a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005a4:	e883 0003 	stmia.w	r3, {r0, r1}
 80005a8:	e098      	b.n	80006dc <ExecuteCommand+0x198>
		}
		else
			strcpy(TxBuffer, "MOTOR is out of MAX_ROT");
 80005aa:	4a54      	ldr	r2, [pc, #336]	; (80006fc <ExecuteCommand+0x1b8>)
 80005ac:	4b5b      	ldr	r3, [pc, #364]	; (800071c <ExecuteCommand+0x1d8>)
 80005ae:	4614      	mov	r4, r2
 80005b0:	461d      	mov	r5, r3
 80005b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005ba:	e884 0003 	stmia.w	r4, {r0, r1}
 80005be:	e08d      	b.n	80006dc <ExecuteCommand+0x198>
	}
	else if (strncmp(RxBuffer,"CLOSE",5) == 0)				//Команда запуска таймера?
 80005c0:	2205      	movs	r2, #5
 80005c2:	4957      	ldr	r1, [pc, #348]	; (8000720 <ExecuteCommand+0x1dc>)
 80005c4:	484f      	ldr	r0, [pc, #316]	; (8000704 <ExecuteCommand+0x1c0>)
 80005c6:	f000 fb35 	bl	8000c34 <strncmp>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d114      	bne.n	80005fa <ExecuteCommand+0xb6>
	{
		if (rotation > 0)
 80005d0:	4b4f      	ldr	r3, [pc, #316]	; (8000710 <ExecuteCommand+0x1cc>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dd07      	ble.n	80005e8 <ExecuteCommand+0xa4>
		{
			closeWindow();
 80005d8:	f7ff ff52 	bl	8000480 <closeWindow>
			strcpy(TxBuffer, "OK CLOSE");
 80005dc:	4b47      	ldr	r3, [pc, #284]	; (80006fc <ExecuteCommand+0x1b8>)
 80005de:	4a51      	ldr	r2, [pc, #324]	; (8000724 <ExecuteCommand+0x1e0>)
 80005e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80005e2:	c303      	stmia	r3!, {r0, r1}
 80005e4:	701a      	strb	r2, [r3, #0]
 80005e6:	e079      	b.n	80006dc <ExecuteCommand+0x198>
		}
		else
			strcpy(TxBuffer, "MOTOR is out of 0");
 80005e8:	4a44      	ldr	r2, [pc, #272]	; (80006fc <ExecuteCommand+0x1b8>)
 80005ea:	4b4f      	ldr	r3, [pc, #316]	; (8000728 <ExecuteCommand+0x1e4>)
 80005ec:	4614      	mov	r4, r2
 80005ee:	461d      	mov	r5, r3
 80005f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f4:	682b      	ldr	r3, [r5, #0]
 80005f6:	8023      	strh	r3, [r4, #0]
 80005f8:	e070      	b.n	80006dc <ExecuteCommand+0x198>
	}
	else if (strncmp(RxBuffer,"STOP",4) == 0)				//Команда остановки таймера?
 80005fa:	2204      	movs	r2, #4
 80005fc:	494b      	ldr	r1, [pc, #300]	; (800072c <ExecuteCommand+0x1e8>)
 80005fe:	4841      	ldr	r0, [pc, #260]	; (8000704 <ExecuteCommand+0x1c0>)
 8000600:	f000 fb18 	bl	8000c34 <strncmp>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d108      	bne.n	800061c <ExecuteCommand+0xd8>
	{
		stopWindow();
 800060a:	f7ff ff7d 	bl	8000508 <stopWindow>
		strcpy(TxBuffer, "OK STOP");
 800060e:	4b3b      	ldr	r3, [pc, #236]	; (80006fc <ExecuteCommand+0x1b8>)
 8000610:	4a47      	ldr	r2, [pc, #284]	; (8000730 <ExecuteCommand+0x1ec>)
 8000612:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000616:	e883 0003 	stmia.w	r3, {r0, r1}
 800061a:	e05f      	b.n	80006dc <ExecuteCommand+0x198>
	}
	else if (strncmp(RxBuffer,"SPEED",5) == 0)				//Команда изменения периода таймера?
 800061c:	2205      	movs	r2, #5
 800061e:	4945      	ldr	r1, [pc, #276]	; (8000734 <ExecuteCommand+0x1f0>)
 8000620:	4838      	ldr	r0, [pc, #224]	; (8000704 <ExecuteCommand+0x1c0>)
 8000622:	f000 fb07 	bl	8000c34 <strncmp>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d125      	bne.n	8000678 <ExecuteCommand+0x134>
	{
		uint16_t tim_value;
		sscanf(RxBuffer,"%*s %hu", &tim_value);				//преобразуем строку в целое число
 800062c:	1dbb      	adds	r3, r7, #6
 800062e:	461a      	mov	r2, r3
 8000630:	4941      	ldr	r1, [pc, #260]	; (8000738 <ExecuteCommand+0x1f4>)
 8000632:	4834      	ldr	r0, [pc, #208]	; (8000704 <ExecuteCommand+0x1c0>)
 8000634:	f000 fad2 	bl	8000bdc <siscanf>

		if ((0 <= tim_value) && (tim_value < 320))		//параметр должен быть в заданных пределах!
 8000638:	88fb      	ldrh	r3, [r7, #6]
 800063a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800063e:	d210      	bcs.n	8000662 <ExecuteCommand+0x11e>
		{
			TIM2->CCR1 = tim_value;
 8000640:	88fa      	ldrh	r2, [r7, #6]
 8000642:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000646:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CNT = 0;
 8000648:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800064c:	2200      	movs	r2, #0
 800064e:	625a      	str	r2, [r3, #36]	; 0x24

			strcpy(TxBuffer, "OK");
 8000650:	4b2a      	ldr	r3, [pc, #168]	; (80006fc <ExecuteCommand+0x1b8>)
 8000652:	4a3a      	ldr	r2, [pc, #232]	; (800073c <ExecuteCommand+0x1f8>)
 8000654:	6812      	ldr	r2, [r2, #0]
 8000656:	4611      	mov	r1, r2
 8000658:	8019      	strh	r1, [r3, #0]
 800065a:	3302      	adds	r3, #2
 800065c:	0c12      	lsrs	r2, r2, #16
 800065e:	701a      	strb	r2, [r3, #0]
 8000660:	e03c      	b.n	80006dc <ExecuteCommand+0x198>
		}
		else
			strcpy(TxBuffer, "Parameter is out of range");	//ругаемся
 8000662:	4a26      	ldr	r2, [pc, #152]	; (80006fc <ExecuteCommand+0x1b8>)
 8000664:	4b36      	ldr	r3, [pc, #216]	; (8000740 <ExecuteCommand+0x1fc>)
 8000666:	4614      	mov	r4, r2
 8000668:	461d      	mov	r5, r3
 800066a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000672:	c403      	stmia	r4!, {r0, r1}
 8000674:	8022      	strh	r2, [r4, #0]
 8000676:	e031      	b.n	80006dc <ExecuteCommand+0x198>
	}
	else if (strncmp(RxBuffer,"STATUS",6) == 0)
 8000678:	2206      	movs	r2, #6
 800067a:	4932      	ldr	r1, [pc, #200]	; (8000744 <ExecuteCommand+0x200>)
 800067c:	4821      	ldr	r0, [pc, #132]	; (8000704 <ExecuteCommand+0x1c0>)
 800067e:	f000 fad9 	bl	8000c34 <strncmp>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d108      	bne.n	800069a <ExecuteCommand+0x156>
	{
		sprintf(TxBuffer,"Rot = %d\nState = %d", rotation, state);
 8000688:	4b21      	ldr	r3, [pc, #132]	; (8000710 <ExecuteCommand+0x1cc>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4b2e      	ldr	r3, [pc, #184]	; (8000748 <ExecuteCommand+0x204>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	492e      	ldr	r1, [pc, #184]	; (800074c <ExecuteCommand+0x208>)
 8000692:	481a      	ldr	r0, [pc, #104]	; (80006fc <ExecuteCommand+0x1b8>)
 8000694:	f000 fa82 	bl	8000b9c <siprintf>
 8000698:	e020      	b.n	80006dc <ExecuteCommand+0x198>
//		strcpy(TxBuffer, "OK");
	}
	else if (strncmp(RxBuffer,"CALIB",5) == 0)
 800069a:	2205      	movs	r2, #5
 800069c:	492c      	ldr	r1, [pc, #176]	; (8000750 <ExecuteCommand+0x20c>)
 800069e:	4819      	ldr	r0, [pc, #100]	; (8000704 <ExecuteCommand+0x1c0>)
 80006a0:	f000 fac8 	bl	8000c34 <strncmp>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d112      	bne.n	80006d0 <ExecuteCommand+0x18c>
	{
		uint16_t calib;
		sscanf(RxBuffer,"%*s %hu", &calib);
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	461a      	mov	r2, r3
 80006ae:	4922      	ldr	r1, [pc, #136]	; (8000738 <ExecuteCommand+0x1f4>)
 80006b0:	4814      	ldr	r0, [pc, #80]	; (8000704 <ExecuteCommand+0x1c0>)
 80006b2:	f000 fa93 	bl	8000bdc <siscanf>
		MAX_ROTATION = calib;
 80006b6:	88bb      	ldrh	r3, [r7, #4]
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b16      	ldr	r3, [pc, #88]	; (8000714 <ExecuteCommand+0x1d0>)
 80006bc:	601a      	str	r2, [r3, #0]
		strcpy(TxBuffer, "OK");
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <ExecuteCommand+0x1b8>)
 80006c0:	4a1e      	ldr	r2, [pc, #120]	; (800073c <ExecuteCommand+0x1f8>)
 80006c2:	6812      	ldr	r2, [r2, #0]
 80006c4:	4611      	mov	r1, r2
 80006c6:	8019      	strh	r1, [r3, #0]
 80006c8:	3302      	adds	r3, #2
 80006ca:	0c12      	lsrs	r2, r2, #16
 80006cc:	701a      	strb	r2, [r3, #0]
 80006ce:	e005      	b.n	80006dc <ExecuteCommand+0x198>
	}
	else
		strcpy(TxBuffer,"Invalid Command");					//Если мы не знаем, чего от нас хотят, ругаемся в ответ
 80006d0:	4a0a      	ldr	r2, [pc, #40]	; (80006fc <ExecuteCommand+0x1b8>)
 80006d2:	4b20      	ldr	r3, [pc, #128]	; (8000754 <ExecuteCommand+0x210>)
 80006d4:	4614      	mov	r4, r2
 80006d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Передача принятой строки обратно одним из двух способов
	txStr(TxBuffer);
 80006dc:	4807      	ldr	r0, [pc, #28]	; (80006fc <ExecuteCommand+0x1b8>)
 80006de:	f7ff fe4d 	bl	800037c <txStr>

	memset(RxBuffer,0,RX_BUFF_SIZE);						//Очистка буфера приёма
 80006e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006e6:	2100      	movs	r1, #0
 80006e8:	4806      	ldr	r0, [pc, #24]	; (8000704 <ExecuteCommand+0x1c0>)
 80006ea:	f000 fa4f 	bl	8000b8c <memset>
	ComReceived = false;									//Сбрасываем флаг приёма строки
 80006ee:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <ExecuteCommand+0x214>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	701a      	strb	r2, [r3, #0]
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bdb0      	pop	{r4, r5, r7, pc}
 80006fc:	20000188 	.word	0x20000188
 8000700:	08001e3c 	.word	0x08001e3c
 8000704:	20000088 	.word	0x20000088
 8000708:	08001e44 	.word	0x08001e44
 800070c:	08001e60 	.word	0x08001e60
 8000710:	2000028c 	.word	0x2000028c
 8000714:	20000000 	.word	0x20000000
 8000718:	08001e68 	.word	0x08001e68
 800071c:	08001e70 	.word	0x08001e70
 8000720:	08001e88 	.word	0x08001e88
 8000724:	08001e90 	.word	0x08001e90
 8000728:	08001e9c 	.word	0x08001e9c
 800072c:	08001eb0 	.word	0x08001eb0
 8000730:	08001eb8 	.word	0x08001eb8
 8000734:	08001ec0 	.word	0x08001ec0
 8000738:	08001ec8 	.word	0x08001ec8
 800073c:	08001ed0 	.word	0x08001ed0
 8000740:	08001ed4 	.word	0x08001ed4
 8000744:	08001ef0 	.word	0x08001ef0
 8000748:	20000290 	.word	0x20000290
 800074c:	08001ef8 	.word	0x08001ef8
 8000750:	08001f0c 	.word	0x08001f0c
 8000754:	08001f14 	.word	0x08001f14
 8000758:	20000288 	.word	0x20000288

0800075c <initGPIO>:

void initGPIO()
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;			//включить тактирование GPIOA
 8000760:	4b53      	ldr	r3, [pc, #332]	; (80008b0 <initGPIO+0x154>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	4a52      	ldr	r2, [pc, #328]	; (80008b0 <initGPIO+0x154>)
 8000766:	f043 0304 	orr.w	r3, r3, #4
 800076a:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 800076c:	4b50      	ldr	r3, [pc, #320]	; (80008b0 <initGPIO+0x154>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a4f      	ldr	r2, [pc, #316]	; (80008b0 <initGPIO+0x154>)
 8000772:	f043 0301 	orr.w	r3, r3, #1
 8000776:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8000778:	4b4d      	ldr	r3, [pc, #308]	; (80008b0 <initGPIO+0x154>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	4a4c      	ldr	r2, [pc, #304]	; (80008b0 <initGPIO+0x154>)
 800077e:	f043 0310 	orr.w	r3, r3, #16
 8000782:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000784:	4b4a      	ldr	r3, [pc, #296]	; (80008b0 <initGPIO+0x154>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a49      	ldr	r2, [pc, #292]	; (80008b0 <initGPIO+0x154>)
 800078a:	f043 0308 	orr.w	r3, r3, #8
 800078e:	6193      	str	r3, [r2, #24]

	//очистка полей
	//LED - PB12
	GPIOB->CRH &= ~(GPIO_CRH_CNF12 | GPIO_CRH_MODE12);
 8000790:	4b48      	ldr	r3, [pc, #288]	; (80008b4 <initGPIO+0x158>)
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	4a47      	ldr	r2, [pc, #284]	; (80008b4 <initGPIO+0x158>)
 8000796:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800079a:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= GPIO_CRH_MODE12_1;				//PB12, выход 2МГц
 800079c:	4b45      	ldr	r3, [pc, #276]	; (80008b4 <initGPIO+0x158>)
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	4a44      	ldr	r2, [pc, #272]	; (80008b4 <initGPIO+0x158>)
 80007a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a6:	6053      	str	r3, [r2, #4]
	// EN2 - PB13 (open drain output, 2MHz)
	GPIOB->CRH &= ~(GPIO_CRH_CNF13 | GPIO_CRH_MODE13);  // Сброс битов конфигурации
 80007a8:	4b42      	ldr	r3, [pc, #264]	; (80008b4 <initGPIO+0x158>)
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	4a41      	ldr	r2, [pc, #260]	; (80008b4 <initGPIO+0x158>)
 80007ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80007b2:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= (GPIO_CRH_MODE13_1 | GPIO_CRH_CNF13_0);  // 2MHz output, open drain
 80007b4:	4b3f      	ldr	r3, [pc, #252]	; (80008b4 <initGPIO+0x158>)
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	4a3e      	ldr	r2, [pc, #248]	; (80008b4 <initGPIO+0x158>)
 80007ba:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 80007be:	6053      	str	r3, [r2, #4]

	// EN1 - PB14 (open drain output, 2MHz)
	GPIOB->CRH &= ~(GPIO_CRH_CNF14 | GPIO_CRH_MODE14);  // Сброс битов конфигурации
 80007c0:	4b3c      	ldr	r3, [pc, #240]	; (80008b4 <initGPIO+0x158>)
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	4a3b      	ldr	r2, [pc, #236]	; (80008b4 <initGPIO+0x158>)
 80007c6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80007ca:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= (GPIO_CRH_MODE14_1 | GPIO_CRH_CNF14_0);  // 2MHz output, open drain
 80007cc:	4b39      	ldr	r3, [pc, #228]	; (80008b4 <initGPIO+0x158>)
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	4a38      	ldr	r2, [pc, #224]	; (80008b4 <initGPIO+0x158>)
 80007d2:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 80007d6:	6053      	str	r3, [r2, #4]
	//Button - PA11
	GPIOA->CRH &= ~(GPIO_CRH_MODE11 | GPIO_CRH_CNF11);
 80007d8:	4b37      	ldr	r3, [pc, #220]	; (80008b8 <initGPIO+0x15c>)
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	4a36      	ldr	r2, [pc, #216]	; (80008b8 <initGPIO+0x15c>)
 80007de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80007e2:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF11_1;			//Вход с подтяжкой
 80007e4:	4b34      	ldr	r3, [pc, #208]	; (80008b8 <initGPIO+0x15c>)
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	4a33      	ldr	r2, [pc, #204]	; (80008b8 <initGPIO+0x15c>)
 80007ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007ee:	6053      	str	r3, [r2, #4]
	GPIOA->BSRR |= GPIO_BSRR_BS11;			//Подтяжка к Vdd
 80007f0:	4b31      	ldr	r3, [pc, #196]	; (80008b8 <initGPIO+0x15c>)
 80007f2:	691b      	ldr	r3, [r3, #16]
 80007f4:	4a30      	ldr	r2, [pc, #192]	; (80008b8 <initGPIO+0x15c>)
 80007f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007fa:	6113      	str	r3, [r2, #16]
	//S1 - PA8
	GPIOA->CRH &= ~(GPIO_CRH_MODE8 | GPIO_CRH_CNF8);
 80007fc:	4b2e      	ldr	r3, [pc, #184]	; (80008b8 <initGPIO+0x15c>)
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	4a2d      	ldr	r2, [pc, #180]	; (80008b8 <initGPIO+0x15c>)
 8000802:	f023 030f 	bic.w	r3, r3, #15
 8000806:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF8_1;			//Вход с подтяжкой
 8000808:	4b2b      	ldr	r3, [pc, #172]	; (80008b8 <initGPIO+0x15c>)
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	4a2a      	ldr	r2, [pc, #168]	; (80008b8 <initGPIO+0x15c>)
 800080e:	f043 0308 	orr.w	r3, r3, #8
 8000812:	6053      	str	r3, [r2, #4]
	//S2 - PB15
	GPIOB->CRH &= ~(GPIO_CRH_MODE15 | GPIO_CRH_CNF15);
 8000814:	4b27      	ldr	r3, [pc, #156]	; (80008b4 <initGPIO+0x158>)
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	4a26      	ldr	r2, [pc, #152]	; (80008b4 <initGPIO+0x158>)
 800081a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800081e:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= GPIO_CRH_CNF15_1;			//Вход с подтяжкой
 8000820:	4b24      	ldr	r3, [pc, #144]	; (80008b4 <initGPIO+0x158>)
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	4a23      	ldr	r2, [pc, #140]	; (80008b4 <initGPIO+0x158>)
 8000826:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800082a:	6053      	str	r3, [r2, #4]

	// Настройка альтернативных фукнций портов.
	// Настройки портов с 12 по 15 хранятся в регистре AFIO_EXTICR4.
	// Регистры объединены в массив AFIO->EXTICR, нумерация массива начинается с нулевого элемента.
	// Поэтому настройки AFIO_EXTICR4 хранятся в AFIO->EXTICR[3]
	AFIO->EXTICR[2] |= AFIO_EXTICR3_EXTI11_PA;	//Button - PA11
 800082c:	4b23      	ldr	r3, [pc, #140]	; (80008bc <initGPIO+0x160>)
 800082e:	4a23      	ldr	r2, [pc, #140]	; (80008bc <initGPIO+0x160>)
 8000830:	691b      	ldr	r3, [r3, #16]
 8000832:	6113      	str	r3, [r2, #16]
	AFIO->EXTICR[2] |= AFIO_EXTICR3_EXTI8_PA;	//S1 - PA8
 8000834:	4b21      	ldr	r3, [pc, #132]	; (80008bc <initGPIO+0x160>)
 8000836:	4a21      	ldr	r2, [pc, #132]	; (80008bc <initGPIO+0x160>)
 8000838:	691b      	ldr	r3, [r3, #16]
 800083a:	6113      	str	r3, [r2, #16]
	AFIO->EXTICR[3] |= AFIO_EXTICR4_EXTI15_PB;	//S2 - PB15
 800083c:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <initGPIO+0x160>)
 800083e:	695b      	ldr	r3, [r3, #20]
 8000840:	4a1e      	ldr	r2, [pc, #120]	; (80008bc <initGPIO+0x160>)
 8000842:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000846:	6153      	str	r3, [r2, #20]

	EXTI->FTSR |= EXTI_FTSR_TR11;
 8000848:	4b1d      	ldr	r3, [pc, #116]	; (80008c0 <initGPIO+0x164>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	4a1c      	ldr	r2, [pc, #112]	; (80008c0 <initGPIO+0x164>)
 800084e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000852:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= EXTI_IMR_MR11;
 8000854:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <initGPIO+0x164>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a19      	ldr	r2, [pc, #100]	; (80008c0 <initGPIO+0x164>)
 800085a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800085e:	6013      	str	r3, [r2, #0]

	EXTI->FTSR |= EXTI_RTSR_TR8;
 8000860:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <initGPIO+0x164>)
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	4a16      	ldr	r2, [pc, #88]	; (80008c0 <initGPIO+0x164>)
 8000866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800086a:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= EXTI_IMR_MR8;
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <initGPIO+0x164>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a13      	ldr	r2, [pc, #76]	; (80008c0 <initGPIO+0x164>)
 8000872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000876:	6013      	str	r3, [r2, #0]

	EXTI->FTSR |= EXTI_RTSR_TR15;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <initGPIO+0x164>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	4a10      	ldr	r2, [pc, #64]	; (80008c0 <initGPIO+0x164>)
 800087e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000882:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= EXTI_IMR_MR15;
 8000884:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <initGPIO+0x164>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a0d      	ldr	r2, [pc, #52]	; (80008c0 <initGPIO+0x164>)
 800088a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800088e:	6013      	str	r3, [r2, #0]

	NVIC_EnableIRQ(EXTI9_5_IRQn);			//Разрешаем прерывание
 8000890:	2017      	movs	r0, #23
 8000892:	f7ff fc75 	bl	8000180 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI9_5_IRQn, 0);	//Выставляем приоритет
 8000896:	2100      	movs	r1, #0
 8000898:	2017      	movs	r0, #23
 800089a:	f7ff fc8d 	bl	80001b8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI15_10_IRQn);			//Разрешаем прерывание
 800089e:	2028      	movs	r0, #40	; 0x28
 80008a0:	f7ff fc6e 	bl	8000180 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI15_10_IRQn, 0);	//Выставляем приоритет
 80008a4:	2100      	movs	r1, #0
 80008a6:	2028      	movs	r0, #40	; 0x28
 80008a8:	f7ff fc86 	bl	80001b8 <__NVIC_SetPriority>
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40021000 	.word	0x40021000
 80008b4:	40010c00 	.word	0x40010c00
 80008b8:	40010800 	.word	0x40010800
 80008bc:	40010000 	.word	0x40010000
 80008c0:	40010400 	.word	0x40010400

080008c4 <main>:

int main(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	initClk();
 80008c8:	f7ff fca0 	bl	800020c <initClk>
	initTIM3_PWM();
 80008cc:	f7ff fd8a 	bl	80003e4 <initTIM3_PWM>
	initUSART1();
 80008d0:	f7ff fd14 	bl	80002fc <initUSART1>
	initGPIO();
 80008d4:	f7ff ff42 	bl	800075c <initGPIO>
	stopWindow();
 80008d8:	f7ff fe16 	bl	8000508 <stopWindow>
	setTIM3_period(speed);
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <main+0x64>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff fcf6 	bl	80002d4 <setTIM3_period>
//	}

    /* Loop forever */
	while(1)
	{
		if (ComReceived == true)
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <main+0x68>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <main+0x30>
		{
			ExecuteCommand();
 80008f0:	f7ff fe28 	bl	8000544 <ExecuteCommand>
		}
		if ((rotation > MAX_ROTATION) && (state == MOTOR_OPEN))
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <main+0x6c>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <main+0x70>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	dd05      	ble.n	800090c <main+0x48>
 8000900:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <main+0x74>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d101      	bne.n	800090c <main+0x48>
		{
			stopWindow();
 8000908:	f7ff fdfe 	bl	8000508 <stopWindow>
		}
		if ((rotation < 0) && (state == MOTOR_CLOSE))
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <main+0x6c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	dae9      	bge.n	80008e8 <main+0x24>
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <main+0x74>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b02      	cmp	r3, #2
 800091a:	d1e5      	bne.n	80008e8 <main+0x24>
		{
			stopWindow();
 800091c:	f7ff fdf4 	bl	8000508 <stopWindow>
			rotation = 0;
 8000920:	4b03      	ldr	r3, [pc, #12]	; (8000930 <main+0x6c>)
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
		if (ComReceived == true)
 8000926:	e7df      	b.n	80008e8 <main+0x24>
 8000928:	20000004 	.word	0x20000004
 800092c:	20000288 	.word	0x20000288
 8000930:	2000028c 	.word	0x2000028c
 8000934:	20000000 	.word	0x20000000
 8000938:	20000290 	.word	0x20000290

0800093c <EXTI9_5_IRQHandler>:
		}
	}
}

void EXTI9_5_IRQHandler(void){
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR8)
 8000940:	4b10      	ldr	r3, [pc, #64]	; (8000984 <EXTI9_5_IRQHandler+0x48>)
 8000942:	695b      	ldr	r3, [r3, #20]
 8000944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000948:	2b00      	cmp	r3, #0
 800094a:	d016      	beq.n	800097a <EXTI9_5_IRQHandler+0x3e>
	{
		if ((GPIOB->IDR & GPIO_IDR_IDR15) == 0)
 800094c:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <EXTI9_5_IRQHandler+0x4c>)
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000954:	2b00      	cmp	r3, #0
 8000956:	d105      	bne.n	8000964 <EXTI9_5_IRQHandler+0x28>
		{
			rotation += 1;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <EXTI9_5_IRQHandler+0x50>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	3301      	adds	r3, #1
 800095e:	4a0b      	ldr	r2, [pc, #44]	; (800098c <EXTI9_5_IRQHandler+0x50>)
 8000960:	6013      	str	r3, [r2, #0]
 8000962:	e004      	b.n	800096e <EXTI9_5_IRQHandler+0x32>
		}
		else
		{
			rotation -= 1;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <EXTI9_5_IRQHandler+0x50>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	3b01      	subs	r3, #1
 800096a:	4a08      	ldr	r2, [pc, #32]	; (800098c <EXTI9_5_IRQHandler+0x50>)
 800096c:	6013      	str	r3, [r2, #0]
		}
		EXTI->PR |= EXTI_PR_PR8;
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <EXTI9_5_IRQHandler+0x48>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	4a04      	ldr	r2, [pc, #16]	; (8000984 <EXTI9_5_IRQHandler+0x48>)
 8000974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000978:	6153      	str	r3, [r2, #20]
	}
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40010400 	.word	0x40010400
 8000988:	40010c00 	.word	0x40010c00
 800098c:	2000028c 	.word	0x2000028c

08000990 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR11)
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <EXTI15_10_IRQHandler+0x44>)
 8000996:	695b      	ldr	r3, [r3, #20]
 8000998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800099c:	2b00      	cmp	r3, #0
 800099e:	d00a      	beq.n	80009b6 <EXTI15_10_IRQHandler+0x26>
	{
		rotation = 0;
 80009a0:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <EXTI15_10_IRQHandler+0x48>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
		stopWindow();
 80009a6:	f7ff fdaf 	bl	8000508 <stopWindow>
		EXTI->PR |= EXTI_PR_PR11;
 80009aa:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <EXTI15_10_IRQHandler+0x44>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	4a09      	ldr	r2, [pc, #36]	; (80009d4 <EXTI15_10_IRQHandler+0x44>)
 80009b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009b4:	6153      	str	r3, [r2, #20]
	}
	if (EXTI->PR & EXTI_PR_PR15)
 80009b6:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <EXTI15_10_IRQHandler+0x44>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d005      	beq.n	80009ce <EXTI15_10_IRQHandler+0x3e>
	{
		EXTI->PR |= EXTI_PR_PR15;
 80009c2:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <EXTI15_10_IRQHandler+0x44>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	4a03      	ldr	r2, [pc, #12]	; (80009d4 <EXTI15_10_IRQHandler+0x44>)
 80009c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009cc:	6153      	str	r3, [r2, #20]
	}
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40010400 	.word	0x40010400
 80009d8:	2000028c 	.word	0x2000028c

080009dc <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
	if ((USART1->SR & USART_SR_RXNE)!=0)		//Прерывание по приёму данных?
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <USART1_IRQHandler+0x4c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f003 0320 	and.w	r3, r3, #32
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d019      	beq.n	8000a22 <USART1_IRQHandler+0x46>
	{
		uint8_t pos = strlen(RxBuffer);			//Вычисляем позицию свободной ячейки
 80009ee:	480f      	ldr	r0, [pc, #60]	; (8000a2c <USART1_IRQHandler+0x50>)
 80009f0:	f7ff fbbe 	bl	8000170 <strlen>
 80009f4:	4603      	mov	r3, r0
 80009f6:	71fb      	strb	r3, [r7, #7]

		RxBuffer[pos] = USART1->DR;				//Считываем содержимое регистра данных
 80009f8:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <USART1_IRQHandler+0x4c>)
 80009fa:	685a      	ldr	r2, [r3, #4]
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	b2d1      	uxtb	r1, r2
 8000a00:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <USART1_IRQHandler+0x50>)
 8000a02:	54d1      	strb	r1, [r2, r3]

		if ((RxBuffer[pos]== 0x0A) && (RxBuffer[pos-1]== 0x0D))							//Если это символ конца строки
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	4a09      	ldr	r2, [pc, #36]	; (8000a2c <USART1_IRQHandler+0x50>)
 8000a08:	5cd3      	ldrb	r3, [r2, r3]
 8000a0a:	2b0a      	cmp	r3, #10
 8000a0c:	d109      	bne.n	8000a22 <USART1_IRQHandler+0x46>
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	3b01      	subs	r3, #1
 8000a12:	4a06      	ldr	r2, [pc, #24]	; (8000a2c <USART1_IRQHandler+0x50>)
 8000a14:	5cd3      	ldrb	r3, [r2, r3]
 8000a16:	2b0d      	cmp	r3, #13
 8000a18:	d103      	bne.n	8000a22 <USART1_IRQHandler+0x46>
		{
			ComReceived = true;					//- выставляем флаг приёма строки
 8000a1a:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <USART1_IRQHandler+0x54>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	701a      	strb	r2, [r3, #0]
			return;								//- и выходим
 8000a20:	bf00      	nop
		}
	}
}
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40013800 	.word	0x40013800
 8000a2c:	20000088 	.word	0x20000088
 8000a30:	20000288 	.word	0x20000288

08000a34 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	TIM3->SR &= ~TIM_SR_UIF;
 8000a38:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <TIM3_IRQHandler+0x34>)
 8000a3a:	691b      	ldr	r3, [r3, #16]
 8000a3c:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <TIM3_IRQHandler+0x34>)
 8000a3e:	f023 0301 	bic.w	r3, r3, #1
 8000a42:	6113      	str	r3, [r2, #16]
	memset(TxBuffer,0,sizeof(TxBuffer));
 8000a44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4808      	ldr	r0, [pc, #32]	; (8000a6c <TIM3_IRQHandler+0x38>)
 8000a4c:	f000 f89e 	bl	8000b8c <memset>
	sprintf(TxBuffer,"%d", rotation);
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <TIM3_IRQHandler+0x3c>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	461a      	mov	r2, r3
 8000a56:	4907      	ldr	r1, [pc, #28]	; (8000a74 <TIM3_IRQHandler+0x40>)
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <TIM3_IRQHandler+0x38>)
 8000a5a:	f000 f89f 	bl	8000b9c <siprintf>
	txStr(TxBuffer);
 8000a5e:	4803      	ldr	r0, [pc, #12]	; (8000a6c <TIM3_IRQHandler+0x38>)
 8000a60:	f7ff fc8c 	bl	800037c <txStr>
//	EN2_SWAP();
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40000400 	.word	0x40000400
 8000a6c:	20000188 	.word	0x20000188
 8000a70:	2000028c 	.word	0x2000028c
 8000a74:	08001f24 	.word	0x08001f24

08000a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a80:	4a14      	ldr	r2, [pc, #80]	; (8000ad4 <_sbrk+0x5c>)
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <_sbrk+0x60>)
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a8c:	4b13      	ldr	r3, [pc, #76]	; (8000adc <_sbrk+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d102      	bne.n	8000a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <_sbrk+0x64>)
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <_sbrk+0x68>)
 8000a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <_sbrk+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d207      	bcs.n	8000ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa8:	f000 f846 	bl	8000b38 <__errno>
 8000aac:	4603      	mov	r3, r0
 8000aae:	220c      	movs	r2, #12
 8000ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab6:	e009      	b.n	8000acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <_sbrk+0x64>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000abe:	4b07      	ldr	r3, [pc, #28]	; (8000adc <_sbrk+0x64>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	4a05      	ldr	r2, [pc, #20]	; (8000adc <_sbrk+0x64>)
 8000ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aca:	68fb      	ldr	r3, [r7, #12]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20005000 	.word	0x20005000
 8000ad8:	00000400 	.word	0x00000400
 8000adc:	20000294 	.word	0x20000294
 8000ae0:	200002a8 	.word	0x200002a8

08000ae4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ae4:	480d      	ldr	r0, [pc, #52]	; (8000b1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ae6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ae8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aec:	480c      	ldr	r0, [pc, #48]	; (8000b20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aee:	490d      	ldr	r1, [pc, #52]	; (8000b24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000af0:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <LoopForever+0xe>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af4:	e002      	b.n	8000afc <LoopCopyDataInit>

08000af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afa:	3304      	adds	r3, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b00:	d3f9      	bcc.n	8000af6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b04:	4c0a      	ldr	r4, [pc, #40]	; (8000b30 <LoopForever+0x16>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b08:	e001      	b.n	8000b0e <LoopFillZerobss>

08000b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0c:	3204      	adds	r2, #4

08000b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b10:	d3fb      	bcc.n	8000b0a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b12:	f000 f817 	bl	8000b44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b16:	f7ff fed5 	bl	80008c4 <main>

08000b1a <LoopForever>:

LoopForever:
  b LoopForever
 8000b1a:	e7fe      	b.n	8000b1a <LoopForever>
  ldr   r0, =_estack
 8000b1c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b24:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000b28:	080020ec 	.word	0x080020ec
  ldr r2, =_sbss
 8000b2c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000b30:	200002a8 	.word	0x200002a8

08000b34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC1_2_IRQHandler>
	...

08000b38 <__errno>:
 8000b38:	4b01      	ldr	r3, [pc, #4]	; (8000b40 <__errno+0x8>)
 8000b3a:	6818      	ldr	r0, [r3, #0]
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	20000008 	.word	0x20000008

08000b44 <__libc_init_array>:
 8000b44:	b570      	push	{r4, r5, r6, lr}
 8000b46:	2600      	movs	r6, #0
 8000b48:	4d0c      	ldr	r5, [pc, #48]	; (8000b7c <__libc_init_array+0x38>)
 8000b4a:	4c0d      	ldr	r4, [pc, #52]	; (8000b80 <__libc_init_array+0x3c>)
 8000b4c:	1b64      	subs	r4, r4, r5
 8000b4e:	10a4      	asrs	r4, r4, #2
 8000b50:	42a6      	cmp	r6, r4
 8000b52:	d109      	bne.n	8000b68 <__libc_init_array+0x24>
 8000b54:	f001 f964 	bl	8001e20 <_init>
 8000b58:	2600      	movs	r6, #0
 8000b5a:	4d0a      	ldr	r5, [pc, #40]	; (8000b84 <__libc_init_array+0x40>)
 8000b5c:	4c0a      	ldr	r4, [pc, #40]	; (8000b88 <__libc_init_array+0x44>)
 8000b5e:	1b64      	subs	r4, r4, r5
 8000b60:	10a4      	asrs	r4, r4, #2
 8000b62:	42a6      	cmp	r6, r4
 8000b64:	d105      	bne.n	8000b72 <__libc_init_array+0x2e>
 8000b66:	bd70      	pop	{r4, r5, r6, pc}
 8000b68:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b6c:	4798      	blx	r3
 8000b6e:	3601      	adds	r6, #1
 8000b70:	e7ee      	b.n	8000b50 <__libc_init_array+0xc>
 8000b72:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b76:	4798      	blx	r3
 8000b78:	3601      	adds	r6, #1
 8000b7a:	e7f2      	b.n	8000b62 <__libc_init_array+0x1e>
 8000b7c:	080020e4 	.word	0x080020e4
 8000b80:	080020e4 	.word	0x080020e4
 8000b84:	080020e4 	.word	0x080020e4
 8000b88:	080020e8 	.word	0x080020e8

08000b8c <memset>:
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4402      	add	r2, r0
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d100      	bne.n	8000b96 <memset+0xa>
 8000b94:	4770      	bx	lr
 8000b96:	f803 1b01 	strb.w	r1, [r3], #1
 8000b9a:	e7f9      	b.n	8000b90 <memset+0x4>

08000b9c <siprintf>:
 8000b9c:	b40e      	push	{r1, r2, r3}
 8000b9e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000ba2:	b500      	push	{lr}
 8000ba4:	b09c      	sub	sp, #112	; 0x70
 8000ba6:	ab1d      	add	r3, sp, #116	; 0x74
 8000ba8:	9002      	str	r0, [sp, #8]
 8000baa:	9006      	str	r0, [sp, #24]
 8000bac:	9107      	str	r1, [sp, #28]
 8000bae:	9104      	str	r1, [sp, #16]
 8000bb0:	4808      	ldr	r0, [pc, #32]	; (8000bd4 <siprintf+0x38>)
 8000bb2:	4909      	ldr	r1, [pc, #36]	; (8000bd8 <siprintf+0x3c>)
 8000bb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8000bb8:	9105      	str	r1, [sp, #20]
 8000bba:	6800      	ldr	r0, [r0, #0]
 8000bbc:	a902      	add	r1, sp, #8
 8000bbe:	9301      	str	r3, [sp, #4]
 8000bc0:	f000 f8a8 	bl	8000d14 <_svfiprintf_r>
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	9b02      	ldr	r3, [sp, #8]
 8000bc8:	701a      	strb	r2, [r3, #0]
 8000bca:	b01c      	add	sp, #112	; 0x70
 8000bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8000bd0:	b003      	add	sp, #12
 8000bd2:	4770      	bx	lr
 8000bd4:	20000008 	.word	0x20000008
 8000bd8:	ffff0208 	.word	0xffff0208

08000bdc <siscanf>:
 8000bdc:	b40e      	push	{r1, r2, r3}
 8000bde:	f44f 7201 	mov.w	r2, #516	; 0x204
 8000be2:	b530      	push	{r4, r5, lr}
 8000be4:	b09c      	sub	sp, #112	; 0x70
 8000be6:	ac1f      	add	r4, sp, #124	; 0x7c
 8000be8:	f854 5b04 	ldr.w	r5, [r4], #4
 8000bec:	f8ad 2014 	strh.w	r2, [sp, #20]
 8000bf0:	9002      	str	r0, [sp, #8]
 8000bf2:	9006      	str	r0, [sp, #24]
 8000bf4:	f7ff fabc 	bl	8000170 <strlen>
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <siscanf+0x4c>)
 8000bfa:	9003      	str	r0, [sp, #12]
 8000bfc:	930b      	str	r3, [sp, #44]	; 0x2c
 8000bfe:	2300      	movs	r3, #0
 8000c00:	930f      	str	r3, [sp, #60]	; 0x3c
 8000c02:	9314      	str	r3, [sp, #80]	; 0x50
 8000c04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c08:	9007      	str	r0, [sp, #28]
 8000c0a:	4808      	ldr	r0, [pc, #32]	; (8000c2c <siscanf+0x50>)
 8000c0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8000c10:	462a      	mov	r2, r5
 8000c12:	4623      	mov	r3, r4
 8000c14:	a902      	add	r1, sp, #8
 8000c16:	6800      	ldr	r0, [r0, #0]
 8000c18:	9401      	str	r4, [sp, #4]
 8000c1a:	f000 f9d5 	bl	8000fc8 <__ssvfiscanf_r>
 8000c1e:	b01c      	add	sp, #112	; 0x70
 8000c20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000c24:	b003      	add	sp, #12
 8000c26:	4770      	bx	lr
 8000c28:	08000c31 	.word	0x08000c31
 8000c2c:	20000008 	.word	0x20000008

08000c30 <__seofread>:
 8000c30:	2000      	movs	r0, #0
 8000c32:	4770      	bx	lr

08000c34 <strncmp>:
 8000c34:	4603      	mov	r3, r0
 8000c36:	b510      	push	{r4, lr}
 8000c38:	b172      	cbz	r2, 8000c58 <strncmp+0x24>
 8000c3a:	3901      	subs	r1, #1
 8000c3c:	1884      	adds	r4, r0, r2
 8000c3e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8000c42:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8000c46:	4290      	cmp	r0, r2
 8000c48:	d101      	bne.n	8000c4e <strncmp+0x1a>
 8000c4a:	42a3      	cmp	r3, r4
 8000c4c:	d101      	bne.n	8000c52 <strncmp+0x1e>
 8000c4e:	1a80      	subs	r0, r0, r2
 8000c50:	bd10      	pop	{r4, pc}
 8000c52:	2800      	cmp	r0, #0
 8000c54:	d1f3      	bne.n	8000c3e <strncmp+0xa>
 8000c56:	e7fa      	b.n	8000c4e <strncmp+0x1a>
 8000c58:	4610      	mov	r0, r2
 8000c5a:	e7f9      	b.n	8000c50 <strncmp+0x1c>

08000c5c <__ssputs_r>:
 8000c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c60:	688e      	ldr	r6, [r1, #8]
 8000c62:	4682      	mov	sl, r0
 8000c64:	429e      	cmp	r6, r3
 8000c66:	460c      	mov	r4, r1
 8000c68:	4690      	mov	r8, r2
 8000c6a:	461f      	mov	r7, r3
 8000c6c:	d838      	bhi.n	8000ce0 <__ssputs_r+0x84>
 8000c6e:	898a      	ldrh	r2, [r1, #12]
 8000c70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000c74:	d032      	beq.n	8000cdc <__ssputs_r+0x80>
 8000c76:	6825      	ldr	r5, [r4, #0]
 8000c78:	6909      	ldr	r1, [r1, #16]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	eba5 0901 	sub.w	r9, r5, r1
 8000c80:	6965      	ldr	r5, [r4, #20]
 8000c82:	444b      	add	r3, r9
 8000c84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000c88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000c8c:	106d      	asrs	r5, r5, #1
 8000c8e:	429d      	cmp	r5, r3
 8000c90:	bf38      	it	cc
 8000c92:	461d      	movcc	r5, r3
 8000c94:	0553      	lsls	r3, r2, #21
 8000c96:	d531      	bpl.n	8000cfc <__ssputs_r+0xa0>
 8000c98:	4629      	mov	r1, r5
 8000c9a:	f000 fff9 	bl	8001c90 <_malloc_r>
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	b950      	cbnz	r0, 8000cb8 <__ssputs_r+0x5c>
 8000ca2:	230c      	movs	r3, #12
 8000ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca8:	f8ca 3000 	str.w	r3, [sl]
 8000cac:	89a3      	ldrh	r3, [r4, #12]
 8000cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cb2:	81a3      	strh	r3, [r4, #12]
 8000cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb8:	464a      	mov	r2, r9
 8000cba:	6921      	ldr	r1, [r4, #16]
 8000cbc:	f000 ff58 	bl	8001b70 <memcpy>
 8000cc0:	89a3      	ldrh	r3, [r4, #12]
 8000cc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cca:	81a3      	strh	r3, [r4, #12]
 8000ccc:	6126      	str	r6, [r4, #16]
 8000cce:	444e      	add	r6, r9
 8000cd0:	6026      	str	r6, [r4, #0]
 8000cd2:	463e      	mov	r6, r7
 8000cd4:	6165      	str	r5, [r4, #20]
 8000cd6:	eba5 0509 	sub.w	r5, r5, r9
 8000cda:	60a5      	str	r5, [r4, #8]
 8000cdc:	42be      	cmp	r6, r7
 8000cde:	d900      	bls.n	8000ce2 <__ssputs_r+0x86>
 8000ce0:	463e      	mov	r6, r7
 8000ce2:	4632      	mov	r2, r6
 8000ce4:	4641      	mov	r1, r8
 8000ce6:	6820      	ldr	r0, [r4, #0]
 8000ce8:	f000 ff50 	bl	8001b8c <memmove>
 8000cec:	68a3      	ldr	r3, [r4, #8]
 8000cee:	2000      	movs	r0, #0
 8000cf0:	1b9b      	subs	r3, r3, r6
 8000cf2:	60a3      	str	r3, [r4, #8]
 8000cf4:	6823      	ldr	r3, [r4, #0]
 8000cf6:	4433      	add	r3, r6
 8000cf8:	6023      	str	r3, [r4, #0]
 8000cfa:	e7db      	b.n	8000cb4 <__ssputs_r+0x58>
 8000cfc:	462a      	mov	r2, r5
 8000cfe:	f001 f83b 	bl	8001d78 <_realloc_r>
 8000d02:	4606      	mov	r6, r0
 8000d04:	2800      	cmp	r0, #0
 8000d06:	d1e1      	bne.n	8000ccc <__ssputs_r+0x70>
 8000d08:	4650      	mov	r0, sl
 8000d0a:	6921      	ldr	r1, [r4, #16]
 8000d0c:	f000 ff58 	bl	8001bc0 <_free_r>
 8000d10:	e7c7      	b.n	8000ca2 <__ssputs_r+0x46>
	...

08000d14 <_svfiprintf_r>:
 8000d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d18:	4698      	mov	r8, r3
 8000d1a:	898b      	ldrh	r3, [r1, #12]
 8000d1c:	4607      	mov	r7, r0
 8000d1e:	061b      	lsls	r3, r3, #24
 8000d20:	460d      	mov	r5, r1
 8000d22:	4614      	mov	r4, r2
 8000d24:	b09d      	sub	sp, #116	; 0x74
 8000d26:	d50e      	bpl.n	8000d46 <_svfiprintf_r+0x32>
 8000d28:	690b      	ldr	r3, [r1, #16]
 8000d2a:	b963      	cbnz	r3, 8000d46 <_svfiprintf_r+0x32>
 8000d2c:	2140      	movs	r1, #64	; 0x40
 8000d2e:	f000 ffaf 	bl	8001c90 <_malloc_r>
 8000d32:	6028      	str	r0, [r5, #0]
 8000d34:	6128      	str	r0, [r5, #16]
 8000d36:	b920      	cbnz	r0, 8000d42 <_svfiprintf_r+0x2e>
 8000d38:	230c      	movs	r3, #12
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d40:	e0d1      	b.n	8000ee6 <_svfiprintf_r+0x1d2>
 8000d42:	2340      	movs	r3, #64	; 0x40
 8000d44:	616b      	str	r3, [r5, #20]
 8000d46:	2300      	movs	r3, #0
 8000d48:	9309      	str	r3, [sp, #36]	; 0x24
 8000d4a:	2320      	movs	r3, #32
 8000d4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000d50:	2330      	movs	r3, #48	; 0x30
 8000d52:	f04f 0901 	mov.w	r9, #1
 8000d56:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8000f00 <_svfiprintf_r+0x1ec>
 8000d5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000d62:	4623      	mov	r3, r4
 8000d64:	469a      	mov	sl, r3
 8000d66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d6a:	b10a      	cbz	r2, 8000d70 <_svfiprintf_r+0x5c>
 8000d6c:	2a25      	cmp	r2, #37	; 0x25
 8000d6e:	d1f9      	bne.n	8000d64 <_svfiprintf_r+0x50>
 8000d70:	ebba 0b04 	subs.w	fp, sl, r4
 8000d74:	d00b      	beq.n	8000d8e <_svfiprintf_r+0x7a>
 8000d76:	465b      	mov	r3, fp
 8000d78:	4622      	mov	r2, r4
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	4638      	mov	r0, r7
 8000d7e:	f7ff ff6d 	bl	8000c5c <__ssputs_r>
 8000d82:	3001      	adds	r0, #1
 8000d84:	f000 80aa 	beq.w	8000edc <_svfiprintf_r+0x1c8>
 8000d88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000d8a:	445a      	add	r2, fp
 8000d8c:	9209      	str	r2, [sp, #36]	; 0x24
 8000d8e:	f89a 3000 	ldrb.w	r3, [sl]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f000 80a2 	beq.w	8000edc <_svfiprintf_r+0x1c8>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000da2:	f10a 0a01 	add.w	sl, sl, #1
 8000da6:	9304      	str	r3, [sp, #16]
 8000da8:	9307      	str	r3, [sp, #28]
 8000daa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000dae:	931a      	str	r3, [sp, #104]	; 0x68
 8000db0:	4654      	mov	r4, sl
 8000db2:	2205      	movs	r2, #5
 8000db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000db8:	4851      	ldr	r0, [pc, #324]	; (8000f00 <_svfiprintf_r+0x1ec>)
 8000dba:	f000 fecb 	bl	8001b54 <memchr>
 8000dbe:	9a04      	ldr	r2, [sp, #16]
 8000dc0:	b9d8      	cbnz	r0, 8000dfa <_svfiprintf_r+0xe6>
 8000dc2:	06d0      	lsls	r0, r2, #27
 8000dc4:	bf44      	itt	mi
 8000dc6:	2320      	movmi	r3, #32
 8000dc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000dcc:	0711      	lsls	r1, r2, #28
 8000dce:	bf44      	itt	mi
 8000dd0:	232b      	movmi	r3, #43	; 0x2b
 8000dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000dd6:	f89a 3000 	ldrb.w	r3, [sl]
 8000dda:	2b2a      	cmp	r3, #42	; 0x2a
 8000ddc:	d015      	beq.n	8000e0a <_svfiprintf_r+0xf6>
 8000dde:	4654      	mov	r4, sl
 8000de0:	2000      	movs	r0, #0
 8000de2:	f04f 0c0a 	mov.w	ip, #10
 8000de6:	9a07      	ldr	r2, [sp, #28]
 8000de8:	4621      	mov	r1, r4
 8000dea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000dee:	3b30      	subs	r3, #48	; 0x30
 8000df0:	2b09      	cmp	r3, #9
 8000df2:	d94e      	bls.n	8000e92 <_svfiprintf_r+0x17e>
 8000df4:	b1b0      	cbz	r0, 8000e24 <_svfiprintf_r+0x110>
 8000df6:	9207      	str	r2, [sp, #28]
 8000df8:	e014      	b.n	8000e24 <_svfiprintf_r+0x110>
 8000dfa:	eba0 0308 	sub.w	r3, r0, r8
 8000dfe:	fa09 f303 	lsl.w	r3, r9, r3
 8000e02:	4313      	orrs	r3, r2
 8000e04:	46a2      	mov	sl, r4
 8000e06:	9304      	str	r3, [sp, #16]
 8000e08:	e7d2      	b.n	8000db0 <_svfiprintf_r+0x9c>
 8000e0a:	9b03      	ldr	r3, [sp, #12]
 8000e0c:	1d19      	adds	r1, r3, #4
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	9103      	str	r1, [sp, #12]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	bfbb      	ittet	lt
 8000e16:	425b      	neglt	r3, r3
 8000e18:	f042 0202 	orrlt.w	r2, r2, #2
 8000e1c:	9307      	strge	r3, [sp, #28]
 8000e1e:	9307      	strlt	r3, [sp, #28]
 8000e20:	bfb8      	it	lt
 8000e22:	9204      	strlt	r2, [sp, #16]
 8000e24:	7823      	ldrb	r3, [r4, #0]
 8000e26:	2b2e      	cmp	r3, #46	; 0x2e
 8000e28:	d10c      	bne.n	8000e44 <_svfiprintf_r+0x130>
 8000e2a:	7863      	ldrb	r3, [r4, #1]
 8000e2c:	2b2a      	cmp	r3, #42	; 0x2a
 8000e2e:	d135      	bne.n	8000e9c <_svfiprintf_r+0x188>
 8000e30:	9b03      	ldr	r3, [sp, #12]
 8000e32:	3402      	adds	r4, #2
 8000e34:	1d1a      	adds	r2, r3, #4
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	9203      	str	r2, [sp, #12]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	bfb8      	it	lt
 8000e3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8000e42:	9305      	str	r3, [sp, #20]
 8000e44:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8000f04 <_svfiprintf_r+0x1f0>
 8000e48:	2203      	movs	r2, #3
 8000e4a:	4650      	mov	r0, sl
 8000e4c:	7821      	ldrb	r1, [r4, #0]
 8000e4e:	f000 fe81 	bl	8001b54 <memchr>
 8000e52:	b140      	cbz	r0, 8000e66 <_svfiprintf_r+0x152>
 8000e54:	2340      	movs	r3, #64	; 0x40
 8000e56:	eba0 000a 	sub.w	r0, r0, sl
 8000e5a:	fa03 f000 	lsl.w	r0, r3, r0
 8000e5e:	9b04      	ldr	r3, [sp, #16]
 8000e60:	3401      	adds	r4, #1
 8000e62:	4303      	orrs	r3, r0
 8000e64:	9304      	str	r3, [sp, #16]
 8000e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e6a:	2206      	movs	r2, #6
 8000e6c:	4826      	ldr	r0, [pc, #152]	; (8000f08 <_svfiprintf_r+0x1f4>)
 8000e6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000e72:	f000 fe6f 	bl	8001b54 <memchr>
 8000e76:	2800      	cmp	r0, #0
 8000e78:	d038      	beq.n	8000eec <_svfiprintf_r+0x1d8>
 8000e7a:	4b24      	ldr	r3, [pc, #144]	; (8000f0c <_svfiprintf_r+0x1f8>)
 8000e7c:	bb1b      	cbnz	r3, 8000ec6 <_svfiprintf_r+0x1b2>
 8000e7e:	9b03      	ldr	r3, [sp, #12]
 8000e80:	3307      	adds	r3, #7
 8000e82:	f023 0307 	bic.w	r3, r3, #7
 8000e86:	3308      	adds	r3, #8
 8000e88:	9303      	str	r3, [sp, #12]
 8000e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e8c:	4433      	add	r3, r6
 8000e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8000e90:	e767      	b.n	8000d62 <_svfiprintf_r+0x4e>
 8000e92:	460c      	mov	r4, r1
 8000e94:	2001      	movs	r0, #1
 8000e96:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e9a:	e7a5      	b.n	8000de8 <_svfiprintf_r+0xd4>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f04f 0c0a 	mov.w	ip, #10
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	3401      	adds	r4, #1
 8000ea6:	9305      	str	r3, [sp, #20]
 8000ea8:	4620      	mov	r0, r4
 8000eaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000eae:	3a30      	subs	r2, #48	; 0x30
 8000eb0:	2a09      	cmp	r2, #9
 8000eb2:	d903      	bls.n	8000ebc <_svfiprintf_r+0x1a8>
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d0c5      	beq.n	8000e44 <_svfiprintf_r+0x130>
 8000eb8:	9105      	str	r1, [sp, #20]
 8000eba:	e7c3      	b.n	8000e44 <_svfiprintf_r+0x130>
 8000ebc:	4604      	mov	r4, r0
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ec4:	e7f0      	b.n	8000ea8 <_svfiprintf_r+0x194>
 8000ec6:	ab03      	add	r3, sp, #12
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	462a      	mov	r2, r5
 8000ecc:	4638      	mov	r0, r7
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <_svfiprintf_r+0x1fc>)
 8000ed0:	a904      	add	r1, sp, #16
 8000ed2:	f3af 8000 	nop.w
 8000ed6:	1c42      	adds	r2, r0, #1
 8000ed8:	4606      	mov	r6, r0
 8000eda:	d1d6      	bne.n	8000e8a <_svfiprintf_r+0x176>
 8000edc:	89ab      	ldrh	r3, [r5, #12]
 8000ede:	065b      	lsls	r3, r3, #25
 8000ee0:	f53f af2c 	bmi.w	8000d3c <_svfiprintf_r+0x28>
 8000ee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000ee6:	b01d      	add	sp, #116	; 0x74
 8000ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000eec:	ab03      	add	r3, sp, #12
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	462a      	mov	r2, r5
 8000ef2:	4638      	mov	r0, r7
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <_svfiprintf_r+0x1fc>)
 8000ef6:	a904      	add	r1, sp, #16
 8000ef8:	f000 fa50 	bl	800139c <_printf_i>
 8000efc:	e7eb      	b.n	8000ed6 <_svfiprintf_r+0x1c2>
 8000efe:	bf00      	nop
 8000f00:	08001f34 	.word	0x08001f34
 8000f04:	08001f3a 	.word	0x08001f3a
 8000f08:	08001f3e 	.word	0x08001f3e
 8000f0c:	00000000 	.word	0x00000000
 8000f10:	08000c5d 	.word	0x08000c5d

08000f14 <_sungetc_r>:
 8000f14:	b538      	push	{r3, r4, r5, lr}
 8000f16:	1c4b      	adds	r3, r1, #1
 8000f18:	4614      	mov	r4, r2
 8000f1a:	d103      	bne.n	8000f24 <_sungetc_r+0x10>
 8000f1c:	f04f 35ff 	mov.w	r5, #4294967295
 8000f20:	4628      	mov	r0, r5
 8000f22:	bd38      	pop	{r3, r4, r5, pc}
 8000f24:	8993      	ldrh	r3, [r2, #12]
 8000f26:	b2cd      	uxtb	r5, r1
 8000f28:	f023 0320 	bic.w	r3, r3, #32
 8000f2c:	8193      	strh	r3, [r2, #12]
 8000f2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000f30:	6852      	ldr	r2, [r2, #4]
 8000f32:	b18b      	cbz	r3, 8000f58 <_sungetc_r+0x44>
 8000f34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000f36:	4293      	cmp	r3, r2
 8000f38:	dd08      	ble.n	8000f4c <_sungetc_r+0x38>
 8000f3a:	6823      	ldr	r3, [r4, #0]
 8000f3c:	1e5a      	subs	r2, r3, #1
 8000f3e:	6022      	str	r2, [r4, #0]
 8000f40:	f803 5c01 	strb.w	r5, [r3, #-1]
 8000f44:	6863      	ldr	r3, [r4, #4]
 8000f46:	3301      	adds	r3, #1
 8000f48:	6063      	str	r3, [r4, #4]
 8000f4a:	e7e9      	b.n	8000f20 <_sungetc_r+0xc>
 8000f4c:	4621      	mov	r1, r4
 8000f4e:	f000 fdc7 	bl	8001ae0 <__submore>
 8000f52:	2800      	cmp	r0, #0
 8000f54:	d0f1      	beq.n	8000f3a <_sungetc_r+0x26>
 8000f56:	e7e1      	b.n	8000f1c <_sungetc_r+0x8>
 8000f58:	6921      	ldr	r1, [r4, #16]
 8000f5a:	6823      	ldr	r3, [r4, #0]
 8000f5c:	b151      	cbz	r1, 8000f74 <_sungetc_r+0x60>
 8000f5e:	4299      	cmp	r1, r3
 8000f60:	d208      	bcs.n	8000f74 <_sungetc_r+0x60>
 8000f62:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8000f66:	42a9      	cmp	r1, r5
 8000f68:	d104      	bne.n	8000f74 <_sungetc_r+0x60>
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	3201      	adds	r2, #1
 8000f6e:	6023      	str	r3, [r4, #0]
 8000f70:	6062      	str	r2, [r4, #4]
 8000f72:	e7d5      	b.n	8000f20 <_sungetc_r+0xc>
 8000f74:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8000f78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000f7c:	6363      	str	r3, [r4, #52]	; 0x34
 8000f7e:	2303      	movs	r3, #3
 8000f80:	63a3      	str	r3, [r4, #56]	; 0x38
 8000f82:	4623      	mov	r3, r4
 8000f84:	f803 5f46 	strb.w	r5, [r3, #70]!
 8000f88:	6023      	str	r3, [r4, #0]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e7dc      	b.n	8000f48 <_sungetc_r+0x34>

08000f8e <__ssrefill_r>:
 8000f8e:	b510      	push	{r4, lr}
 8000f90:	460c      	mov	r4, r1
 8000f92:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8000f94:	b169      	cbz	r1, 8000fb2 <__ssrefill_r+0x24>
 8000f96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d001      	beq.n	8000fa2 <__ssrefill_r+0x14>
 8000f9e:	f000 fe0f 	bl	8001bc0 <_free_r>
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fa6:	6360      	str	r0, [r4, #52]	; 0x34
 8000fa8:	6063      	str	r3, [r4, #4]
 8000faa:	b113      	cbz	r3, 8000fb2 <__ssrefill_r+0x24>
 8000fac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000fae:	6023      	str	r3, [r4, #0]
 8000fb0:	bd10      	pop	{r4, pc}
 8000fb2:	6923      	ldr	r3, [r4, #16]
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	6023      	str	r3, [r4, #0]
 8000fba:	2300      	movs	r3, #0
 8000fbc:	6063      	str	r3, [r4, #4]
 8000fbe:	89a3      	ldrh	r3, [r4, #12]
 8000fc0:	f043 0320 	orr.w	r3, r3, #32
 8000fc4:	81a3      	strh	r3, [r4, #12]
 8000fc6:	e7f3      	b.n	8000fb0 <__ssrefill_r+0x22>

08000fc8 <__ssvfiscanf_r>:
 8000fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fcc:	460c      	mov	r4, r1
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8000fd6:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8000fda:	49a7      	ldr	r1, [pc, #668]	; (8001278 <__ssvfiscanf_r+0x2b0>)
 8000fdc:	f10d 0804 	add.w	r8, sp, #4
 8000fe0:	91a0      	str	r1, [sp, #640]	; 0x280
 8000fe2:	49a6      	ldr	r1, [pc, #664]	; (800127c <__ssvfiscanf_r+0x2b4>)
 8000fe4:	4fa6      	ldr	r7, [pc, #664]	; (8001280 <__ssvfiscanf_r+0x2b8>)
 8000fe6:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8001284 <__ssvfiscanf_r+0x2bc>
 8000fea:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8000fee:	91a1      	str	r1, [sp, #644]	; 0x284
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	7813      	ldrb	r3, [r2, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	f000 815c 	beq.w	80012b2 <__ssvfiscanf_r+0x2ea>
 8000ffa:	5dd9      	ldrb	r1, [r3, r7]
 8000ffc:	1c55      	adds	r5, r2, #1
 8000ffe:	f011 0108 	ands.w	r1, r1, #8
 8001002:	d019      	beq.n	8001038 <__ssvfiscanf_r+0x70>
 8001004:	6863      	ldr	r3, [r4, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	dd0f      	ble.n	800102a <__ssvfiscanf_r+0x62>
 800100a:	6823      	ldr	r3, [r4, #0]
 800100c:	781a      	ldrb	r2, [r3, #0]
 800100e:	5cba      	ldrb	r2, [r7, r2]
 8001010:	0712      	lsls	r2, r2, #28
 8001012:	d401      	bmi.n	8001018 <__ssvfiscanf_r+0x50>
 8001014:	462a      	mov	r2, r5
 8001016:	e7ec      	b.n	8000ff2 <__ssvfiscanf_r+0x2a>
 8001018:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800101a:	3301      	adds	r3, #1
 800101c:	3201      	adds	r2, #1
 800101e:	9245      	str	r2, [sp, #276]	; 0x114
 8001020:	6862      	ldr	r2, [r4, #4]
 8001022:	6023      	str	r3, [r4, #0]
 8001024:	3a01      	subs	r2, #1
 8001026:	6062      	str	r2, [r4, #4]
 8001028:	e7ec      	b.n	8001004 <__ssvfiscanf_r+0x3c>
 800102a:	4621      	mov	r1, r4
 800102c:	4630      	mov	r0, r6
 800102e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8001030:	4798      	blx	r3
 8001032:	2800      	cmp	r0, #0
 8001034:	d0e9      	beq.n	800100a <__ssvfiscanf_r+0x42>
 8001036:	e7ed      	b.n	8001014 <__ssvfiscanf_r+0x4c>
 8001038:	2b25      	cmp	r3, #37	; 0x25
 800103a:	d012      	beq.n	8001062 <__ssvfiscanf_r+0x9a>
 800103c:	469a      	mov	sl, r3
 800103e:	6863      	ldr	r3, [r4, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	f340 8094 	ble.w	800116e <__ssvfiscanf_r+0x1a6>
 8001046:	6822      	ldr	r2, [r4, #0]
 8001048:	7813      	ldrb	r3, [r2, #0]
 800104a:	4553      	cmp	r3, sl
 800104c:	f040 8131 	bne.w	80012b2 <__ssvfiscanf_r+0x2ea>
 8001050:	6863      	ldr	r3, [r4, #4]
 8001052:	3201      	adds	r2, #1
 8001054:	3b01      	subs	r3, #1
 8001056:	6063      	str	r3, [r4, #4]
 8001058:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800105a:	6022      	str	r2, [r4, #0]
 800105c:	3301      	adds	r3, #1
 800105e:	9345      	str	r3, [sp, #276]	; 0x114
 8001060:	e7d8      	b.n	8001014 <__ssvfiscanf_r+0x4c>
 8001062:	9141      	str	r1, [sp, #260]	; 0x104
 8001064:	9143      	str	r1, [sp, #268]	; 0x10c
 8001066:	7853      	ldrb	r3, [r2, #1]
 8001068:	2b2a      	cmp	r3, #42	; 0x2a
 800106a:	bf04      	itt	eq
 800106c:	2310      	moveq	r3, #16
 800106e:	1c95      	addeq	r5, r2, #2
 8001070:	f04f 020a 	mov.w	r2, #10
 8001074:	bf08      	it	eq
 8001076:	9341      	streq	r3, [sp, #260]	; 0x104
 8001078:	46aa      	mov	sl, r5
 800107a:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800107e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8001082:	2b09      	cmp	r3, #9
 8001084:	d91d      	bls.n	80010c2 <__ssvfiscanf_r+0xfa>
 8001086:	2203      	movs	r2, #3
 8001088:	487e      	ldr	r0, [pc, #504]	; (8001284 <__ssvfiscanf_r+0x2bc>)
 800108a:	f000 fd63 	bl	8001b54 <memchr>
 800108e:	b140      	cbz	r0, 80010a2 <__ssvfiscanf_r+0xda>
 8001090:	2301      	movs	r3, #1
 8001092:	4655      	mov	r5, sl
 8001094:	eba0 0009 	sub.w	r0, r0, r9
 8001098:	fa03 f000 	lsl.w	r0, r3, r0
 800109c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800109e:	4318      	orrs	r0, r3
 80010a0:	9041      	str	r0, [sp, #260]	; 0x104
 80010a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80010a6:	2b78      	cmp	r3, #120	; 0x78
 80010a8:	d806      	bhi.n	80010b8 <__ssvfiscanf_r+0xf0>
 80010aa:	2b57      	cmp	r3, #87	; 0x57
 80010ac:	d810      	bhi.n	80010d0 <__ssvfiscanf_r+0x108>
 80010ae:	2b25      	cmp	r3, #37	; 0x25
 80010b0:	d0c4      	beq.n	800103c <__ssvfiscanf_r+0x74>
 80010b2:	d857      	bhi.n	8001164 <__ssvfiscanf_r+0x19c>
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d065      	beq.n	8001184 <__ssvfiscanf_r+0x1bc>
 80010b8:	2303      	movs	r3, #3
 80010ba:	9347      	str	r3, [sp, #284]	; 0x11c
 80010bc:	230a      	movs	r3, #10
 80010be:	9342      	str	r3, [sp, #264]	; 0x108
 80010c0:	e072      	b.n	80011a8 <__ssvfiscanf_r+0x1e0>
 80010c2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80010c4:	4655      	mov	r5, sl
 80010c6:	fb02 1103 	mla	r1, r2, r3, r1
 80010ca:	3930      	subs	r1, #48	; 0x30
 80010cc:	9143      	str	r1, [sp, #268]	; 0x10c
 80010ce:	e7d3      	b.n	8001078 <__ssvfiscanf_r+0xb0>
 80010d0:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80010d4:	2a20      	cmp	r2, #32
 80010d6:	d8ef      	bhi.n	80010b8 <__ssvfiscanf_r+0xf0>
 80010d8:	a101      	add	r1, pc, #4	; (adr r1, 80010e0 <__ssvfiscanf_r+0x118>)
 80010da:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80010de:	bf00      	nop
 80010e0:	08001193 	.word	0x08001193
 80010e4:	080010b9 	.word	0x080010b9
 80010e8:	080010b9 	.word	0x080010b9
 80010ec:	080011f1 	.word	0x080011f1
 80010f0:	080010b9 	.word	0x080010b9
 80010f4:	080010b9 	.word	0x080010b9
 80010f8:	080010b9 	.word	0x080010b9
 80010fc:	080010b9 	.word	0x080010b9
 8001100:	080010b9 	.word	0x080010b9
 8001104:	080010b9 	.word	0x080010b9
 8001108:	080010b9 	.word	0x080010b9
 800110c:	08001207 	.word	0x08001207
 8001110:	080011dd 	.word	0x080011dd
 8001114:	0800116b 	.word	0x0800116b
 8001118:	0800116b 	.word	0x0800116b
 800111c:	0800116b 	.word	0x0800116b
 8001120:	080010b9 	.word	0x080010b9
 8001124:	080011e1 	.word	0x080011e1
 8001128:	080010b9 	.word	0x080010b9
 800112c:	080010b9 	.word	0x080010b9
 8001130:	080010b9 	.word	0x080010b9
 8001134:	080010b9 	.word	0x080010b9
 8001138:	08001217 	.word	0x08001217
 800113c:	080011e9 	.word	0x080011e9
 8001140:	0800118b 	.word	0x0800118b
 8001144:	080010b9 	.word	0x080010b9
 8001148:	080010b9 	.word	0x080010b9
 800114c:	08001213 	.word	0x08001213
 8001150:	080010b9 	.word	0x080010b9
 8001154:	080011dd 	.word	0x080011dd
 8001158:	080010b9 	.word	0x080010b9
 800115c:	080010b9 	.word	0x080010b9
 8001160:	08001193 	.word	0x08001193
 8001164:	3b45      	subs	r3, #69	; 0x45
 8001166:	2b02      	cmp	r3, #2
 8001168:	d8a6      	bhi.n	80010b8 <__ssvfiscanf_r+0xf0>
 800116a:	2305      	movs	r3, #5
 800116c:	e01b      	b.n	80011a6 <__ssvfiscanf_r+0x1de>
 800116e:	4621      	mov	r1, r4
 8001170:	4630      	mov	r0, r6
 8001172:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8001174:	4798      	blx	r3
 8001176:	2800      	cmp	r0, #0
 8001178:	f43f af65 	beq.w	8001046 <__ssvfiscanf_r+0x7e>
 800117c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800117e:	2800      	cmp	r0, #0
 8001180:	f040 808d 	bne.w	800129e <__ssvfiscanf_r+0x2d6>
 8001184:	f04f 30ff 	mov.w	r0, #4294967295
 8001188:	e08f      	b.n	80012aa <__ssvfiscanf_r+0x2e2>
 800118a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800118c:	f042 0220 	orr.w	r2, r2, #32
 8001190:	9241      	str	r2, [sp, #260]	; 0x104
 8001192:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8001194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001198:	9241      	str	r2, [sp, #260]	; 0x104
 800119a:	2210      	movs	r2, #16
 800119c:	2b6f      	cmp	r3, #111	; 0x6f
 800119e:	bf34      	ite	cc
 80011a0:	2303      	movcc	r3, #3
 80011a2:	2304      	movcs	r3, #4
 80011a4:	9242      	str	r2, [sp, #264]	; 0x108
 80011a6:	9347      	str	r3, [sp, #284]	; 0x11c
 80011a8:	6863      	ldr	r3, [r4, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	dd42      	ble.n	8001234 <__ssvfiscanf_r+0x26c>
 80011ae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80011b0:	0659      	lsls	r1, r3, #25
 80011b2:	d404      	bmi.n	80011be <__ssvfiscanf_r+0x1f6>
 80011b4:	6823      	ldr	r3, [r4, #0]
 80011b6:	781a      	ldrb	r2, [r3, #0]
 80011b8:	5cba      	ldrb	r2, [r7, r2]
 80011ba:	0712      	lsls	r2, r2, #28
 80011bc:	d441      	bmi.n	8001242 <__ssvfiscanf_r+0x27a>
 80011be:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	dc50      	bgt.n	8001266 <__ssvfiscanf_r+0x29e>
 80011c4:	466b      	mov	r3, sp
 80011c6:	4622      	mov	r2, r4
 80011c8:	4630      	mov	r0, r6
 80011ca:	a941      	add	r1, sp, #260	; 0x104
 80011cc:	f000 fa0c 	bl	80015e8 <_scanf_chars>
 80011d0:	2801      	cmp	r0, #1
 80011d2:	d06e      	beq.n	80012b2 <__ssvfiscanf_r+0x2ea>
 80011d4:	2802      	cmp	r0, #2
 80011d6:	f47f af1d 	bne.w	8001014 <__ssvfiscanf_r+0x4c>
 80011da:	e7cf      	b.n	800117c <__ssvfiscanf_r+0x1b4>
 80011dc:	220a      	movs	r2, #10
 80011de:	e7dd      	b.n	800119c <__ssvfiscanf_r+0x1d4>
 80011e0:	2300      	movs	r3, #0
 80011e2:	9342      	str	r3, [sp, #264]	; 0x108
 80011e4:	2303      	movs	r3, #3
 80011e6:	e7de      	b.n	80011a6 <__ssvfiscanf_r+0x1de>
 80011e8:	2308      	movs	r3, #8
 80011ea:	9342      	str	r3, [sp, #264]	; 0x108
 80011ec:	2304      	movs	r3, #4
 80011ee:	e7da      	b.n	80011a6 <__ssvfiscanf_r+0x1de>
 80011f0:	4629      	mov	r1, r5
 80011f2:	4640      	mov	r0, r8
 80011f4:	f000 fb4a 	bl	800188c <__sccl>
 80011f8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80011fa:	4605      	mov	r5, r0
 80011fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001200:	9341      	str	r3, [sp, #260]	; 0x104
 8001202:	2301      	movs	r3, #1
 8001204:	e7cf      	b.n	80011a6 <__ssvfiscanf_r+0x1de>
 8001206:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8001208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800120c:	9341      	str	r3, [sp, #260]	; 0x104
 800120e:	2300      	movs	r3, #0
 8001210:	e7c9      	b.n	80011a6 <__ssvfiscanf_r+0x1de>
 8001212:	2302      	movs	r3, #2
 8001214:	e7c7      	b.n	80011a6 <__ssvfiscanf_r+0x1de>
 8001216:	9841      	ldr	r0, [sp, #260]	; 0x104
 8001218:	06c3      	lsls	r3, r0, #27
 800121a:	f53f aefb 	bmi.w	8001014 <__ssvfiscanf_r+0x4c>
 800121e:	9b00      	ldr	r3, [sp, #0]
 8001220:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8001222:	1d19      	adds	r1, r3, #4
 8001224:	9100      	str	r1, [sp, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f010 0f01 	tst.w	r0, #1
 800122c:	bf14      	ite	ne
 800122e:	801a      	strhne	r2, [r3, #0]
 8001230:	601a      	streq	r2, [r3, #0]
 8001232:	e6ef      	b.n	8001014 <__ssvfiscanf_r+0x4c>
 8001234:	4621      	mov	r1, r4
 8001236:	4630      	mov	r0, r6
 8001238:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800123a:	4798      	blx	r3
 800123c:	2800      	cmp	r0, #0
 800123e:	d0b6      	beq.n	80011ae <__ssvfiscanf_r+0x1e6>
 8001240:	e79c      	b.n	800117c <__ssvfiscanf_r+0x1b4>
 8001242:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8001244:	3201      	adds	r2, #1
 8001246:	9245      	str	r2, [sp, #276]	; 0x114
 8001248:	6862      	ldr	r2, [r4, #4]
 800124a:	3a01      	subs	r2, #1
 800124c:	2a00      	cmp	r2, #0
 800124e:	6062      	str	r2, [r4, #4]
 8001250:	dd02      	ble.n	8001258 <__ssvfiscanf_r+0x290>
 8001252:	3301      	adds	r3, #1
 8001254:	6023      	str	r3, [r4, #0]
 8001256:	e7ad      	b.n	80011b4 <__ssvfiscanf_r+0x1ec>
 8001258:	4621      	mov	r1, r4
 800125a:	4630      	mov	r0, r6
 800125c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800125e:	4798      	blx	r3
 8001260:	2800      	cmp	r0, #0
 8001262:	d0a7      	beq.n	80011b4 <__ssvfiscanf_r+0x1ec>
 8001264:	e78a      	b.n	800117c <__ssvfiscanf_r+0x1b4>
 8001266:	2b04      	cmp	r3, #4
 8001268:	dc0e      	bgt.n	8001288 <__ssvfiscanf_r+0x2c0>
 800126a:	466b      	mov	r3, sp
 800126c:	4622      	mov	r2, r4
 800126e:	4630      	mov	r0, r6
 8001270:	a941      	add	r1, sp, #260	; 0x104
 8001272:	f000 fa13 	bl	800169c <_scanf_i>
 8001276:	e7ab      	b.n	80011d0 <__ssvfiscanf_r+0x208>
 8001278:	08000f15 	.word	0x08000f15
 800127c:	08000f8f 	.word	0x08000f8f
 8001280:	08001f83 	.word	0x08001f83
 8001284:	08001f3a 	.word	0x08001f3a
 8001288:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <__ssvfiscanf_r+0x2f0>)
 800128a:	2b00      	cmp	r3, #0
 800128c:	f43f aec2 	beq.w	8001014 <__ssvfiscanf_r+0x4c>
 8001290:	466b      	mov	r3, sp
 8001292:	4622      	mov	r2, r4
 8001294:	4630      	mov	r0, r6
 8001296:	a941      	add	r1, sp, #260	; 0x104
 8001298:	f3af 8000 	nop.w
 800129c:	e798      	b.n	80011d0 <__ssvfiscanf_r+0x208>
 800129e:	89a3      	ldrh	r3, [r4, #12]
 80012a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80012a4:	bf18      	it	ne
 80012a6:	f04f 30ff 	movne.w	r0, #4294967295
 80012aa:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80012ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012b2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80012b4:	e7f9      	b.n	80012aa <__ssvfiscanf_r+0x2e2>
 80012b6:	bf00      	nop
 80012b8:	00000000 	.word	0x00000000

080012bc <_printf_common>:
 80012bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012c0:	4616      	mov	r6, r2
 80012c2:	4699      	mov	r9, r3
 80012c4:	688a      	ldr	r2, [r1, #8]
 80012c6:	690b      	ldr	r3, [r1, #16]
 80012c8:	4607      	mov	r7, r0
 80012ca:	4293      	cmp	r3, r2
 80012cc:	bfb8      	it	lt
 80012ce:	4613      	movlt	r3, r2
 80012d0:	6033      	str	r3, [r6, #0]
 80012d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80012d6:	460c      	mov	r4, r1
 80012d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80012dc:	b10a      	cbz	r2, 80012e2 <_printf_common+0x26>
 80012de:	3301      	adds	r3, #1
 80012e0:	6033      	str	r3, [r6, #0]
 80012e2:	6823      	ldr	r3, [r4, #0]
 80012e4:	0699      	lsls	r1, r3, #26
 80012e6:	bf42      	ittt	mi
 80012e8:	6833      	ldrmi	r3, [r6, #0]
 80012ea:	3302      	addmi	r3, #2
 80012ec:	6033      	strmi	r3, [r6, #0]
 80012ee:	6825      	ldr	r5, [r4, #0]
 80012f0:	f015 0506 	ands.w	r5, r5, #6
 80012f4:	d106      	bne.n	8001304 <_printf_common+0x48>
 80012f6:	f104 0a19 	add.w	sl, r4, #25
 80012fa:	68e3      	ldr	r3, [r4, #12]
 80012fc:	6832      	ldr	r2, [r6, #0]
 80012fe:	1a9b      	subs	r3, r3, r2
 8001300:	42ab      	cmp	r3, r5
 8001302:	dc28      	bgt.n	8001356 <_printf_common+0x9a>
 8001304:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001308:	1e13      	subs	r3, r2, #0
 800130a:	6822      	ldr	r2, [r4, #0]
 800130c:	bf18      	it	ne
 800130e:	2301      	movne	r3, #1
 8001310:	0692      	lsls	r2, r2, #26
 8001312:	d42d      	bmi.n	8001370 <_printf_common+0xb4>
 8001314:	4649      	mov	r1, r9
 8001316:	4638      	mov	r0, r7
 8001318:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800131c:	47c0      	blx	r8
 800131e:	3001      	adds	r0, #1
 8001320:	d020      	beq.n	8001364 <_printf_common+0xa8>
 8001322:	6823      	ldr	r3, [r4, #0]
 8001324:	68e5      	ldr	r5, [r4, #12]
 8001326:	f003 0306 	and.w	r3, r3, #6
 800132a:	2b04      	cmp	r3, #4
 800132c:	bf18      	it	ne
 800132e:	2500      	movne	r5, #0
 8001330:	6832      	ldr	r2, [r6, #0]
 8001332:	f04f 0600 	mov.w	r6, #0
 8001336:	68a3      	ldr	r3, [r4, #8]
 8001338:	bf08      	it	eq
 800133a:	1aad      	subeq	r5, r5, r2
 800133c:	6922      	ldr	r2, [r4, #16]
 800133e:	bf08      	it	eq
 8001340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001344:	4293      	cmp	r3, r2
 8001346:	bfc4      	itt	gt
 8001348:	1a9b      	subgt	r3, r3, r2
 800134a:	18ed      	addgt	r5, r5, r3
 800134c:	341a      	adds	r4, #26
 800134e:	42b5      	cmp	r5, r6
 8001350:	d11a      	bne.n	8001388 <_printf_common+0xcc>
 8001352:	2000      	movs	r0, #0
 8001354:	e008      	b.n	8001368 <_printf_common+0xac>
 8001356:	2301      	movs	r3, #1
 8001358:	4652      	mov	r2, sl
 800135a:	4649      	mov	r1, r9
 800135c:	4638      	mov	r0, r7
 800135e:	47c0      	blx	r8
 8001360:	3001      	adds	r0, #1
 8001362:	d103      	bne.n	800136c <_printf_common+0xb0>
 8001364:	f04f 30ff 	mov.w	r0, #4294967295
 8001368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800136c:	3501      	adds	r5, #1
 800136e:	e7c4      	b.n	80012fa <_printf_common+0x3e>
 8001370:	2030      	movs	r0, #48	; 0x30
 8001372:	18e1      	adds	r1, r4, r3
 8001374:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001378:	1c5a      	adds	r2, r3, #1
 800137a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800137e:	4422      	add	r2, r4
 8001380:	3302      	adds	r3, #2
 8001382:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001386:	e7c5      	b.n	8001314 <_printf_common+0x58>
 8001388:	2301      	movs	r3, #1
 800138a:	4622      	mov	r2, r4
 800138c:	4649      	mov	r1, r9
 800138e:	4638      	mov	r0, r7
 8001390:	47c0      	blx	r8
 8001392:	3001      	adds	r0, #1
 8001394:	d0e6      	beq.n	8001364 <_printf_common+0xa8>
 8001396:	3601      	adds	r6, #1
 8001398:	e7d9      	b.n	800134e <_printf_common+0x92>
	...

0800139c <_printf_i>:
 800139c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80013a0:	7e0f      	ldrb	r7, [r1, #24]
 80013a2:	4691      	mov	r9, r2
 80013a4:	2f78      	cmp	r7, #120	; 0x78
 80013a6:	4680      	mov	r8, r0
 80013a8:	460c      	mov	r4, r1
 80013aa:	469a      	mov	sl, r3
 80013ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80013ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80013b2:	d807      	bhi.n	80013c4 <_printf_i+0x28>
 80013b4:	2f62      	cmp	r7, #98	; 0x62
 80013b6:	d80a      	bhi.n	80013ce <_printf_i+0x32>
 80013b8:	2f00      	cmp	r7, #0
 80013ba:	f000 80d9 	beq.w	8001570 <_printf_i+0x1d4>
 80013be:	2f58      	cmp	r7, #88	; 0x58
 80013c0:	f000 80a4 	beq.w	800150c <_printf_i+0x170>
 80013c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80013c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80013cc:	e03a      	b.n	8001444 <_printf_i+0xa8>
 80013ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80013d2:	2b15      	cmp	r3, #21
 80013d4:	d8f6      	bhi.n	80013c4 <_printf_i+0x28>
 80013d6:	a101      	add	r1, pc, #4	; (adr r1, 80013dc <_printf_i+0x40>)
 80013d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80013dc:	08001435 	.word	0x08001435
 80013e0:	08001449 	.word	0x08001449
 80013e4:	080013c5 	.word	0x080013c5
 80013e8:	080013c5 	.word	0x080013c5
 80013ec:	080013c5 	.word	0x080013c5
 80013f0:	080013c5 	.word	0x080013c5
 80013f4:	08001449 	.word	0x08001449
 80013f8:	080013c5 	.word	0x080013c5
 80013fc:	080013c5 	.word	0x080013c5
 8001400:	080013c5 	.word	0x080013c5
 8001404:	080013c5 	.word	0x080013c5
 8001408:	08001557 	.word	0x08001557
 800140c:	08001479 	.word	0x08001479
 8001410:	08001539 	.word	0x08001539
 8001414:	080013c5 	.word	0x080013c5
 8001418:	080013c5 	.word	0x080013c5
 800141c:	08001579 	.word	0x08001579
 8001420:	080013c5 	.word	0x080013c5
 8001424:	08001479 	.word	0x08001479
 8001428:	080013c5 	.word	0x080013c5
 800142c:	080013c5 	.word	0x080013c5
 8001430:	08001541 	.word	0x08001541
 8001434:	682b      	ldr	r3, [r5, #0]
 8001436:	1d1a      	adds	r2, r3, #4
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	602a      	str	r2, [r5, #0]
 800143c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001440:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001444:	2301      	movs	r3, #1
 8001446:	e0a4      	b.n	8001592 <_printf_i+0x1f6>
 8001448:	6820      	ldr	r0, [r4, #0]
 800144a:	6829      	ldr	r1, [r5, #0]
 800144c:	0606      	lsls	r6, r0, #24
 800144e:	f101 0304 	add.w	r3, r1, #4
 8001452:	d50a      	bpl.n	800146a <_printf_i+0xce>
 8001454:	680e      	ldr	r6, [r1, #0]
 8001456:	602b      	str	r3, [r5, #0]
 8001458:	2e00      	cmp	r6, #0
 800145a:	da03      	bge.n	8001464 <_printf_i+0xc8>
 800145c:	232d      	movs	r3, #45	; 0x2d
 800145e:	4276      	negs	r6, r6
 8001460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001464:	230a      	movs	r3, #10
 8001466:	485e      	ldr	r0, [pc, #376]	; (80015e0 <_printf_i+0x244>)
 8001468:	e019      	b.n	800149e <_printf_i+0x102>
 800146a:	680e      	ldr	r6, [r1, #0]
 800146c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001470:	602b      	str	r3, [r5, #0]
 8001472:	bf18      	it	ne
 8001474:	b236      	sxthne	r6, r6
 8001476:	e7ef      	b.n	8001458 <_printf_i+0xbc>
 8001478:	682b      	ldr	r3, [r5, #0]
 800147a:	6820      	ldr	r0, [r4, #0]
 800147c:	1d19      	adds	r1, r3, #4
 800147e:	6029      	str	r1, [r5, #0]
 8001480:	0601      	lsls	r1, r0, #24
 8001482:	d501      	bpl.n	8001488 <_printf_i+0xec>
 8001484:	681e      	ldr	r6, [r3, #0]
 8001486:	e002      	b.n	800148e <_printf_i+0xf2>
 8001488:	0646      	lsls	r6, r0, #25
 800148a:	d5fb      	bpl.n	8001484 <_printf_i+0xe8>
 800148c:	881e      	ldrh	r6, [r3, #0]
 800148e:	2f6f      	cmp	r7, #111	; 0x6f
 8001490:	bf0c      	ite	eq
 8001492:	2308      	moveq	r3, #8
 8001494:	230a      	movne	r3, #10
 8001496:	4852      	ldr	r0, [pc, #328]	; (80015e0 <_printf_i+0x244>)
 8001498:	2100      	movs	r1, #0
 800149a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800149e:	6865      	ldr	r5, [r4, #4]
 80014a0:	2d00      	cmp	r5, #0
 80014a2:	bfa8      	it	ge
 80014a4:	6821      	ldrge	r1, [r4, #0]
 80014a6:	60a5      	str	r5, [r4, #8]
 80014a8:	bfa4      	itt	ge
 80014aa:	f021 0104 	bicge.w	r1, r1, #4
 80014ae:	6021      	strge	r1, [r4, #0]
 80014b0:	b90e      	cbnz	r6, 80014b6 <_printf_i+0x11a>
 80014b2:	2d00      	cmp	r5, #0
 80014b4:	d04d      	beq.n	8001552 <_printf_i+0x1b6>
 80014b6:	4615      	mov	r5, r2
 80014b8:	fbb6 f1f3 	udiv	r1, r6, r3
 80014bc:	fb03 6711 	mls	r7, r3, r1, r6
 80014c0:	5dc7      	ldrb	r7, [r0, r7]
 80014c2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80014c6:	4637      	mov	r7, r6
 80014c8:	42bb      	cmp	r3, r7
 80014ca:	460e      	mov	r6, r1
 80014cc:	d9f4      	bls.n	80014b8 <_printf_i+0x11c>
 80014ce:	2b08      	cmp	r3, #8
 80014d0:	d10b      	bne.n	80014ea <_printf_i+0x14e>
 80014d2:	6823      	ldr	r3, [r4, #0]
 80014d4:	07de      	lsls	r6, r3, #31
 80014d6:	d508      	bpl.n	80014ea <_printf_i+0x14e>
 80014d8:	6923      	ldr	r3, [r4, #16]
 80014da:	6861      	ldr	r1, [r4, #4]
 80014dc:	4299      	cmp	r1, r3
 80014de:	bfde      	ittt	le
 80014e0:	2330      	movle	r3, #48	; 0x30
 80014e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80014e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80014ea:	1b52      	subs	r2, r2, r5
 80014ec:	6122      	str	r2, [r4, #16]
 80014ee:	464b      	mov	r3, r9
 80014f0:	4621      	mov	r1, r4
 80014f2:	4640      	mov	r0, r8
 80014f4:	f8cd a000 	str.w	sl, [sp]
 80014f8:	aa03      	add	r2, sp, #12
 80014fa:	f7ff fedf 	bl	80012bc <_printf_common>
 80014fe:	3001      	adds	r0, #1
 8001500:	d14c      	bne.n	800159c <_printf_i+0x200>
 8001502:	f04f 30ff 	mov.w	r0, #4294967295
 8001506:	b004      	add	sp, #16
 8001508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800150c:	4834      	ldr	r0, [pc, #208]	; (80015e0 <_printf_i+0x244>)
 800150e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001512:	6829      	ldr	r1, [r5, #0]
 8001514:	6823      	ldr	r3, [r4, #0]
 8001516:	f851 6b04 	ldr.w	r6, [r1], #4
 800151a:	6029      	str	r1, [r5, #0]
 800151c:	061d      	lsls	r5, r3, #24
 800151e:	d514      	bpl.n	800154a <_printf_i+0x1ae>
 8001520:	07df      	lsls	r7, r3, #31
 8001522:	bf44      	itt	mi
 8001524:	f043 0320 	orrmi.w	r3, r3, #32
 8001528:	6023      	strmi	r3, [r4, #0]
 800152a:	b91e      	cbnz	r6, 8001534 <_printf_i+0x198>
 800152c:	6823      	ldr	r3, [r4, #0]
 800152e:	f023 0320 	bic.w	r3, r3, #32
 8001532:	6023      	str	r3, [r4, #0]
 8001534:	2310      	movs	r3, #16
 8001536:	e7af      	b.n	8001498 <_printf_i+0xfc>
 8001538:	6823      	ldr	r3, [r4, #0]
 800153a:	f043 0320 	orr.w	r3, r3, #32
 800153e:	6023      	str	r3, [r4, #0]
 8001540:	2378      	movs	r3, #120	; 0x78
 8001542:	4828      	ldr	r0, [pc, #160]	; (80015e4 <_printf_i+0x248>)
 8001544:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001548:	e7e3      	b.n	8001512 <_printf_i+0x176>
 800154a:	0659      	lsls	r1, r3, #25
 800154c:	bf48      	it	mi
 800154e:	b2b6      	uxthmi	r6, r6
 8001550:	e7e6      	b.n	8001520 <_printf_i+0x184>
 8001552:	4615      	mov	r5, r2
 8001554:	e7bb      	b.n	80014ce <_printf_i+0x132>
 8001556:	682b      	ldr	r3, [r5, #0]
 8001558:	6826      	ldr	r6, [r4, #0]
 800155a:	1d18      	adds	r0, r3, #4
 800155c:	6961      	ldr	r1, [r4, #20]
 800155e:	6028      	str	r0, [r5, #0]
 8001560:	0635      	lsls	r5, r6, #24
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	d501      	bpl.n	800156a <_printf_i+0x1ce>
 8001566:	6019      	str	r1, [r3, #0]
 8001568:	e002      	b.n	8001570 <_printf_i+0x1d4>
 800156a:	0670      	lsls	r0, r6, #25
 800156c:	d5fb      	bpl.n	8001566 <_printf_i+0x1ca>
 800156e:	8019      	strh	r1, [r3, #0]
 8001570:	2300      	movs	r3, #0
 8001572:	4615      	mov	r5, r2
 8001574:	6123      	str	r3, [r4, #16]
 8001576:	e7ba      	b.n	80014ee <_printf_i+0x152>
 8001578:	682b      	ldr	r3, [r5, #0]
 800157a:	2100      	movs	r1, #0
 800157c:	1d1a      	adds	r2, r3, #4
 800157e:	602a      	str	r2, [r5, #0]
 8001580:	681d      	ldr	r5, [r3, #0]
 8001582:	6862      	ldr	r2, [r4, #4]
 8001584:	4628      	mov	r0, r5
 8001586:	f000 fae5 	bl	8001b54 <memchr>
 800158a:	b108      	cbz	r0, 8001590 <_printf_i+0x1f4>
 800158c:	1b40      	subs	r0, r0, r5
 800158e:	6060      	str	r0, [r4, #4]
 8001590:	6863      	ldr	r3, [r4, #4]
 8001592:	6123      	str	r3, [r4, #16]
 8001594:	2300      	movs	r3, #0
 8001596:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800159a:	e7a8      	b.n	80014ee <_printf_i+0x152>
 800159c:	462a      	mov	r2, r5
 800159e:	4649      	mov	r1, r9
 80015a0:	4640      	mov	r0, r8
 80015a2:	6923      	ldr	r3, [r4, #16]
 80015a4:	47d0      	blx	sl
 80015a6:	3001      	adds	r0, #1
 80015a8:	d0ab      	beq.n	8001502 <_printf_i+0x166>
 80015aa:	6823      	ldr	r3, [r4, #0]
 80015ac:	079b      	lsls	r3, r3, #30
 80015ae:	d413      	bmi.n	80015d8 <_printf_i+0x23c>
 80015b0:	68e0      	ldr	r0, [r4, #12]
 80015b2:	9b03      	ldr	r3, [sp, #12]
 80015b4:	4298      	cmp	r0, r3
 80015b6:	bfb8      	it	lt
 80015b8:	4618      	movlt	r0, r3
 80015ba:	e7a4      	b.n	8001506 <_printf_i+0x16a>
 80015bc:	2301      	movs	r3, #1
 80015be:	4632      	mov	r2, r6
 80015c0:	4649      	mov	r1, r9
 80015c2:	4640      	mov	r0, r8
 80015c4:	47d0      	blx	sl
 80015c6:	3001      	adds	r0, #1
 80015c8:	d09b      	beq.n	8001502 <_printf_i+0x166>
 80015ca:	3501      	adds	r5, #1
 80015cc:	68e3      	ldr	r3, [r4, #12]
 80015ce:	9903      	ldr	r1, [sp, #12]
 80015d0:	1a5b      	subs	r3, r3, r1
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	dcf2      	bgt.n	80015bc <_printf_i+0x220>
 80015d6:	e7eb      	b.n	80015b0 <_printf_i+0x214>
 80015d8:	2500      	movs	r5, #0
 80015da:	f104 0619 	add.w	r6, r4, #25
 80015de:	e7f5      	b.n	80015cc <_printf_i+0x230>
 80015e0:	08001f45 	.word	0x08001f45
 80015e4:	08001f56 	.word	0x08001f56

080015e8 <_scanf_chars>:
 80015e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015ec:	4615      	mov	r5, r2
 80015ee:	688a      	ldr	r2, [r1, #8]
 80015f0:	4680      	mov	r8, r0
 80015f2:	460c      	mov	r4, r1
 80015f4:	b932      	cbnz	r2, 8001604 <_scanf_chars+0x1c>
 80015f6:	698a      	ldr	r2, [r1, #24]
 80015f8:	2a00      	cmp	r2, #0
 80015fa:	bf0c      	ite	eq
 80015fc:	2201      	moveq	r2, #1
 80015fe:	f04f 32ff 	movne.w	r2, #4294967295
 8001602:	608a      	str	r2, [r1, #8]
 8001604:	2700      	movs	r7, #0
 8001606:	6822      	ldr	r2, [r4, #0]
 8001608:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8001698 <_scanf_chars+0xb0>
 800160c:	06d1      	lsls	r1, r2, #27
 800160e:	bf5f      	itttt	pl
 8001610:	681a      	ldrpl	r2, [r3, #0]
 8001612:	1d11      	addpl	r1, r2, #4
 8001614:	6019      	strpl	r1, [r3, #0]
 8001616:	6816      	ldrpl	r6, [r2, #0]
 8001618:	69a0      	ldr	r0, [r4, #24]
 800161a:	b188      	cbz	r0, 8001640 <_scanf_chars+0x58>
 800161c:	2801      	cmp	r0, #1
 800161e:	d107      	bne.n	8001630 <_scanf_chars+0x48>
 8001620:	682b      	ldr	r3, [r5, #0]
 8001622:	781a      	ldrb	r2, [r3, #0]
 8001624:	6963      	ldr	r3, [r4, #20]
 8001626:	5c9b      	ldrb	r3, [r3, r2]
 8001628:	b953      	cbnz	r3, 8001640 <_scanf_chars+0x58>
 800162a:	2f00      	cmp	r7, #0
 800162c:	d031      	beq.n	8001692 <_scanf_chars+0xaa>
 800162e:	e022      	b.n	8001676 <_scanf_chars+0x8e>
 8001630:	2802      	cmp	r0, #2
 8001632:	d120      	bne.n	8001676 <_scanf_chars+0x8e>
 8001634:	682b      	ldr	r3, [r5, #0]
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	f813 3009 	ldrb.w	r3, [r3, r9]
 800163c:	071b      	lsls	r3, r3, #28
 800163e:	d41a      	bmi.n	8001676 <_scanf_chars+0x8e>
 8001640:	6823      	ldr	r3, [r4, #0]
 8001642:	3701      	adds	r7, #1
 8001644:	06da      	lsls	r2, r3, #27
 8001646:	bf5e      	ittt	pl
 8001648:	682b      	ldrpl	r3, [r5, #0]
 800164a:	781b      	ldrbpl	r3, [r3, #0]
 800164c:	f806 3b01 	strbpl.w	r3, [r6], #1
 8001650:	682a      	ldr	r2, [r5, #0]
 8001652:	686b      	ldr	r3, [r5, #4]
 8001654:	3201      	adds	r2, #1
 8001656:	602a      	str	r2, [r5, #0]
 8001658:	68a2      	ldr	r2, [r4, #8]
 800165a:	3b01      	subs	r3, #1
 800165c:	3a01      	subs	r2, #1
 800165e:	606b      	str	r3, [r5, #4]
 8001660:	60a2      	str	r2, [r4, #8]
 8001662:	b142      	cbz	r2, 8001676 <_scanf_chars+0x8e>
 8001664:	2b00      	cmp	r3, #0
 8001666:	dcd7      	bgt.n	8001618 <_scanf_chars+0x30>
 8001668:	4629      	mov	r1, r5
 800166a:	4640      	mov	r0, r8
 800166c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8001670:	4798      	blx	r3
 8001672:	2800      	cmp	r0, #0
 8001674:	d0d0      	beq.n	8001618 <_scanf_chars+0x30>
 8001676:	6823      	ldr	r3, [r4, #0]
 8001678:	f013 0310 	ands.w	r3, r3, #16
 800167c:	d105      	bne.n	800168a <_scanf_chars+0xa2>
 800167e:	68e2      	ldr	r2, [r4, #12]
 8001680:	3201      	adds	r2, #1
 8001682:	60e2      	str	r2, [r4, #12]
 8001684:	69a2      	ldr	r2, [r4, #24]
 8001686:	b102      	cbz	r2, 800168a <_scanf_chars+0xa2>
 8001688:	7033      	strb	r3, [r6, #0]
 800168a:	2000      	movs	r0, #0
 800168c:	6923      	ldr	r3, [r4, #16]
 800168e:	443b      	add	r3, r7
 8001690:	6123      	str	r3, [r4, #16]
 8001692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001696:	bf00      	nop
 8001698:	08001f83 	.word	0x08001f83

0800169c <_scanf_i>:
 800169c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016a0:	460c      	mov	r4, r1
 80016a2:	4698      	mov	r8, r3
 80016a4:	4b75      	ldr	r3, [pc, #468]	; (800187c <_scanf_i+0x1e0>)
 80016a6:	b087      	sub	sp, #28
 80016a8:	4682      	mov	sl, r0
 80016aa:	4616      	mov	r6, r2
 80016ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016b0:	ab03      	add	r3, sp, #12
 80016b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80016b6:	4b72      	ldr	r3, [pc, #456]	; (8001880 <_scanf_i+0x1e4>)
 80016b8:	69a1      	ldr	r1, [r4, #24]
 80016ba:	4a72      	ldr	r2, [pc, #456]	; (8001884 <_scanf_i+0x1e8>)
 80016bc:	4627      	mov	r7, r4
 80016be:	2903      	cmp	r1, #3
 80016c0:	bf18      	it	ne
 80016c2:	461a      	movne	r2, r3
 80016c4:	68a3      	ldr	r3, [r4, #8]
 80016c6:	9201      	str	r2, [sp, #4]
 80016c8:	1e5a      	subs	r2, r3, #1
 80016ca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80016ce:	bf81      	itttt	hi
 80016d0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80016d4:	eb03 0905 	addhi.w	r9, r3, r5
 80016d8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80016dc:	60a3      	strhi	r3, [r4, #8]
 80016de:	f857 3b1c 	ldr.w	r3, [r7], #28
 80016e2:	bf98      	it	ls
 80016e4:	f04f 0900 	movls.w	r9, #0
 80016e8:	463d      	mov	r5, r7
 80016ea:	f04f 0b00 	mov.w	fp, #0
 80016ee:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80016f2:	6023      	str	r3, [r4, #0]
 80016f4:	6831      	ldr	r1, [r6, #0]
 80016f6:	ab03      	add	r3, sp, #12
 80016f8:	2202      	movs	r2, #2
 80016fa:	7809      	ldrb	r1, [r1, #0]
 80016fc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8001700:	f000 fa28 	bl	8001b54 <memchr>
 8001704:	b328      	cbz	r0, 8001752 <_scanf_i+0xb6>
 8001706:	f1bb 0f01 	cmp.w	fp, #1
 800170a:	d159      	bne.n	80017c0 <_scanf_i+0x124>
 800170c:	6862      	ldr	r2, [r4, #4]
 800170e:	b92a      	cbnz	r2, 800171c <_scanf_i+0x80>
 8001710:	2308      	movs	r3, #8
 8001712:	6822      	ldr	r2, [r4, #0]
 8001714:	6063      	str	r3, [r4, #4]
 8001716:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800171a:	6022      	str	r2, [r4, #0]
 800171c:	6822      	ldr	r2, [r4, #0]
 800171e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8001722:	6022      	str	r2, [r4, #0]
 8001724:	68a2      	ldr	r2, [r4, #8]
 8001726:	1e51      	subs	r1, r2, #1
 8001728:	60a1      	str	r1, [r4, #8]
 800172a:	b192      	cbz	r2, 8001752 <_scanf_i+0xb6>
 800172c:	6832      	ldr	r2, [r6, #0]
 800172e:	1c51      	adds	r1, r2, #1
 8001730:	6031      	str	r1, [r6, #0]
 8001732:	7812      	ldrb	r2, [r2, #0]
 8001734:	f805 2b01 	strb.w	r2, [r5], #1
 8001738:	6872      	ldr	r2, [r6, #4]
 800173a:	3a01      	subs	r2, #1
 800173c:	2a00      	cmp	r2, #0
 800173e:	6072      	str	r2, [r6, #4]
 8001740:	dc07      	bgt.n	8001752 <_scanf_i+0xb6>
 8001742:	4631      	mov	r1, r6
 8001744:	4650      	mov	r0, sl
 8001746:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800174a:	4790      	blx	r2
 800174c:	2800      	cmp	r0, #0
 800174e:	f040 8085 	bne.w	800185c <_scanf_i+0x1c0>
 8001752:	f10b 0b01 	add.w	fp, fp, #1
 8001756:	f1bb 0f03 	cmp.w	fp, #3
 800175a:	d1cb      	bne.n	80016f4 <_scanf_i+0x58>
 800175c:	6863      	ldr	r3, [r4, #4]
 800175e:	b90b      	cbnz	r3, 8001764 <_scanf_i+0xc8>
 8001760:	230a      	movs	r3, #10
 8001762:	6063      	str	r3, [r4, #4]
 8001764:	6863      	ldr	r3, [r4, #4]
 8001766:	4948      	ldr	r1, [pc, #288]	; (8001888 <_scanf_i+0x1ec>)
 8001768:	6960      	ldr	r0, [r4, #20]
 800176a:	1ac9      	subs	r1, r1, r3
 800176c:	f000 f88e 	bl	800188c <__sccl>
 8001770:	f04f 0b00 	mov.w	fp, #0
 8001774:	68a3      	ldr	r3, [r4, #8]
 8001776:	6822      	ldr	r2, [r4, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d03d      	beq.n	80017f8 <_scanf_i+0x15c>
 800177c:	6831      	ldr	r1, [r6, #0]
 800177e:	6960      	ldr	r0, [r4, #20]
 8001780:	f891 c000 	ldrb.w	ip, [r1]
 8001784:	f810 000c 	ldrb.w	r0, [r0, ip]
 8001788:	2800      	cmp	r0, #0
 800178a:	d035      	beq.n	80017f8 <_scanf_i+0x15c>
 800178c:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8001790:	d124      	bne.n	80017dc <_scanf_i+0x140>
 8001792:	0510      	lsls	r0, r2, #20
 8001794:	d522      	bpl.n	80017dc <_scanf_i+0x140>
 8001796:	f10b 0b01 	add.w	fp, fp, #1
 800179a:	f1b9 0f00 	cmp.w	r9, #0
 800179e:	d003      	beq.n	80017a8 <_scanf_i+0x10c>
 80017a0:	3301      	adds	r3, #1
 80017a2:	f109 39ff 	add.w	r9, r9, #4294967295
 80017a6:	60a3      	str	r3, [r4, #8]
 80017a8:	6873      	ldr	r3, [r6, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	6073      	str	r3, [r6, #4]
 80017b0:	dd1b      	ble.n	80017ea <_scanf_i+0x14e>
 80017b2:	6833      	ldr	r3, [r6, #0]
 80017b4:	3301      	adds	r3, #1
 80017b6:	6033      	str	r3, [r6, #0]
 80017b8:	68a3      	ldr	r3, [r4, #8]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	60a3      	str	r3, [r4, #8]
 80017be:	e7d9      	b.n	8001774 <_scanf_i+0xd8>
 80017c0:	f1bb 0f02 	cmp.w	fp, #2
 80017c4:	d1ae      	bne.n	8001724 <_scanf_i+0x88>
 80017c6:	6822      	ldr	r2, [r4, #0]
 80017c8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80017cc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80017d0:	d1bf      	bne.n	8001752 <_scanf_i+0xb6>
 80017d2:	2310      	movs	r3, #16
 80017d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017d8:	6063      	str	r3, [r4, #4]
 80017da:	e7a2      	b.n	8001722 <_scanf_i+0x86>
 80017dc:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80017e0:	6022      	str	r2, [r4, #0]
 80017e2:	780b      	ldrb	r3, [r1, #0]
 80017e4:	f805 3b01 	strb.w	r3, [r5], #1
 80017e8:	e7de      	b.n	80017a8 <_scanf_i+0x10c>
 80017ea:	4631      	mov	r1, r6
 80017ec:	4650      	mov	r0, sl
 80017ee:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80017f2:	4798      	blx	r3
 80017f4:	2800      	cmp	r0, #0
 80017f6:	d0df      	beq.n	80017b8 <_scanf_i+0x11c>
 80017f8:	6823      	ldr	r3, [r4, #0]
 80017fa:	05db      	lsls	r3, r3, #23
 80017fc:	d50d      	bpl.n	800181a <_scanf_i+0x17e>
 80017fe:	42bd      	cmp	r5, r7
 8001800:	d909      	bls.n	8001816 <_scanf_i+0x17a>
 8001802:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8001806:	4632      	mov	r2, r6
 8001808:	4650      	mov	r0, sl
 800180a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800180e:	f105 39ff 	add.w	r9, r5, #4294967295
 8001812:	4798      	blx	r3
 8001814:	464d      	mov	r5, r9
 8001816:	42bd      	cmp	r5, r7
 8001818:	d02d      	beq.n	8001876 <_scanf_i+0x1da>
 800181a:	6822      	ldr	r2, [r4, #0]
 800181c:	f012 0210 	ands.w	r2, r2, #16
 8001820:	d113      	bne.n	800184a <_scanf_i+0x1ae>
 8001822:	702a      	strb	r2, [r5, #0]
 8001824:	4639      	mov	r1, r7
 8001826:	6863      	ldr	r3, [r4, #4]
 8001828:	4650      	mov	r0, sl
 800182a:	9e01      	ldr	r6, [sp, #4]
 800182c:	47b0      	blx	r6
 800182e:	6821      	ldr	r1, [r4, #0]
 8001830:	f8d8 3000 	ldr.w	r3, [r8]
 8001834:	f011 0f20 	tst.w	r1, #32
 8001838:	d013      	beq.n	8001862 <_scanf_i+0x1c6>
 800183a:	1d1a      	adds	r2, r3, #4
 800183c:	f8c8 2000 	str.w	r2, [r8]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6018      	str	r0, [r3, #0]
 8001844:	68e3      	ldr	r3, [r4, #12]
 8001846:	3301      	adds	r3, #1
 8001848:	60e3      	str	r3, [r4, #12]
 800184a:	2000      	movs	r0, #0
 800184c:	1bed      	subs	r5, r5, r7
 800184e:	44ab      	add	fp, r5
 8001850:	6925      	ldr	r5, [r4, #16]
 8001852:	445d      	add	r5, fp
 8001854:	6125      	str	r5, [r4, #16]
 8001856:	b007      	add	sp, #28
 8001858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800185c:	f04f 0b00 	mov.w	fp, #0
 8001860:	e7ca      	b.n	80017f8 <_scanf_i+0x15c>
 8001862:	1d1a      	adds	r2, r3, #4
 8001864:	f8c8 2000 	str.w	r2, [r8]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f011 0f01 	tst.w	r1, #1
 800186e:	bf14      	ite	ne
 8001870:	8018      	strhne	r0, [r3, #0]
 8001872:	6018      	streq	r0, [r3, #0]
 8001874:	e7e6      	b.n	8001844 <_scanf_i+0x1a8>
 8001876:	2001      	movs	r0, #1
 8001878:	e7ed      	b.n	8001856 <_scanf_i+0x1ba>
 800187a:	bf00      	nop
 800187c:	08001f28 	.word	0x08001f28
 8001880:	08001add 	.word	0x08001add
 8001884:	080019f5 	.word	0x080019f5
 8001888:	08001f80 	.word	0x08001f80

0800188c <__sccl>:
 800188c:	b570      	push	{r4, r5, r6, lr}
 800188e:	780b      	ldrb	r3, [r1, #0]
 8001890:	4604      	mov	r4, r0
 8001892:	2b5e      	cmp	r3, #94	; 0x5e
 8001894:	bf13      	iteet	ne
 8001896:	2200      	movne	r2, #0
 8001898:	2201      	moveq	r2, #1
 800189a:	784b      	ldrbeq	r3, [r1, #1]
 800189c:	1c48      	addne	r0, r1, #1
 800189e:	bf08      	it	eq
 80018a0:	1c88      	addeq	r0, r1, #2
 80018a2:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80018a6:	1e61      	subs	r1, r4, #1
 80018a8:	f801 2f01 	strb.w	r2, [r1, #1]!
 80018ac:	42a9      	cmp	r1, r5
 80018ae:	d1fb      	bne.n	80018a8 <__sccl+0x1c>
 80018b0:	b90b      	cbnz	r3, 80018b6 <__sccl+0x2a>
 80018b2:	3801      	subs	r0, #1
 80018b4:	bd70      	pop	{r4, r5, r6, pc}
 80018b6:	f082 0201 	eor.w	r2, r2, #1
 80018ba:	4605      	mov	r5, r0
 80018bc:	54e2      	strb	r2, [r4, r3]
 80018be:	4628      	mov	r0, r5
 80018c0:	f810 1b01 	ldrb.w	r1, [r0], #1
 80018c4:	292d      	cmp	r1, #45	; 0x2d
 80018c6:	d006      	beq.n	80018d6 <__sccl+0x4a>
 80018c8:	295d      	cmp	r1, #93	; 0x5d
 80018ca:	d0f3      	beq.n	80018b4 <__sccl+0x28>
 80018cc:	b909      	cbnz	r1, 80018d2 <__sccl+0x46>
 80018ce:	4628      	mov	r0, r5
 80018d0:	e7f0      	b.n	80018b4 <__sccl+0x28>
 80018d2:	460b      	mov	r3, r1
 80018d4:	e7f1      	b.n	80018ba <__sccl+0x2e>
 80018d6:	786e      	ldrb	r6, [r5, #1]
 80018d8:	2e5d      	cmp	r6, #93	; 0x5d
 80018da:	d0fa      	beq.n	80018d2 <__sccl+0x46>
 80018dc:	42b3      	cmp	r3, r6
 80018de:	dcf8      	bgt.n	80018d2 <__sccl+0x46>
 80018e0:	4619      	mov	r1, r3
 80018e2:	3502      	adds	r5, #2
 80018e4:	3101      	adds	r1, #1
 80018e6:	428e      	cmp	r6, r1
 80018e8:	5462      	strb	r2, [r4, r1]
 80018ea:	dcfb      	bgt.n	80018e4 <__sccl+0x58>
 80018ec:	1af1      	subs	r1, r6, r3
 80018ee:	3901      	subs	r1, #1
 80018f0:	42b3      	cmp	r3, r6
 80018f2:	bfa8      	it	ge
 80018f4:	2100      	movge	r1, #0
 80018f6:	1c58      	adds	r0, r3, #1
 80018f8:	1843      	adds	r3, r0, r1
 80018fa:	e7e0      	b.n	80018be <__sccl+0x32>

080018fc <_strtol_l.constprop.0>:
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001902:	4680      	mov	r8, r0
 8001904:	d001      	beq.n	800190a <_strtol_l.constprop.0+0xe>
 8001906:	2b24      	cmp	r3, #36	; 0x24
 8001908:	d906      	bls.n	8001918 <_strtol_l.constprop.0+0x1c>
 800190a:	f7ff f915 	bl	8000b38 <__errno>
 800190e:	2316      	movs	r3, #22
 8001910:	6003      	str	r3, [r0, #0]
 8001912:	2000      	movs	r0, #0
 8001914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001918:	460d      	mov	r5, r1
 800191a:	4f35      	ldr	r7, [pc, #212]	; (80019f0 <_strtol_l.constprop.0+0xf4>)
 800191c:	4628      	mov	r0, r5
 800191e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001922:	5de6      	ldrb	r6, [r4, r7]
 8001924:	f016 0608 	ands.w	r6, r6, #8
 8001928:	d1f8      	bne.n	800191c <_strtol_l.constprop.0+0x20>
 800192a:	2c2d      	cmp	r4, #45	; 0x2d
 800192c:	d12f      	bne.n	800198e <_strtol_l.constprop.0+0x92>
 800192e:	2601      	movs	r6, #1
 8001930:	782c      	ldrb	r4, [r5, #0]
 8001932:	1c85      	adds	r5, r0, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d057      	beq.n	80019e8 <_strtol_l.constprop.0+0xec>
 8001938:	2b10      	cmp	r3, #16
 800193a:	d109      	bne.n	8001950 <_strtol_l.constprop.0+0x54>
 800193c:	2c30      	cmp	r4, #48	; 0x30
 800193e:	d107      	bne.n	8001950 <_strtol_l.constprop.0+0x54>
 8001940:	7828      	ldrb	r0, [r5, #0]
 8001942:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8001946:	2858      	cmp	r0, #88	; 0x58
 8001948:	d149      	bne.n	80019de <_strtol_l.constprop.0+0xe2>
 800194a:	2310      	movs	r3, #16
 800194c:	786c      	ldrb	r4, [r5, #1]
 800194e:	3502      	adds	r5, #2
 8001950:	2700      	movs	r7, #0
 8001952:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8001956:	f10e 3eff 	add.w	lr, lr, #4294967295
 800195a:	fbbe f9f3 	udiv	r9, lr, r3
 800195e:	4638      	mov	r0, r7
 8001960:	fb03 ea19 	mls	sl, r3, r9, lr
 8001964:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8001968:	f1bc 0f09 	cmp.w	ip, #9
 800196c:	d814      	bhi.n	8001998 <_strtol_l.constprop.0+0x9c>
 800196e:	4664      	mov	r4, ip
 8001970:	42a3      	cmp	r3, r4
 8001972:	dd22      	ble.n	80019ba <_strtol_l.constprop.0+0xbe>
 8001974:	2f00      	cmp	r7, #0
 8001976:	db1d      	blt.n	80019b4 <_strtol_l.constprop.0+0xb8>
 8001978:	4581      	cmp	r9, r0
 800197a:	d31b      	bcc.n	80019b4 <_strtol_l.constprop.0+0xb8>
 800197c:	d101      	bne.n	8001982 <_strtol_l.constprop.0+0x86>
 800197e:	45a2      	cmp	sl, r4
 8001980:	db18      	blt.n	80019b4 <_strtol_l.constprop.0+0xb8>
 8001982:	2701      	movs	r7, #1
 8001984:	fb00 4003 	mla	r0, r0, r3, r4
 8001988:	f815 4b01 	ldrb.w	r4, [r5], #1
 800198c:	e7ea      	b.n	8001964 <_strtol_l.constprop.0+0x68>
 800198e:	2c2b      	cmp	r4, #43	; 0x2b
 8001990:	bf04      	itt	eq
 8001992:	782c      	ldrbeq	r4, [r5, #0]
 8001994:	1c85      	addeq	r5, r0, #2
 8001996:	e7cd      	b.n	8001934 <_strtol_l.constprop.0+0x38>
 8001998:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800199c:	f1bc 0f19 	cmp.w	ip, #25
 80019a0:	d801      	bhi.n	80019a6 <_strtol_l.constprop.0+0xaa>
 80019a2:	3c37      	subs	r4, #55	; 0x37
 80019a4:	e7e4      	b.n	8001970 <_strtol_l.constprop.0+0x74>
 80019a6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80019aa:	f1bc 0f19 	cmp.w	ip, #25
 80019ae:	d804      	bhi.n	80019ba <_strtol_l.constprop.0+0xbe>
 80019b0:	3c57      	subs	r4, #87	; 0x57
 80019b2:	e7dd      	b.n	8001970 <_strtol_l.constprop.0+0x74>
 80019b4:	f04f 37ff 	mov.w	r7, #4294967295
 80019b8:	e7e6      	b.n	8001988 <_strtol_l.constprop.0+0x8c>
 80019ba:	2f00      	cmp	r7, #0
 80019bc:	da07      	bge.n	80019ce <_strtol_l.constprop.0+0xd2>
 80019be:	2322      	movs	r3, #34	; 0x22
 80019c0:	4670      	mov	r0, lr
 80019c2:	f8c8 3000 	str.w	r3, [r8]
 80019c6:	2a00      	cmp	r2, #0
 80019c8:	d0a4      	beq.n	8001914 <_strtol_l.constprop.0+0x18>
 80019ca:	1e69      	subs	r1, r5, #1
 80019cc:	e005      	b.n	80019da <_strtol_l.constprop.0+0xde>
 80019ce:	b106      	cbz	r6, 80019d2 <_strtol_l.constprop.0+0xd6>
 80019d0:	4240      	negs	r0, r0
 80019d2:	2a00      	cmp	r2, #0
 80019d4:	d09e      	beq.n	8001914 <_strtol_l.constprop.0+0x18>
 80019d6:	2f00      	cmp	r7, #0
 80019d8:	d1f7      	bne.n	80019ca <_strtol_l.constprop.0+0xce>
 80019da:	6011      	str	r1, [r2, #0]
 80019dc:	e79a      	b.n	8001914 <_strtol_l.constprop.0+0x18>
 80019de:	2430      	movs	r4, #48	; 0x30
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1b5      	bne.n	8001950 <_strtol_l.constprop.0+0x54>
 80019e4:	2308      	movs	r3, #8
 80019e6:	e7b3      	b.n	8001950 <_strtol_l.constprop.0+0x54>
 80019e8:	2c30      	cmp	r4, #48	; 0x30
 80019ea:	d0a9      	beq.n	8001940 <_strtol_l.constprop.0+0x44>
 80019ec:	230a      	movs	r3, #10
 80019ee:	e7af      	b.n	8001950 <_strtol_l.constprop.0+0x54>
 80019f0:	08001f83 	.word	0x08001f83

080019f4 <_strtol_r>:
 80019f4:	f7ff bf82 	b.w	80018fc <_strtol_l.constprop.0>

080019f8 <_strtoul_l.constprop.0>:
 80019f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019fc:	4686      	mov	lr, r0
 80019fe:	460d      	mov	r5, r1
 8001a00:	4f35      	ldr	r7, [pc, #212]	; (8001ad8 <_strtoul_l.constprop.0+0xe0>)
 8001a02:	4628      	mov	r0, r5
 8001a04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001a08:	5de6      	ldrb	r6, [r4, r7]
 8001a0a:	f016 0608 	ands.w	r6, r6, #8
 8001a0e:	d1f8      	bne.n	8001a02 <_strtoul_l.constprop.0+0xa>
 8001a10:	2c2d      	cmp	r4, #45	; 0x2d
 8001a12:	d12f      	bne.n	8001a74 <_strtoul_l.constprop.0+0x7c>
 8001a14:	2601      	movs	r6, #1
 8001a16:	782c      	ldrb	r4, [r5, #0]
 8001a18:	1c85      	adds	r5, r0, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d057      	beq.n	8001ace <_strtoul_l.constprop.0+0xd6>
 8001a1e:	2b10      	cmp	r3, #16
 8001a20:	d109      	bne.n	8001a36 <_strtoul_l.constprop.0+0x3e>
 8001a22:	2c30      	cmp	r4, #48	; 0x30
 8001a24:	d107      	bne.n	8001a36 <_strtoul_l.constprop.0+0x3e>
 8001a26:	7828      	ldrb	r0, [r5, #0]
 8001a28:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8001a2c:	2858      	cmp	r0, #88	; 0x58
 8001a2e:	d149      	bne.n	8001ac4 <_strtoul_l.constprop.0+0xcc>
 8001a30:	2310      	movs	r3, #16
 8001a32:	786c      	ldrb	r4, [r5, #1]
 8001a34:	3502      	adds	r5, #2
 8001a36:	f04f 38ff 	mov.w	r8, #4294967295
 8001a3a:	fbb8 f8f3 	udiv	r8, r8, r3
 8001a3e:	2700      	movs	r7, #0
 8001a40:	fb03 f908 	mul.w	r9, r3, r8
 8001a44:	4638      	mov	r0, r7
 8001a46:	ea6f 0909 	mvn.w	r9, r9
 8001a4a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8001a4e:	f1bc 0f09 	cmp.w	ip, #9
 8001a52:	d814      	bhi.n	8001a7e <_strtoul_l.constprop.0+0x86>
 8001a54:	4664      	mov	r4, ip
 8001a56:	42a3      	cmp	r3, r4
 8001a58:	dd22      	ble.n	8001aa0 <_strtoul_l.constprop.0+0xa8>
 8001a5a:	2f00      	cmp	r7, #0
 8001a5c:	db1d      	blt.n	8001a9a <_strtoul_l.constprop.0+0xa2>
 8001a5e:	4580      	cmp	r8, r0
 8001a60:	d31b      	bcc.n	8001a9a <_strtoul_l.constprop.0+0xa2>
 8001a62:	d101      	bne.n	8001a68 <_strtoul_l.constprop.0+0x70>
 8001a64:	45a1      	cmp	r9, r4
 8001a66:	db18      	blt.n	8001a9a <_strtoul_l.constprop.0+0xa2>
 8001a68:	2701      	movs	r7, #1
 8001a6a:	fb00 4003 	mla	r0, r0, r3, r4
 8001a6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001a72:	e7ea      	b.n	8001a4a <_strtoul_l.constprop.0+0x52>
 8001a74:	2c2b      	cmp	r4, #43	; 0x2b
 8001a76:	bf04      	itt	eq
 8001a78:	782c      	ldrbeq	r4, [r5, #0]
 8001a7a:	1c85      	addeq	r5, r0, #2
 8001a7c:	e7cd      	b.n	8001a1a <_strtoul_l.constprop.0+0x22>
 8001a7e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8001a82:	f1bc 0f19 	cmp.w	ip, #25
 8001a86:	d801      	bhi.n	8001a8c <_strtoul_l.constprop.0+0x94>
 8001a88:	3c37      	subs	r4, #55	; 0x37
 8001a8a:	e7e4      	b.n	8001a56 <_strtoul_l.constprop.0+0x5e>
 8001a8c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8001a90:	f1bc 0f19 	cmp.w	ip, #25
 8001a94:	d804      	bhi.n	8001aa0 <_strtoul_l.constprop.0+0xa8>
 8001a96:	3c57      	subs	r4, #87	; 0x57
 8001a98:	e7dd      	b.n	8001a56 <_strtoul_l.constprop.0+0x5e>
 8001a9a:	f04f 37ff 	mov.w	r7, #4294967295
 8001a9e:	e7e6      	b.n	8001a6e <_strtoul_l.constprop.0+0x76>
 8001aa0:	2f00      	cmp	r7, #0
 8001aa2:	da07      	bge.n	8001ab4 <_strtoul_l.constprop.0+0xbc>
 8001aa4:	2322      	movs	r3, #34	; 0x22
 8001aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8001aaa:	f8ce 3000 	str.w	r3, [lr]
 8001aae:	b932      	cbnz	r2, 8001abe <_strtoul_l.constprop.0+0xc6>
 8001ab0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ab4:	b106      	cbz	r6, 8001ab8 <_strtoul_l.constprop.0+0xc0>
 8001ab6:	4240      	negs	r0, r0
 8001ab8:	2a00      	cmp	r2, #0
 8001aba:	d0f9      	beq.n	8001ab0 <_strtoul_l.constprop.0+0xb8>
 8001abc:	b107      	cbz	r7, 8001ac0 <_strtoul_l.constprop.0+0xc8>
 8001abe:	1e69      	subs	r1, r5, #1
 8001ac0:	6011      	str	r1, [r2, #0]
 8001ac2:	e7f5      	b.n	8001ab0 <_strtoul_l.constprop.0+0xb8>
 8001ac4:	2430      	movs	r4, #48	; 0x30
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1b5      	bne.n	8001a36 <_strtoul_l.constprop.0+0x3e>
 8001aca:	2308      	movs	r3, #8
 8001acc:	e7b3      	b.n	8001a36 <_strtoul_l.constprop.0+0x3e>
 8001ace:	2c30      	cmp	r4, #48	; 0x30
 8001ad0:	d0a9      	beq.n	8001a26 <_strtoul_l.constprop.0+0x2e>
 8001ad2:	230a      	movs	r3, #10
 8001ad4:	e7af      	b.n	8001a36 <_strtoul_l.constprop.0+0x3e>
 8001ad6:	bf00      	nop
 8001ad8:	08001f83 	.word	0x08001f83

08001adc <_strtoul_r>:
 8001adc:	f7ff bf8c 	b.w	80019f8 <_strtoul_l.constprop.0>

08001ae0 <__submore>:
 8001ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ae4:	460c      	mov	r4, r1
 8001ae6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8001ae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001aec:	4299      	cmp	r1, r3
 8001aee:	d11b      	bne.n	8001b28 <__submore+0x48>
 8001af0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001af4:	f000 f8cc 	bl	8001c90 <_malloc_r>
 8001af8:	b918      	cbnz	r0, 8001b02 <__submore+0x22>
 8001afa:	f04f 30ff 	mov.w	r0, #4294967295
 8001afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b06:	63a3      	str	r3, [r4, #56]	; 0x38
 8001b08:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8001b0c:	6360      	str	r0, [r4, #52]	; 0x34
 8001b0e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8001b12:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001b16:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8001b1a:	7043      	strb	r3, [r0, #1]
 8001b1c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001b20:	7003      	strb	r3, [r0, #0]
 8001b22:	6020      	str	r0, [r4, #0]
 8001b24:	2000      	movs	r0, #0
 8001b26:	e7ea      	b.n	8001afe <__submore+0x1e>
 8001b28:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8001b2a:	0077      	lsls	r7, r6, #1
 8001b2c:	463a      	mov	r2, r7
 8001b2e:	f000 f923 	bl	8001d78 <_realloc_r>
 8001b32:	4605      	mov	r5, r0
 8001b34:	2800      	cmp	r0, #0
 8001b36:	d0e0      	beq.n	8001afa <__submore+0x1a>
 8001b38:	eb00 0806 	add.w	r8, r0, r6
 8001b3c:	4601      	mov	r1, r0
 8001b3e:	4632      	mov	r2, r6
 8001b40:	4640      	mov	r0, r8
 8001b42:	f000 f815 	bl	8001b70 <memcpy>
 8001b46:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8001b4a:	f8c4 8000 	str.w	r8, [r4]
 8001b4e:	e7e9      	b.n	8001b24 <__submore+0x44>

08001b50 <__retarget_lock_acquire_recursive>:
 8001b50:	4770      	bx	lr

08001b52 <__retarget_lock_release_recursive>:
 8001b52:	4770      	bx	lr

08001b54 <memchr>:
 8001b54:	4603      	mov	r3, r0
 8001b56:	b510      	push	{r4, lr}
 8001b58:	b2c9      	uxtb	r1, r1
 8001b5a:	4402      	add	r2, r0
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	4618      	mov	r0, r3
 8001b60:	d101      	bne.n	8001b66 <memchr+0x12>
 8001b62:	2000      	movs	r0, #0
 8001b64:	e003      	b.n	8001b6e <memchr+0x1a>
 8001b66:	7804      	ldrb	r4, [r0, #0]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	428c      	cmp	r4, r1
 8001b6c:	d1f6      	bne.n	8001b5c <memchr+0x8>
 8001b6e:	bd10      	pop	{r4, pc}

08001b70 <memcpy>:
 8001b70:	440a      	add	r2, r1
 8001b72:	4291      	cmp	r1, r2
 8001b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8001b78:	d100      	bne.n	8001b7c <memcpy+0xc>
 8001b7a:	4770      	bx	lr
 8001b7c:	b510      	push	{r4, lr}
 8001b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001b82:	4291      	cmp	r1, r2
 8001b84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001b88:	d1f9      	bne.n	8001b7e <memcpy+0xe>
 8001b8a:	bd10      	pop	{r4, pc}

08001b8c <memmove>:
 8001b8c:	4288      	cmp	r0, r1
 8001b8e:	b510      	push	{r4, lr}
 8001b90:	eb01 0402 	add.w	r4, r1, r2
 8001b94:	d902      	bls.n	8001b9c <memmove+0x10>
 8001b96:	4284      	cmp	r4, r0
 8001b98:	4623      	mov	r3, r4
 8001b9a:	d807      	bhi.n	8001bac <memmove+0x20>
 8001b9c:	1e43      	subs	r3, r0, #1
 8001b9e:	42a1      	cmp	r1, r4
 8001ba0:	d008      	beq.n	8001bb4 <memmove+0x28>
 8001ba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001ba6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001baa:	e7f8      	b.n	8001b9e <memmove+0x12>
 8001bac:	4601      	mov	r1, r0
 8001bae:	4402      	add	r2, r0
 8001bb0:	428a      	cmp	r2, r1
 8001bb2:	d100      	bne.n	8001bb6 <memmove+0x2a>
 8001bb4:	bd10      	pop	{r4, pc}
 8001bb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001bba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001bbe:	e7f7      	b.n	8001bb0 <memmove+0x24>

08001bc0 <_free_r>:
 8001bc0:	b538      	push	{r3, r4, r5, lr}
 8001bc2:	4605      	mov	r5, r0
 8001bc4:	2900      	cmp	r1, #0
 8001bc6:	d040      	beq.n	8001c4a <_free_r+0x8a>
 8001bc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001bcc:	1f0c      	subs	r4, r1, #4
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	bfb8      	it	lt
 8001bd2:	18e4      	addlt	r4, r4, r3
 8001bd4:	f000 f910 	bl	8001df8 <__malloc_lock>
 8001bd8:	4a1c      	ldr	r2, [pc, #112]	; (8001c4c <_free_r+0x8c>)
 8001bda:	6813      	ldr	r3, [r2, #0]
 8001bdc:	b933      	cbnz	r3, 8001bec <_free_r+0x2c>
 8001bde:	6063      	str	r3, [r4, #4]
 8001be0:	6014      	str	r4, [r2, #0]
 8001be2:	4628      	mov	r0, r5
 8001be4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001be8:	f000 b90c 	b.w	8001e04 <__malloc_unlock>
 8001bec:	42a3      	cmp	r3, r4
 8001bee:	d908      	bls.n	8001c02 <_free_r+0x42>
 8001bf0:	6820      	ldr	r0, [r4, #0]
 8001bf2:	1821      	adds	r1, r4, r0
 8001bf4:	428b      	cmp	r3, r1
 8001bf6:	bf01      	itttt	eq
 8001bf8:	6819      	ldreq	r1, [r3, #0]
 8001bfa:	685b      	ldreq	r3, [r3, #4]
 8001bfc:	1809      	addeq	r1, r1, r0
 8001bfe:	6021      	streq	r1, [r4, #0]
 8001c00:	e7ed      	b.n	8001bde <_free_r+0x1e>
 8001c02:	461a      	mov	r2, r3
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	b10b      	cbz	r3, 8001c0c <_free_r+0x4c>
 8001c08:	42a3      	cmp	r3, r4
 8001c0a:	d9fa      	bls.n	8001c02 <_free_r+0x42>
 8001c0c:	6811      	ldr	r1, [r2, #0]
 8001c0e:	1850      	adds	r0, r2, r1
 8001c10:	42a0      	cmp	r0, r4
 8001c12:	d10b      	bne.n	8001c2c <_free_r+0x6c>
 8001c14:	6820      	ldr	r0, [r4, #0]
 8001c16:	4401      	add	r1, r0
 8001c18:	1850      	adds	r0, r2, r1
 8001c1a:	4283      	cmp	r3, r0
 8001c1c:	6011      	str	r1, [r2, #0]
 8001c1e:	d1e0      	bne.n	8001be2 <_free_r+0x22>
 8001c20:	6818      	ldr	r0, [r3, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	4401      	add	r1, r0
 8001c26:	6011      	str	r1, [r2, #0]
 8001c28:	6053      	str	r3, [r2, #4]
 8001c2a:	e7da      	b.n	8001be2 <_free_r+0x22>
 8001c2c:	d902      	bls.n	8001c34 <_free_r+0x74>
 8001c2e:	230c      	movs	r3, #12
 8001c30:	602b      	str	r3, [r5, #0]
 8001c32:	e7d6      	b.n	8001be2 <_free_r+0x22>
 8001c34:	6820      	ldr	r0, [r4, #0]
 8001c36:	1821      	adds	r1, r4, r0
 8001c38:	428b      	cmp	r3, r1
 8001c3a:	bf01      	itttt	eq
 8001c3c:	6819      	ldreq	r1, [r3, #0]
 8001c3e:	685b      	ldreq	r3, [r3, #4]
 8001c40:	1809      	addeq	r1, r1, r0
 8001c42:	6021      	streq	r1, [r4, #0]
 8001c44:	6063      	str	r3, [r4, #4]
 8001c46:	6054      	str	r4, [r2, #4]
 8001c48:	e7cb      	b.n	8001be2 <_free_r+0x22>
 8001c4a:	bd38      	pop	{r3, r4, r5, pc}
 8001c4c:	200002a0 	.word	0x200002a0

08001c50 <sbrk_aligned>:
 8001c50:	b570      	push	{r4, r5, r6, lr}
 8001c52:	4e0e      	ldr	r6, [pc, #56]	; (8001c8c <sbrk_aligned+0x3c>)
 8001c54:	460c      	mov	r4, r1
 8001c56:	6831      	ldr	r1, [r6, #0]
 8001c58:	4605      	mov	r5, r0
 8001c5a:	b911      	cbnz	r1, 8001c62 <sbrk_aligned+0x12>
 8001c5c:	f000 f8bc 	bl	8001dd8 <_sbrk_r>
 8001c60:	6030      	str	r0, [r6, #0]
 8001c62:	4621      	mov	r1, r4
 8001c64:	4628      	mov	r0, r5
 8001c66:	f000 f8b7 	bl	8001dd8 <_sbrk_r>
 8001c6a:	1c43      	adds	r3, r0, #1
 8001c6c:	d00a      	beq.n	8001c84 <sbrk_aligned+0x34>
 8001c6e:	1cc4      	adds	r4, r0, #3
 8001c70:	f024 0403 	bic.w	r4, r4, #3
 8001c74:	42a0      	cmp	r0, r4
 8001c76:	d007      	beq.n	8001c88 <sbrk_aligned+0x38>
 8001c78:	1a21      	subs	r1, r4, r0
 8001c7a:	4628      	mov	r0, r5
 8001c7c:	f000 f8ac 	bl	8001dd8 <_sbrk_r>
 8001c80:	3001      	adds	r0, #1
 8001c82:	d101      	bne.n	8001c88 <sbrk_aligned+0x38>
 8001c84:	f04f 34ff 	mov.w	r4, #4294967295
 8001c88:	4620      	mov	r0, r4
 8001c8a:	bd70      	pop	{r4, r5, r6, pc}
 8001c8c:	200002a4 	.word	0x200002a4

08001c90 <_malloc_r>:
 8001c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c94:	1ccd      	adds	r5, r1, #3
 8001c96:	f025 0503 	bic.w	r5, r5, #3
 8001c9a:	3508      	adds	r5, #8
 8001c9c:	2d0c      	cmp	r5, #12
 8001c9e:	bf38      	it	cc
 8001ca0:	250c      	movcc	r5, #12
 8001ca2:	2d00      	cmp	r5, #0
 8001ca4:	4607      	mov	r7, r0
 8001ca6:	db01      	blt.n	8001cac <_malloc_r+0x1c>
 8001ca8:	42a9      	cmp	r1, r5
 8001caa:	d905      	bls.n	8001cb8 <_malloc_r+0x28>
 8001cac:	230c      	movs	r3, #12
 8001cae:	2600      	movs	r6, #0
 8001cb0:	603b      	str	r3, [r7, #0]
 8001cb2:	4630      	mov	r0, r6
 8001cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cb8:	4e2e      	ldr	r6, [pc, #184]	; (8001d74 <_malloc_r+0xe4>)
 8001cba:	f000 f89d 	bl	8001df8 <__malloc_lock>
 8001cbe:	6833      	ldr	r3, [r6, #0]
 8001cc0:	461c      	mov	r4, r3
 8001cc2:	bb34      	cbnz	r4, 8001d12 <_malloc_r+0x82>
 8001cc4:	4629      	mov	r1, r5
 8001cc6:	4638      	mov	r0, r7
 8001cc8:	f7ff ffc2 	bl	8001c50 <sbrk_aligned>
 8001ccc:	1c43      	adds	r3, r0, #1
 8001cce:	4604      	mov	r4, r0
 8001cd0:	d14d      	bne.n	8001d6e <_malloc_r+0xde>
 8001cd2:	6834      	ldr	r4, [r6, #0]
 8001cd4:	4626      	mov	r6, r4
 8001cd6:	2e00      	cmp	r6, #0
 8001cd8:	d140      	bne.n	8001d5c <_malloc_r+0xcc>
 8001cda:	6823      	ldr	r3, [r4, #0]
 8001cdc:	4631      	mov	r1, r6
 8001cde:	4638      	mov	r0, r7
 8001ce0:	eb04 0803 	add.w	r8, r4, r3
 8001ce4:	f000 f878 	bl	8001dd8 <_sbrk_r>
 8001ce8:	4580      	cmp	r8, r0
 8001cea:	d13a      	bne.n	8001d62 <_malloc_r+0xd2>
 8001cec:	6821      	ldr	r1, [r4, #0]
 8001cee:	3503      	adds	r5, #3
 8001cf0:	1a6d      	subs	r5, r5, r1
 8001cf2:	f025 0503 	bic.w	r5, r5, #3
 8001cf6:	3508      	adds	r5, #8
 8001cf8:	2d0c      	cmp	r5, #12
 8001cfa:	bf38      	it	cc
 8001cfc:	250c      	movcc	r5, #12
 8001cfe:	4638      	mov	r0, r7
 8001d00:	4629      	mov	r1, r5
 8001d02:	f7ff ffa5 	bl	8001c50 <sbrk_aligned>
 8001d06:	3001      	adds	r0, #1
 8001d08:	d02b      	beq.n	8001d62 <_malloc_r+0xd2>
 8001d0a:	6823      	ldr	r3, [r4, #0]
 8001d0c:	442b      	add	r3, r5
 8001d0e:	6023      	str	r3, [r4, #0]
 8001d10:	e00e      	b.n	8001d30 <_malloc_r+0xa0>
 8001d12:	6822      	ldr	r2, [r4, #0]
 8001d14:	1b52      	subs	r2, r2, r5
 8001d16:	d41e      	bmi.n	8001d56 <_malloc_r+0xc6>
 8001d18:	2a0b      	cmp	r2, #11
 8001d1a:	d916      	bls.n	8001d4a <_malloc_r+0xba>
 8001d1c:	1961      	adds	r1, r4, r5
 8001d1e:	42a3      	cmp	r3, r4
 8001d20:	6025      	str	r5, [r4, #0]
 8001d22:	bf18      	it	ne
 8001d24:	6059      	strne	r1, [r3, #4]
 8001d26:	6863      	ldr	r3, [r4, #4]
 8001d28:	bf08      	it	eq
 8001d2a:	6031      	streq	r1, [r6, #0]
 8001d2c:	5162      	str	r2, [r4, r5]
 8001d2e:	604b      	str	r3, [r1, #4]
 8001d30:	4638      	mov	r0, r7
 8001d32:	f104 060b 	add.w	r6, r4, #11
 8001d36:	f000 f865 	bl	8001e04 <__malloc_unlock>
 8001d3a:	f026 0607 	bic.w	r6, r6, #7
 8001d3e:	1d23      	adds	r3, r4, #4
 8001d40:	1af2      	subs	r2, r6, r3
 8001d42:	d0b6      	beq.n	8001cb2 <_malloc_r+0x22>
 8001d44:	1b9b      	subs	r3, r3, r6
 8001d46:	50a3      	str	r3, [r4, r2]
 8001d48:	e7b3      	b.n	8001cb2 <_malloc_r+0x22>
 8001d4a:	6862      	ldr	r2, [r4, #4]
 8001d4c:	42a3      	cmp	r3, r4
 8001d4e:	bf0c      	ite	eq
 8001d50:	6032      	streq	r2, [r6, #0]
 8001d52:	605a      	strne	r2, [r3, #4]
 8001d54:	e7ec      	b.n	8001d30 <_malloc_r+0xa0>
 8001d56:	4623      	mov	r3, r4
 8001d58:	6864      	ldr	r4, [r4, #4]
 8001d5a:	e7b2      	b.n	8001cc2 <_malloc_r+0x32>
 8001d5c:	4634      	mov	r4, r6
 8001d5e:	6876      	ldr	r6, [r6, #4]
 8001d60:	e7b9      	b.n	8001cd6 <_malloc_r+0x46>
 8001d62:	230c      	movs	r3, #12
 8001d64:	4638      	mov	r0, r7
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	f000 f84c 	bl	8001e04 <__malloc_unlock>
 8001d6c:	e7a1      	b.n	8001cb2 <_malloc_r+0x22>
 8001d6e:	6025      	str	r5, [r4, #0]
 8001d70:	e7de      	b.n	8001d30 <_malloc_r+0xa0>
 8001d72:	bf00      	nop
 8001d74:	200002a0 	.word	0x200002a0

08001d78 <_realloc_r>:
 8001d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d7c:	4680      	mov	r8, r0
 8001d7e:	4614      	mov	r4, r2
 8001d80:	460e      	mov	r6, r1
 8001d82:	b921      	cbnz	r1, 8001d8e <_realloc_r+0x16>
 8001d84:	4611      	mov	r1, r2
 8001d86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d8a:	f7ff bf81 	b.w	8001c90 <_malloc_r>
 8001d8e:	b92a      	cbnz	r2, 8001d9c <_realloc_r+0x24>
 8001d90:	f7ff ff16 	bl	8001bc0 <_free_r>
 8001d94:	4625      	mov	r5, r4
 8001d96:	4628      	mov	r0, r5
 8001d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d9c:	f000 f838 	bl	8001e10 <_malloc_usable_size_r>
 8001da0:	4284      	cmp	r4, r0
 8001da2:	4607      	mov	r7, r0
 8001da4:	d802      	bhi.n	8001dac <_realloc_r+0x34>
 8001da6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001daa:	d812      	bhi.n	8001dd2 <_realloc_r+0x5a>
 8001dac:	4621      	mov	r1, r4
 8001dae:	4640      	mov	r0, r8
 8001db0:	f7ff ff6e 	bl	8001c90 <_malloc_r>
 8001db4:	4605      	mov	r5, r0
 8001db6:	2800      	cmp	r0, #0
 8001db8:	d0ed      	beq.n	8001d96 <_realloc_r+0x1e>
 8001dba:	42bc      	cmp	r4, r7
 8001dbc:	4622      	mov	r2, r4
 8001dbe:	4631      	mov	r1, r6
 8001dc0:	bf28      	it	cs
 8001dc2:	463a      	movcs	r2, r7
 8001dc4:	f7ff fed4 	bl	8001b70 <memcpy>
 8001dc8:	4631      	mov	r1, r6
 8001dca:	4640      	mov	r0, r8
 8001dcc:	f7ff fef8 	bl	8001bc0 <_free_r>
 8001dd0:	e7e1      	b.n	8001d96 <_realloc_r+0x1e>
 8001dd2:	4635      	mov	r5, r6
 8001dd4:	e7df      	b.n	8001d96 <_realloc_r+0x1e>
	...

08001dd8 <_sbrk_r>:
 8001dd8:	b538      	push	{r3, r4, r5, lr}
 8001dda:	2300      	movs	r3, #0
 8001ddc:	4d05      	ldr	r5, [pc, #20]	; (8001df4 <_sbrk_r+0x1c>)
 8001dde:	4604      	mov	r4, r0
 8001de0:	4608      	mov	r0, r1
 8001de2:	602b      	str	r3, [r5, #0]
 8001de4:	f7fe fe48 	bl	8000a78 <_sbrk>
 8001de8:	1c43      	adds	r3, r0, #1
 8001dea:	d102      	bne.n	8001df2 <_sbrk_r+0x1a>
 8001dec:	682b      	ldr	r3, [r5, #0]
 8001dee:	b103      	cbz	r3, 8001df2 <_sbrk_r+0x1a>
 8001df0:	6023      	str	r3, [r4, #0]
 8001df2:	bd38      	pop	{r3, r4, r5, pc}
 8001df4:	20000298 	.word	0x20000298

08001df8 <__malloc_lock>:
 8001df8:	4801      	ldr	r0, [pc, #4]	; (8001e00 <__malloc_lock+0x8>)
 8001dfa:	f7ff bea9 	b.w	8001b50 <__retarget_lock_acquire_recursive>
 8001dfe:	bf00      	nop
 8001e00:	2000029c 	.word	0x2000029c

08001e04 <__malloc_unlock>:
 8001e04:	4801      	ldr	r0, [pc, #4]	; (8001e0c <__malloc_unlock+0x8>)
 8001e06:	f7ff bea4 	b.w	8001b52 <__retarget_lock_release_recursive>
 8001e0a:	bf00      	nop
 8001e0c:	2000029c 	.word	0x2000029c

08001e10 <_malloc_usable_size_r>:
 8001e10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e14:	1f18      	subs	r0, r3, #4
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	bfbc      	itt	lt
 8001e1a:	580b      	ldrlt	r3, [r1, r0]
 8001e1c:	18c0      	addlt	r0, r0, r3
 8001e1e:	4770      	bx	lr

08001e20 <_init>:
 8001e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e22:	bf00      	nop
 8001e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e26:	bc08      	pop	{r3}
 8001e28:	469e      	mov	lr, r3
 8001e2a:	4770      	bx	lr

08001e2c <_fini>:
 8001e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e2e:	bf00      	nop
 8001e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e32:	bc08      	pop	{r3}
 8001e34:	469e      	mov	lr, r3
 8001e36:	4770      	bx	lr
