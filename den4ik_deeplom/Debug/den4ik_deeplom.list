
den4ik_deeplom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000584  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006b4  080006bc  000106bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006b4  080006b4  000106bc  2**0
                  CONTENTS
  4 .ARM          00000000  080006b4  080006b4  000106bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006b4  080006bc  000106bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006b4  080006b4  000106b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006b8  080006b8  000106b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000106bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000000  080006bc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  080006bc  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000106bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000bfc  00000000  00000000  000106e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000283  00000000  00000000  000112e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00011568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000090  00000000  00000000  00011610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010d5f  00000000  00000000  000116a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000a78  00000000  00000000  000223ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058a64  00000000  00000000  00022e77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007b8db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001f8  00000000  00000000  0007b92c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800069c 	.word	0x0800069c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800069c 	.word	0x0800069c

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	4603      	mov	r3, r0
 8000188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	2b00      	cmp	r3, #0
 8000190:	db0b      	blt.n	80001aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	f003 021f 	and.w	r2, r3, #31
 8000198:	4906      	ldr	r1, [pc, #24]	; (80001b4 <__NVIC_EnableIRQ+0x34>)
 800019a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800019e:	095b      	lsrs	r3, r3, #5
 80001a0:	2001      	movs	r0, #1
 80001a2:	fa00 f202 	lsl.w	r2, r0, r2
 80001a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001aa:	bf00      	nop
 80001ac:	370c      	adds	r7, #12
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	e000e100 	.word	0xe000e100

080001b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001b8:	b480      	push	{r7}
 80001ba:	b083      	sub	sp, #12
 80001bc:	af00      	add	r7, sp, #0
 80001be:	4603      	mov	r3, r0
 80001c0:	6039      	str	r1, [r7, #0]
 80001c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	db0a      	blt.n	80001e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001cc:	683b      	ldr	r3, [r7, #0]
 80001ce:	b2da      	uxtb	r2, r3
 80001d0:	490c      	ldr	r1, [pc, #48]	; (8000204 <__NVIC_SetPriority+0x4c>)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	0112      	lsls	r2, r2, #4
 80001d8:	b2d2      	uxtb	r2, r2
 80001da:	440b      	add	r3, r1
 80001dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001e0:	e00a      	b.n	80001f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	b2da      	uxtb	r2, r3
 80001e6:	4908      	ldr	r1, [pc, #32]	; (8000208 <__NVIC_SetPriority+0x50>)
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	f003 030f 	and.w	r3, r3, #15
 80001ee:	3b04      	subs	r3, #4
 80001f0:	0112      	lsls	r2, r2, #4
 80001f2:	b2d2      	uxtb	r2, r2
 80001f4:	440b      	add	r3, r1
 80001f6:	761a      	strb	r2, [r3, #24]
}
 80001f8:	bf00      	nop
 80001fa:	370c      	adds	r7, #12
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bc80      	pop	{r7}
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	e000e100 	.word	0xe000e100
 8000208:	e000ed00 	.word	0xe000ed00

0800020c <initClk>:
char RxBuffer[RX_BUFF_SIZE];					//Буфер приёма USART
char TxBuffer[TX_BUFF_SIZE];					//Буфер передачи USART
bool ComReceived;

void initClk(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
	// Enable HSI
	RCC->CR |= RCC_CR_HSION;
 8000210:	4b2e      	ldr	r3, [pc, #184]	; (80002cc <initClk+0xc0>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a2d      	ldr	r2, [pc, #180]	; (80002cc <initClk+0xc0>)
 8000216:	f043 0301 	orr.w	r3, r3, #1
 800021a:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSIRDY)){};
 800021c:	bf00      	nop
 800021e:	4b2b      	ldr	r3, [pc, #172]	; (80002cc <initClk+0xc0>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f003 0302 	and.w	r3, r3, #2
 8000226:	2b00      	cmp	r3, #0
 8000228:	d0f9      	beq.n	800021e <initClk+0x12>
	// Enable Prefetch Buffer
	FLASH->ACR |= FLASH_ACR_PRFTBE;
 800022a:	4b29      	ldr	r3, [pc, #164]	; (80002d0 <initClk+0xc4>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4a28      	ldr	r2, [pc, #160]	; (80002d0 <initClk+0xc4>)
 8000230:	f043 0310 	orr.w	r3, r3, #16
 8000234:	6013      	str	r3, [r2, #0]
	// Flash 2 wait state
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 8000236:	4b26      	ldr	r3, [pc, #152]	; (80002d0 <initClk+0xc4>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4a25      	ldr	r2, [pc, #148]	; (80002d0 <initClk+0xc4>)
 800023c:	f023 0307 	bic.w	r3, r3, #7
 8000240:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_2;
 8000242:	4b23      	ldr	r3, [pc, #140]	; (80002d0 <initClk+0xc4>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a22      	ldr	r2, [pc, #136]	; (80002d0 <initClk+0xc4>)
 8000248:	f043 0304 	orr.w	r3, r3, #4
 800024c:	6013      	str	r3, [r2, #0]
	// HCLK = SYSCLK
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800024e:	4b1f      	ldr	r3, [pc, #124]	; (80002cc <initClk+0xc0>)
 8000250:	4a1e      	ldr	r2, [pc, #120]	; (80002cc <initClk+0xc0>)
 8000252:	685b      	ldr	r3, [r3, #4]
 8000254:	6053      	str	r3, [r2, #4]
	// PCLK2 = HCLK
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000256:	4b1d      	ldr	r3, [pc, #116]	; (80002cc <initClk+0xc0>)
 8000258:	4a1c      	ldr	r2, [pc, #112]	; (80002cc <initClk+0xc0>)
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	6053      	str	r3, [r2, #4]
	// PCLK1 = HCLK/2
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 800025e:	4b1b      	ldr	r3, [pc, #108]	; (80002cc <initClk+0xc0>)
 8000260:	685b      	ldr	r3, [r3, #4]
 8000262:	4a1a      	ldr	r2, [pc, #104]	; (80002cc <initClk+0xc0>)
 8000264:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000268:	6053      	str	r3, [r2, #4]
	// PLL configuration: PLLCLK = HSI/2 * 16 = 64 MHz
	RCC->CFGR &= ~RCC_CFGR_PLLSRC;
 800026a:	4b18      	ldr	r3, [pc, #96]	; (80002cc <initClk+0xc0>)
 800026c:	685b      	ldr	r3, [r3, #4]
 800026e:	4a17      	ldr	r2, [pc, #92]	; (80002cc <initClk+0xc0>)
 8000270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000274:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLMULL16;
 8000276:	4b15      	ldr	r3, [pc, #84]	; (80002cc <initClk+0xc0>)
 8000278:	685b      	ldr	r3, [r3, #4]
 800027a:	4a14      	ldr	r2, [pc, #80]	; (80002cc <initClk+0xc0>)
 800027c:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8000280:	6053      	str	r3, [r2, #4]
	// Enable PLL
	RCC->CR |= RCC_CR_PLLON;
 8000282:	4b12      	ldr	r3, [pc, #72]	; (80002cc <initClk+0xc0>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a11      	ldr	r2, [pc, #68]	; (80002cc <initClk+0xc0>)
 8000288:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800028c:	6013      	str	r3, [r2, #0]
	// Wait till PLL is ready
	while((RCC->CR & RCC_CR_PLLRDY) == 0) {};
 800028e:	bf00      	nop
 8000290:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <initClk+0xc0>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000298:	2b00      	cmp	r3, #0
 800029a:	d0f9      	beq.n	8000290 <initClk+0x84>
	// Select PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <initClk+0xc0>)
 800029e:	685b      	ldr	r3, [r3, #4]
 80002a0:	4a0a      	ldr	r2, [pc, #40]	; (80002cc <initClk+0xc0>)
 80002a2:	f023 0303 	bic.w	r3, r3, #3
 80002a6:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80002a8:	4b08      	ldr	r3, [pc, #32]	; (80002cc <initClk+0xc0>)
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	4a07      	ldr	r2, [pc, #28]	; (80002cc <initClk+0xc0>)
 80002ae:	f043 0302 	orr.w	r3, r3, #2
 80002b2:	6053      	str	r3, [r2, #4]
	// Wait till PLL is used as system clock source
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL){};
 80002b4:	bf00      	nop
 80002b6:	4b05      	ldr	r3, [pc, #20]	; (80002cc <initClk+0xc0>)
 80002b8:	685b      	ldr	r3, [r3, #4]
 80002ba:	f003 030c 	and.w	r3, r3, #12
 80002be:	2b08      	cmp	r3, #8
 80002c0:	d1f9      	bne.n	80002b6 <initClk+0xaa>
}
 80002c2:	bf00      	nop
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	40021000 	.word	0x40021000
 80002d0:	40022000 	.word	0x40022000

080002d4 <initUSART2>:
	TIM3->ARR = period;
	TIM3->CCR1 = period/2;
}

void initUSART2(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80002d8:	4b20      	ldr	r3, [pc, #128]	; (800035c <initUSART2+0x88>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a1f      	ldr	r2, [pc, #124]	; (800035c <initUSART2+0x88>)
 80002de:	f043 0304 	orr.w	r3, r3, #4
 80002e2:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;						//включить тактирование альтернативных ф-ций портов
 80002e4:	4b1d      	ldr	r3, [pc, #116]	; (800035c <initUSART2+0x88>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a1c      	ldr	r2, [pc, #112]	; (800035c <initUSART2+0x88>)
 80002ea:	f043 0301 	orr.w	r3, r3, #1
 80002ee:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;					//включить тактирование UART2
 80002f0:	4b1a      	ldr	r3, [pc, #104]	; (800035c <initUSART2+0x88>)
 80002f2:	69db      	ldr	r3, [r3, #28]
 80002f4:	4a19      	ldr	r2, [pc, #100]	; (800035c <initUSART2+0x88>)
 80002f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002fa:	61d3      	str	r3, [r2, #28]

	GPIOA->CRL &= ~(GPIO_CRL_MODE2 | GPIO_CRL_CNF2);		//PA2 на выход
 80002fc:	4b18      	ldr	r3, [pc, #96]	; (8000360 <initUSART2+0x8c>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a17      	ldr	r2, [pc, #92]	; (8000360 <initUSART2+0x8c>)
 8000302:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000306:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (GPIO_CRL_MODE2_1 | GPIO_CRL_CNF2_1);
 8000308:	4b15      	ldr	r3, [pc, #84]	; (8000360 <initUSART2+0x8c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a14      	ldr	r2, [pc, #80]	; (8000360 <initUSART2+0x8c>)
 800030e:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 8000312:	6013      	str	r3, [r2, #0]

	GPIOA->CRL &= ~(GPIO_CRL_MODE3 | GPIO_CRL_CNF3);		//PA3 - вход
 8000314:	4b12      	ldr	r3, [pc, #72]	; (8000360 <initUSART2+0x8c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a11      	ldr	r2, [pc, #68]	; (8000360 <initUSART2+0x8c>)
 800031a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800031e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_CNF3_0;
 8000320:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <initUSART2+0x8c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a0e      	ldr	r2, [pc, #56]	; (8000360 <initUSART2+0x8c>)
 8000326:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800032a:	6013      	str	r3, [r2, #0]
	1. USARTDIV = 32'000'000/(16*115200) = 17.36
	2. 17 = 0x11
	3. 16*0.4 = 6
	4. Итого 0x116
	*****************************************/
	USART2->BRR = 0x116;
 800032c:	4b0d      	ldr	r3, [pc, #52]	; (8000364 <initUSART2+0x90>)
 800032e:	f44f 728b 	mov.w	r2, #278	; 0x116
 8000332:	609a      	str	r2, [r3, #8]

	USART2->CR1 |= USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 8000334:	4b0b      	ldr	r3, [pc, #44]	; (8000364 <initUSART2+0x90>)
 8000336:	68db      	ldr	r3, [r3, #12]
 8000338:	4a0a      	ldr	r2, [pc, #40]	; (8000364 <initUSART2+0x90>)
 800033a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800033e:	f043 030c 	orr.w	r3, r3, #12
 8000342:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RXNEIE;						//разрешить прерывание по приему байта данных
 8000344:	4b07      	ldr	r3, [pc, #28]	; (8000364 <initUSART2+0x90>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	4a06      	ldr	r2, [pc, #24]	; (8000364 <initUSART2+0x90>)
 800034a:	f043 0320 	orr.w	r3, r3, #32
 800034e:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(USART2_IRQn);
 8000350:	2026      	movs	r0, #38	; 0x26
 8000352:	f7ff ff15 	bl	8000180 <__NVIC_EnableIRQ>
}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40021000 	.word	0x40021000
 8000360:	40010800 	.word	0x40010800
 8000364:	40004400 	.word	0x40004400

08000368 <initTIM3_PWM>:
		while ((USART2->SR & USART_SR_TC)==0) {};			//ждём окончания передачи
	}
}

void initTIM3_PWM(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 800036c:	4b22      	ldr	r3, [pc, #136]	; (80003f8 <initTIM3_PWM+0x90>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a21      	ldr	r2, [pc, #132]	; (80003f8 <initTIM3_PWM+0x90>)
 8000372:	f043 0304 	orr.w	r3, r3, #4
 8000376:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= ~(GPIO_CRL_CNF6 | GPIO_CRL_MODE6);
 8000378:	4b20      	ldr	r3, [pc, #128]	; (80003fc <initTIM3_PWM+0x94>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a1f      	ldr	r2, [pc, #124]	; (80003fc <initTIM3_PWM+0x94>)
 800037e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000382:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_MODE6_0|GPIO_CRL_CNF6_1;	//PA6, альтернативный выход 2МГц
 8000384:	4b1d      	ldr	r3, [pc, #116]	; (80003fc <initTIM3_PWM+0x94>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a1c      	ldr	r2, [pc, #112]	; (80003fc <initTIM3_PWM+0x94>)
 800038a:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
 800038e:	6013      	str	r3, [r2, #0]

	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;				//Включить тактирование TIM3
 8000390:	4b19      	ldr	r3, [pc, #100]	; (80003f8 <initTIM3_PWM+0x90>)
 8000392:	69db      	ldr	r3, [r3, #28]
 8000394:	4a18      	ldr	r2, [pc, #96]	; (80003f8 <initTIM3_PWM+0x90>)
 8000396:	f043 0302 	orr.w	r3, r3, #2
 800039a:	61d3      	str	r3, [r2, #28]

	//Частота APB1 для таймеров = APB1Clk * 2 = 32МГц * 2 = 64МГц
	TIM3->PSC = 100-1;								//Предделитель частоты (64000МГц/100 = 640кГц)
 800039c:	4b18      	ldr	r3, [pc, #96]	; (8000400 <initTIM3_PWM+0x98>)
 800039e:	2263      	movs	r2, #99	; 0x63
 80003a0:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 320-1;								//Модуль счёта таймера (640кГц/320 = 2кГц)
 80003a2:	4b17      	ldr	r3, [pc, #92]	; (8000400 <initTIM3_PWM+0x98>)
 80003a4:	f240 123f 	movw	r2, #319	; 0x13f
 80003a8:	62da      	str	r2, [r3, #44]	; 0x2c
	//TIM2->ARR = 80-1;								//Модуль счёта таймера (640кГц/80 = 8кГц)
	TIM3->CCR1 = TIM3->ARR/2;
 80003aa:	4b15      	ldr	r3, [pc, #84]	; (8000400 <initTIM3_PWM+0x98>)
 80003ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ae:	4a14      	ldr	r2, [pc, #80]	; (8000400 <initTIM3_PWM+0x98>)
 80003b0:	085b      	lsrs	r3, r3, #1
 80003b2:	6353      	str	r3, [r2, #52]	; 0x34
	TIM3->DIER |= TIM_DIER_UIE;						//Разрешить прерывание по переполнению таймера
 80003b4:	4b12      	ldr	r3, [pc, #72]	; (8000400 <initTIM3_PWM+0x98>)
 80003b6:	68db      	ldr	r3, [r3, #12]
 80003b8:	4a11      	ldr	r2, [pc, #68]	; (8000400 <initTIM3_PWM+0x98>)
 80003ba:	f043 0301 	orr.w	r3, r3, #1
 80003be:	60d3      	str	r3, [r2, #12]
	TIM3->CCER |= TIM_CCER_CC1E;					//разблокируем выход
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <initTIM3_PWM+0x98>)
 80003c2:	6a1b      	ldr	r3, [r3, #32]
 80003c4:	4a0e      	ldr	r2, [pc, #56]	; (8000400 <initTIM3_PWM+0x98>)
 80003c6:	f043 0301 	orr.w	r3, r3, #1
 80003ca:	6213      	str	r3, [r2, #32]
	TIM3->CCMR1 |= TIM_CCMR1_OC1M; 					//pwm mod1 110
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <initTIM3_PWM+0x98>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a0b      	ldr	r2, [pc, #44]	; (8000400 <initTIM3_PWM+0x98>)
 80003d2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80003d6:	6193      	str	r3, [r2, #24]
	TIM3->CR1 |= TIM_CR1_CEN;						//Включить таймер
 80003d8:	4b09      	ldr	r3, [pc, #36]	; (8000400 <initTIM3_PWM+0x98>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a08      	ldr	r2, [pc, #32]	; (8000400 <initTIM3_PWM+0x98>)
 80003de:	f043 0301 	orr.w	r3, r3, #1
 80003e2:	6013      	str	r3, [r2, #0]

	NVIC_EnableIRQ(TIM3_IRQn);				//Рарзрешить прерывание от TIM2
 80003e4:	201d      	movs	r0, #29
 80003e6:	f7ff fecb 	bl	8000180 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM3_IRQn, 1);			//Выставляем приоритет
 80003ea:	2101      	movs	r1, #1
 80003ec:	201d      	movs	r0, #29
 80003ee:	f7ff fee3 	bl	80001b8 <__NVIC_SetPriority>
}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40021000 	.word	0x40021000
 80003fc:	40010800 	.word	0x40010800
 8000400:	40000400 	.word	0x40000400

08000404 <initGPIO>:
	memset(RxBuffer,0,RX_BUFF_SIZE);						//Очистка буфера приёма
	ComReceived = false;									//Сбрасываем флаг приёма строки
}

void initGPIO()
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;			//включить тактирование GPIOA
 8000408:	4b40      	ldr	r3, [pc, #256]	; (800050c <initGPIO+0x108>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	4a3f      	ldr	r2, [pc, #252]	; (800050c <initGPIO+0x108>)
 800040e:	f043 0304 	orr.w	r3, r3, #4
 8000412:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8000414:	4b3d      	ldr	r3, [pc, #244]	; (800050c <initGPIO+0x108>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a3c      	ldr	r2, [pc, #240]	; (800050c <initGPIO+0x108>)
 800041a:	f043 0301 	orr.w	r3, r3, #1
 800041e:	6193      	str	r3, [r2, #24]

	//очистка полей
	GPIOA->CRL &= ~(GPIO_CRL_CNF5 | GPIO_CRL_MODE5);
 8000420:	4b3b      	ldr	r3, [pc, #236]	; (8000510 <initGPIO+0x10c>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a3a      	ldr	r2, [pc, #232]	; (8000510 <initGPIO+0x10c>)
 8000426:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800042a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_MODE5_1;				//PA5, выход 2МГц
 800042c:	4b38      	ldr	r3, [pc, #224]	; (8000510 <initGPIO+0x10c>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a37      	ldr	r2, [pc, #220]	; (8000510 <initGPIO+0x10c>)
 8000432:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000436:	6013      	str	r3, [r2, #0]

	GPIOA->CRH &= ~(GPIO_CRH_CNF8 | GPIO_CRH_MODE8);
 8000438:	4b35      	ldr	r3, [pc, #212]	; (8000510 <initGPIO+0x10c>)
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	4a34      	ldr	r2, [pc, #208]	; (8000510 <initGPIO+0x10c>)
 800043e:	f023 030f 	bic.w	r3, r3, #15
 8000442:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_MODE8_1;				//PA8, выход 2МГц
 8000444:	4b32      	ldr	r3, [pc, #200]	; (8000510 <initGPIO+0x10c>)
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	4a31      	ldr	r2, [pc, #196]	; (8000510 <initGPIO+0x10c>)
 800044a:	f043 0302 	orr.w	r3, r3, #2
 800044e:	6053      	str	r3, [r2, #4]

	GPIOA->CRH &= ~(GPIO_CRH_CNF9 | GPIO_CRH_MODE9);
 8000450:	4b2f      	ldr	r3, [pc, #188]	; (8000510 <initGPIO+0x10c>)
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	4a2e      	ldr	r2, [pc, #184]	; (8000510 <initGPIO+0x10c>)
 8000456:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800045a:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_MODE9_1;				//PA9, выход 2МГц
 800045c:	4b2c      	ldr	r3, [pc, #176]	; (8000510 <initGPIO+0x10c>)
 800045e:	685b      	ldr	r3, [r3, #4]
 8000460:	4a2b      	ldr	r2, [pc, #172]	; (8000510 <initGPIO+0x10c>)
 8000462:	f043 0320 	orr.w	r3, r3, #32
 8000466:	6053      	str	r3, [r2, #4]

	GPIOA->CRH &= ~(GPIO_CRH_MODE11 | GPIO_CRH_CNF11);
 8000468:	4b29      	ldr	r3, [pc, #164]	; (8000510 <initGPIO+0x10c>)
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	4a28      	ldr	r2, [pc, #160]	; (8000510 <initGPIO+0x10c>)
 800046e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000472:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF11_1;			//Вход с подтяжкой
 8000474:	4b26      	ldr	r3, [pc, #152]	; (8000510 <initGPIO+0x10c>)
 8000476:	685b      	ldr	r3, [r3, #4]
 8000478:	4a25      	ldr	r2, [pc, #148]	; (8000510 <initGPIO+0x10c>)
 800047a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800047e:	6053      	str	r3, [r2, #4]
	GPIOA->BSRR |= GPIO_BSRR_BS11;			//Подтяжка к Vdd
 8000480:	4b23      	ldr	r3, [pc, #140]	; (8000510 <initGPIO+0x10c>)
 8000482:	691b      	ldr	r3, [r3, #16]
 8000484:	4a22      	ldr	r2, [pc, #136]	; (8000510 <initGPIO+0x10c>)
 8000486:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800048a:	6113      	str	r3, [r2, #16]

	GPIOA->CRH &= ~(GPIO_CRH_MODE14 | GPIO_CRH_CNF14);
 800048c:	4b20      	ldr	r3, [pc, #128]	; (8000510 <initGPIO+0x10c>)
 800048e:	685b      	ldr	r3, [r3, #4]
 8000490:	4a1f      	ldr	r2, [pc, #124]	; (8000510 <initGPIO+0x10c>)
 8000492:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000496:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF14_1;			//Вход с подтяжкой
 8000498:	4b1d      	ldr	r3, [pc, #116]	; (8000510 <initGPIO+0x10c>)
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	4a1c      	ldr	r2, [pc, #112]	; (8000510 <initGPIO+0x10c>)
 800049e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80004a2:	6053      	str	r3, [r2, #4]

	GPIOA->CRH &= ~(GPIO_CRH_MODE15 | GPIO_CRH_CNF15);
 80004a4:	4b1a      	ldr	r3, [pc, #104]	; (8000510 <initGPIO+0x10c>)
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	4a19      	ldr	r2, [pc, #100]	; (8000510 <initGPIO+0x10c>)
 80004aa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80004ae:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF15_1;			//Вход с подтяжкой
 80004b0:	4b17      	ldr	r3, [pc, #92]	; (8000510 <initGPIO+0x10c>)
 80004b2:	685b      	ldr	r3, [r3, #4]
 80004b4:	4a16      	ldr	r2, [pc, #88]	; (8000510 <initGPIO+0x10c>)
 80004b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004ba:	6053      	str	r3, [r2, #4]

	// Настройка альтернативных фукнций портов.
	// Настройки портов с 12 по 15 хранятся в регистре AFIO_EXTICR4.
	// Регистры объединены в массив AFIO->EXTICR, нумерация массива начинается с нулевого элемента.
	// Поэтому настройки AFIO_EXTICR4 хранятся в AFIO->EXTICR[3]
	AFIO->EXTICR[2] |= AFIO_EXTICR3_EXTI11_PC;
 80004bc:	4b15      	ldr	r3, [pc, #84]	; (8000514 <initGPIO+0x110>)
 80004be:	691b      	ldr	r3, [r3, #16]
 80004c0:	4a14      	ldr	r2, [pc, #80]	; (8000514 <initGPIO+0x110>)
 80004c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004c6:	6113      	str	r3, [r2, #16]
	AFIO->EXTICR[3] |= AFIO_EXTICR4_EXTI14_PC;
 80004c8:	4b12      	ldr	r3, [pc, #72]	; (8000514 <initGPIO+0x110>)
 80004ca:	695b      	ldr	r3, [r3, #20]
 80004cc:	4a11      	ldr	r2, [pc, #68]	; (8000514 <initGPIO+0x110>)
 80004ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d2:	6153      	str	r3, [r2, #20]
	AFIO->EXTICR[3] |= AFIO_EXTICR4_EXTI15_PC;
 80004d4:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <initGPIO+0x110>)
 80004d6:	695b      	ldr	r3, [r3, #20]
 80004d8:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <initGPIO+0x110>)
 80004da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004de:	6153      	str	r3, [r2, #20]

	EXTI->FTSR |= EXTI_FTSR_TR11 | EXTI_FTSR_TR14 | EXTI_FTSR_TR15;			//Прерывание по спаду импульса (при нажатии на кнопку)
 80004e0:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <initGPIO+0x114>)
 80004e2:	68db      	ldr	r3, [r3, #12]
 80004e4:	4a0c      	ldr	r2, [pc, #48]	; (8000518 <initGPIO+0x114>)
 80004e6:	f443 4348 	orr.w	r3, r3, #51200	; 0xc800
 80004ea:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= EXTI_IMR_MR11 | EXTI_IMR_MR14 | EXTI_IMR_MR15;				//Выставляем маску - EXTI13
 80004ec:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <initGPIO+0x114>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a09      	ldr	r2, [pc, #36]	; (8000518 <initGPIO+0x114>)
 80004f2:	f443 4348 	orr.w	r3, r3, #51200	; 0xc800
 80004f6:	6013      	str	r3, [r2, #0]

	NVIC_EnableIRQ(EXTI15_10_IRQn);			//Разрешаем прерывание
 80004f8:	2028      	movs	r0, #40	; 0x28
 80004fa:	f7ff fe41 	bl	8000180 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI15_10_IRQn, 0);	//Выставляем приоритет
 80004fe:	2100      	movs	r1, #0
 8000500:	2028      	movs	r0, #40	; 0x28
 8000502:	f7ff fe59 	bl	80001b8 <__NVIC_SetPriority>
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40021000 	.word	0x40021000
 8000510:	40010800 	.word	0x40010800
 8000514:	40010000 	.word	0x40010000
 8000518:	40010400 	.word	0x40010400

0800051c <main>:


int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	initClk();
 8000520:	f7ff fe74 	bl	800020c <initClk>
	initTIM3_PWM();
 8000524:	f7ff ff20 	bl	8000368 <initTIM3_PWM>
	initUSART2();
 8000528:	f7ff fed4 	bl	80002d4 <initUSART2>
	initGPIO();
 800052c:	f7ff ff6a 	bl	8000404 <initGPIO>
    /* Loop forever */
	while(1)
 8000530:	e7fe      	b.n	8000530 <main+0x14>
	...

08000534 <EXTI15_10_IRQHandler>:
	{
	}
}

void EXTI15_10_IRQHandler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR11) 		// нас интересует EXTI14
 8000538:	4b13      	ldr	r3, [pc, #76]	; (8000588 <EXTI15_10_IRQHandler+0x54>)
 800053a:	695b      	ldr	r3, [r3, #20]
 800053c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000540:	2b00      	cmp	r3, #0
 8000542:	d005      	beq.n	8000550 <EXTI15_10_IRQHandler+0x1c>
	{
		EXTI->PR |= EXTI_PR_PR11;
 8000544:	4b10      	ldr	r3, [pc, #64]	; (8000588 <EXTI15_10_IRQHandler+0x54>)
 8000546:	695b      	ldr	r3, [r3, #20]
 8000548:	4a0f      	ldr	r2, [pc, #60]	; (8000588 <EXTI15_10_IRQHandler+0x54>)
 800054a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800054e:	6153      	str	r3, [r2, #20]
	}
	if (EXTI->PR & EXTI_PR_PR14) 		// нас интересует EXTI14
 8000550:	4b0d      	ldr	r3, [pc, #52]	; (8000588 <EXTI15_10_IRQHandler+0x54>)
 8000552:	695b      	ldr	r3, [r3, #20]
 8000554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000558:	2b00      	cmp	r3, #0
 800055a:	d005      	beq.n	8000568 <EXTI15_10_IRQHandler+0x34>
	{
		EXTI->PR |= EXTI_PR_PR14;
 800055c:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <EXTI15_10_IRQHandler+0x54>)
 800055e:	695b      	ldr	r3, [r3, #20]
 8000560:	4a09      	ldr	r2, [pc, #36]	; (8000588 <EXTI15_10_IRQHandler+0x54>)
 8000562:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000566:	6153      	str	r3, [r2, #20]
	}
	if (EXTI->PR & EXTI_PR_PR15) 		// нас интересует EXTI15
 8000568:	4b07      	ldr	r3, [pc, #28]	; (8000588 <EXTI15_10_IRQHandler+0x54>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000570:	2b00      	cmp	r3, #0
 8000572:	d005      	beq.n	8000580 <EXTI15_10_IRQHandler+0x4c>
	{
		EXTI->PR |= EXTI_PR_PR15;
 8000574:	4b04      	ldr	r3, [pc, #16]	; (8000588 <EXTI15_10_IRQHandler+0x54>)
 8000576:	695b      	ldr	r3, [r3, #20]
 8000578:	4a03      	ldr	r2, [pc, #12]	; (8000588 <EXTI15_10_IRQHandler+0x54>)
 800057a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800057e:	6153      	str	r3, [r2, #20]
	}
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr
 8000588:	40010400 	.word	0x40010400

0800058c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
	if ((USART2->SR & USART_SR_RXNE)!=0)		//Прерывание по приёму данных?
 8000592:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <USART2_IRQHandler+0x4c>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f003 0320 	and.w	r3, r3, #32
 800059a:	2b00      	cmp	r3, #0
 800059c:	d019      	beq.n	80005d2 <USART2_IRQHandler+0x46>
	{
		uint8_t pos = strlen(RxBuffer);			//Вычисляем позицию свободной ячейки
 800059e:	480f      	ldr	r0, [pc, #60]	; (80005dc <USART2_IRQHandler+0x50>)
 80005a0:	f7ff fde6 	bl	8000170 <strlen>
 80005a4:	4603      	mov	r3, r0
 80005a6:	71fb      	strb	r3, [r7, #7]

		RxBuffer[pos] = USART2->DR;				//Считываем содержимое регистра данных
 80005a8:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <USART2_IRQHandler+0x4c>)
 80005aa:	685a      	ldr	r2, [r3, #4]
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	b2d1      	uxtb	r1, r2
 80005b0:	4a0a      	ldr	r2, [pc, #40]	; (80005dc <USART2_IRQHandler+0x50>)
 80005b2:	54d1      	strb	r1, [r2, r3]

		if ((RxBuffer[pos]== 0x0A) && (RxBuffer[pos-1]== 0x0D))							//Если это символ конца строки
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	4a09      	ldr	r2, [pc, #36]	; (80005dc <USART2_IRQHandler+0x50>)
 80005b8:	5cd3      	ldrb	r3, [r2, r3]
 80005ba:	2b0a      	cmp	r3, #10
 80005bc:	d109      	bne.n	80005d2 <USART2_IRQHandler+0x46>
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	3b01      	subs	r3, #1
 80005c2:	4a06      	ldr	r2, [pc, #24]	; (80005dc <USART2_IRQHandler+0x50>)
 80005c4:	5cd3      	ldrb	r3, [r2, r3]
 80005c6:	2b0d      	cmp	r3, #13
 80005c8:	d103      	bne.n	80005d2 <USART2_IRQHandler+0x46>
		{
			ComReceived = true;					//- выставляем флаг приёма строки
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <USART2_IRQHandler+0x54>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	701a      	strb	r2, [r3, #0]
			return;								//- и выходим
 80005d0:	bf00      	nop
		}
	}
}
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40004400 	.word	0x40004400
 80005dc:	2000001c 	.word	0x2000001c
 80005e0:	2000011c 	.word	0x2000011c

080005e4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
	TIM3->SR &= ~TIM_SR_UIF;			//Сброс флага переполнения
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <TIM3_IRQHandler+0x18>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a03      	ldr	r2, [pc, #12]	; (80005fc <TIM3_IRQHandler+0x18>)
 80005ee:	f023 0301 	bic.w	r3, r3, #1
 80005f2:	6113      	str	r3, [r2, #16]
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr
 80005fc:	40000400 	.word	0x40000400

08000600 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000600:	480d      	ldr	r0, [pc, #52]	; (8000638 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000602:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000604:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000608:	480c      	ldr	r0, [pc, #48]	; (800063c <LoopForever+0x6>)
  ldr r1, =_edata
 800060a:	490d      	ldr	r1, [pc, #52]	; (8000640 <LoopForever+0xa>)
  ldr r2, =_sidata
 800060c:	4a0d      	ldr	r2, [pc, #52]	; (8000644 <LoopForever+0xe>)
  movs r3, #0
 800060e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000610:	e002      	b.n	8000618 <LoopCopyDataInit>

08000612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000616:	3304      	adds	r3, #4

08000618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800061a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800061c:	d3f9      	bcc.n	8000612 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800061e:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000620:	4c0a      	ldr	r4, [pc, #40]	; (800064c <LoopForever+0x16>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000624:	e001      	b.n	800062a <LoopFillZerobss>

08000626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000628:	3204      	adds	r2, #4

0800062a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800062a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800062c:	d3fb      	bcc.n	8000626 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800062e:	f000 f811 	bl	8000654 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000632:	f7ff ff73 	bl	800051c <main>

08000636 <LoopForever>:

LoopForever:
  b LoopForever
 8000636:	e7fe      	b.n	8000636 <LoopForever>
  ldr   r0, =_estack
 8000638:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800063c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000640:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000644:	080006bc 	.word	0x080006bc
  ldr r2, =_sbss
 8000648:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800064c:	20000120 	.word	0x20000120

08000650 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000650:	e7fe      	b.n	8000650 <ADC1_2_IRQHandler>
	...

08000654 <__libc_init_array>:
 8000654:	b570      	push	{r4, r5, r6, lr}
 8000656:	2600      	movs	r6, #0
 8000658:	4d0c      	ldr	r5, [pc, #48]	; (800068c <__libc_init_array+0x38>)
 800065a:	4c0d      	ldr	r4, [pc, #52]	; (8000690 <__libc_init_array+0x3c>)
 800065c:	1b64      	subs	r4, r4, r5
 800065e:	10a4      	asrs	r4, r4, #2
 8000660:	42a6      	cmp	r6, r4
 8000662:	d109      	bne.n	8000678 <__libc_init_array+0x24>
 8000664:	f000 f81a 	bl	800069c <_init>
 8000668:	2600      	movs	r6, #0
 800066a:	4d0a      	ldr	r5, [pc, #40]	; (8000694 <__libc_init_array+0x40>)
 800066c:	4c0a      	ldr	r4, [pc, #40]	; (8000698 <__libc_init_array+0x44>)
 800066e:	1b64      	subs	r4, r4, r5
 8000670:	10a4      	asrs	r4, r4, #2
 8000672:	42a6      	cmp	r6, r4
 8000674:	d105      	bne.n	8000682 <__libc_init_array+0x2e>
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f855 3b04 	ldr.w	r3, [r5], #4
 800067c:	4798      	blx	r3
 800067e:	3601      	adds	r6, #1
 8000680:	e7ee      	b.n	8000660 <__libc_init_array+0xc>
 8000682:	f855 3b04 	ldr.w	r3, [r5], #4
 8000686:	4798      	blx	r3
 8000688:	3601      	adds	r6, #1
 800068a:	e7f2      	b.n	8000672 <__libc_init_array+0x1e>
 800068c:	080006b4 	.word	0x080006b4
 8000690:	080006b4 	.word	0x080006b4
 8000694:	080006b4 	.word	0x080006b4
 8000698:	080006b8 	.word	0x080006b8

0800069c <_init>:
 800069c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800069e:	bf00      	nop
 80006a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006a2:	bc08      	pop	{r3}
 80006a4:	469e      	mov	lr, r3
 80006a6:	4770      	bx	lr

080006a8 <_fini>:
 80006a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006aa:	bf00      	nop
 80006ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ae:	bc08      	pop	{r3}
 80006b0:	469e      	mov	lr, r3
 80006b2:	4770      	bx	lr
