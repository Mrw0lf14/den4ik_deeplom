
den4ik_deeplom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001528  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08001658  08001658  00011658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800186c  0800186c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800186c  0800186c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800186c  0800186c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800186c  0800186c  0001186c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001870  08001870  00011870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000068  080018dc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  080018dc  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000de8  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003aa  00000000  00000000  00020e79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000e0  00000000  00000000  00021228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000b8  00000000  00000000  00021308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011099  00000000  00000000  000213c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ff8  00000000  00000000  00032459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058f7f  00000000  00000000  00033451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008c3d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a04  00000000  00000000  0008c420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000068 	.word	0x20000068
 800014c:	00000000 	.word	0x00000000
 8000150:	08001640 	.word	0x08001640

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000006c 	.word	0x2000006c
 800016c:	08001640 	.word	0x08001640

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	4603      	mov	r3, r0
 8000188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	2b00      	cmp	r3, #0
 8000190:	db0b      	blt.n	80001aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	f003 021f 	and.w	r2, r3, #31
 8000198:	4906      	ldr	r1, [pc, #24]	; (80001b4 <__NVIC_EnableIRQ+0x34>)
 800019a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800019e:	095b      	lsrs	r3, r3, #5
 80001a0:	2001      	movs	r0, #1
 80001a2:	fa00 f202 	lsl.w	r2, r0, r2
 80001a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001aa:	bf00      	nop
 80001ac:	370c      	adds	r7, #12
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	e000e100 	.word	0xe000e100

080001b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001b8:	b480      	push	{r7}
 80001ba:	b083      	sub	sp, #12
 80001bc:	af00      	add	r7, sp, #0
 80001be:	4603      	mov	r3, r0
 80001c0:	6039      	str	r1, [r7, #0]
 80001c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	db0a      	blt.n	80001e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001cc:	683b      	ldr	r3, [r7, #0]
 80001ce:	b2da      	uxtb	r2, r3
 80001d0:	490c      	ldr	r1, [pc, #48]	; (8000204 <__NVIC_SetPriority+0x4c>)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	0112      	lsls	r2, r2, #4
 80001d8:	b2d2      	uxtb	r2, r2
 80001da:	440b      	add	r3, r1
 80001dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001e0:	e00a      	b.n	80001f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	b2da      	uxtb	r2, r3
 80001e6:	4908      	ldr	r1, [pc, #32]	; (8000208 <__NVIC_SetPriority+0x50>)
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	f003 030f 	and.w	r3, r3, #15
 80001ee:	3b04      	subs	r3, #4
 80001f0:	0112      	lsls	r2, r2, #4
 80001f2:	b2d2      	uxtb	r2, r2
 80001f4:	440b      	add	r3, r1
 80001f6:	761a      	strb	r2, [r3, #24]
}
 80001f8:	bf00      	nop
 80001fa:	370c      	adds	r7, #12
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bc80      	pop	{r7}
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	e000e100 	.word	0xe000e100
 8000208:	e000ed00 	.word	0xe000ed00

0800020c <initClk>:
char TxBuffer[TX_BUFF_SIZE];					//Буфер передачи USART
bool ComReceived;
int32_t rotation = 0;
uint32_t MAX_ROTATION = 1000;
void initClk(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
	// Enable HSI
	RCC->CR |= RCC_CR_HSION;
 8000210:	4b2e      	ldr	r3, [pc, #184]	; (80002cc <initClk+0xc0>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a2d      	ldr	r2, [pc, #180]	; (80002cc <initClk+0xc0>)
 8000216:	f043 0301 	orr.w	r3, r3, #1
 800021a:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSIRDY)){};
 800021c:	bf00      	nop
 800021e:	4b2b      	ldr	r3, [pc, #172]	; (80002cc <initClk+0xc0>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f003 0302 	and.w	r3, r3, #2
 8000226:	2b00      	cmp	r3, #0
 8000228:	d0f9      	beq.n	800021e <initClk+0x12>
	// Enable Prefetch Buffer
	FLASH->ACR |= FLASH_ACR_PRFTBE;
 800022a:	4b29      	ldr	r3, [pc, #164]	; (80002d0 <initClk+0xc4>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4a28      	ldr	r2, [pc, #160]	; (80002d0 <initClk+0xc4>)
 8000230:	f043 0310 	orr.w	r3, r3, #16
 8000234:	6013      	str	r3, [r2, #0]
	// Flash 2 wait state
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 8000236:	4b26      	ldr	r3, [pc, #152]	; (80002d0 <initClk+0xc4>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4a25      	ldr	r2, [pc, #148]	; (80002d0 <initClk+0xc4>)
 800023c:	f023 0307 	bic.w	r3, r3, #7
 8000240:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_2;
 8000242:	4b23      	ldr	r3, [pc, #140]	; (80002d0 <initClk+0xc4>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a22      	ldr	r2, [pc, #136]	; (80002d0 <initClk+0xc4>)
 8000248:	f043 0304 	orr.w	r3, r3, #4
 800024c:	6013      	str	r3, [r2, #0]
	// HCLK = SYSCLK
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800024e:	4b1f      	ldr	r3, [pc, #124]	; (80002cc <initClk+0xc0>)
 8000250:	4a1e      	ldr	r2, [pc, #120]	; (80002cc <initClk+0xc0>)
 8000252:	685b      	ldr	r3, [r3, #4]
 8000254:	6053      	str	r3, [r2, #4]
	// PCLK2 = HCLK
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000256:	4b1d      	ldr	r3, [pc, #116]	; (80002cc <initClk+0xc0>)
 8000258:	4a1c      	ldr	r2, [pc, #112]	; (80002cc <initClk+0xc0>)
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	6053      	str	r3, [r2, #4]
	// PCLK1 = HCLK/2
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 800025e:	4b1b      	ldr	r3, [pc, #108]	; (80002cc <initClk+0xc0>)
 8000260:	685b      	ldr	r3, [r3, #4]
 8000262:	4a1a      	ldr	r2, [pc, #104]	; (80002cc <initClk+0xc0>)
 8000264:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000268:	6053      	str	r3, [r2, #4]
	// PLL configuration: PLLCLK = HSI/2 * 16 = 64 MHz
	RCC->CFGR &= ~RCC_CFGR_PLLSRC;
 800026a:	4b18      	ldr	r3, [pc, #96]	; (80002cc <initClk+0xc0>)
 800026c:	685b      	ldr	r3, [r3, #4]
 800026e:	4a17      	ldr	r2, [pc, #92]	; (80002cc <initClk+0xc0>)
 8000270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000274:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLMULL16;
 8000276:	4b15      	ldr	r3, [pc, #84]	; (80002cc <initClk+0xc0>)
 8000278:	685b      	ldr	r3, [r3, #4]
 800027a:	4a14      	ldr	r2, [pc, #80]	; (80002cc <initClk+0xc0>)
 800027c:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8000280:	6053      	str	r3, [r2, #4]
	// Enable PLL
	RCC->CR |= RCC_CR_PLLON;
 8000282:	4b12      	ldr	r3, [pc, #72]	; (80002cc <initClk+0xc0>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a11      	ldr	r2, [pc, #68]	; (80002cc <initClk+0xc0>)
 8000288:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800028c:	6013      	str	r3, [r2, #0]
	// Wait till PLL is ready
	while((RCC->CR & RCC_CR_PLLRDY) == 0) {};
 800028e:	bf00      	nop
 8000290:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <initClk+0xc0>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000298:	2b00      	cmp	r3, #0
 800029a:	d0f9      	beq.n	8000290 <initClk+0x84>
	// Select PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <initClk+0xc0>)
 800029e:	685b      	ldr	r3, [r3, #4]
 80002a0:	4a0a      	ldr	r2, [pc, #40]	; (80002cc <initClk+0xc0>)
 80002a2:	f023 0303 	bic.w	r3, r3, #3
 80002a6:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80002a8:	4b08      	ldr	r3, [pc, #32]	; (80002cc <initClk+0xc0>)
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	4a07      	ldr	r2, [pc, #28]	; (80002cc <initClk+0xc0>)
 80002ae:	f043 0302 	orr.w	r3, r3, #2
 80002b2:	6053      	str	r3, [r2, #4]
	// Wait till PLL is used as system clock source
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL){};
 80002b4:	bf00      	nop
 80002b6:	4b05      	ldr	r3, [pc, #20]	; (80002cc <initClk+0xc0>)
 80002b8:	685b      	ldr	r3, [r3, #4]
 80002ba:	f003 030c 	and.w	r3, r3, #12
 80002be:	2b08      	cmp	r3, #8
 80002c0:	d1f9      	bne.n	80002b6 <initClk+0xaa>
}
 80002c2:	bf00      	nop
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	40021000 	.word	0x40021000
 80002d0:	40022000 	.word	0x40022000

080002d4 <initUSART1>:
	TIM3->ARR = period;
	TIM3->CCR1 = period/2;
}

void initUSART1(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
    // Включение тактирования GPIOA и USART1
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_AFIOEN | RCC_APB2ENR_USART1EN;
 80002d8:	4b1b      	ldr	r3, [pc, #108]	; (8000348 <initUSART1+0x74>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a1a      	ldr	r2, [pc, #104]	; (8000348 <initUSART1+0x74>)
 80002de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002e2:	f043 0305 	orr.w	r3, r3, #5
 80002e6:	6193      	str	r3, [r2, #24]

    // Настройка PA9 (TX) как alternate function push-pull output
    GPIOA->CRH &= ~(GPIO_CRH_MODE9 | GPIO_CRH_CNF9);
 80002e8:	4b18      	ldr	r3, [pc, #96]	; (800034c <initUSART1+0x78>)
 80002ea:	685b      	ldr	r3, [r3, #4]
 80002ec:	4a17      	ldr	r2, [pc, #92]	; (800034c <initUSART1+0x78>)
 80002ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80002f2:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= (GPIO_CRH_MODE9_1 | GPIO_CRH_MODE9_0) | GPIO_CRH_CNF9_1;
 80002f4:	4b15      	ldr	r3, [pc, #84]	; (800034c <initUSART1+0x78>)
 80002f6:	685b      	ldr	r3, [r3, #4]
 80002f8:	4a14      	ldr	r2, [pc, #80]	; (800034c <initUSART1+0x78>)
 80002fa:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80002fe:	6053      	str	r3, [r2, #4]

    // Настройка PA10 (RX) как input floating
    GPIOA->CRH &= ~(GPIO_CRH_MODE10 | GPIO_CRH_CNF10);
 8000300:	4b12      	ldr	r3, [pc, #72]	; (800034c <initUSART1+0x78>)
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	4a11      	ldr	r2, [pc, #68]	; (800034c <initUSART1+0x78>)
 8000306:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800030a:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= GPIO_CRH_CNF10_0;
 800030c:	4b0f      	ldr	r3, [pc, #60]	; (800034c <initUSART1+0x78>)
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	4a0e      	ldr	r2, [pc, #56]	; (800034c <initUSART1+0x78>)
 8000312:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000316:	6053      	str	r3, [r2, #4]
	1. USARTDIV = 64'000'000/(16*9600) = 416.6
	2. 416 = 0x1A0
	3. 16*0.6 = 9,6
	4. Итого 0xD05
	*****************************************/
    USART1->BRR = 0x1A0A;
 8000318:	4b0d      	ldr	r3, [pc, #52]	; (8000350 <initUSART1+0x7c>)
 800031a:	f641 220a 	movw	r2, #6666	; 0x1a0a
 800031e:	609a      	str	r2, [r3, #8]

    // Включение USART1, передатчика и приемника
    USART1->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8000320:	4b0b      	ldr	r3, [pc, #44]	; (8000350 <initUSART1+0x7c>)
 8000322:	68db      	ldr	r3, [r3, #12]
 8000324:	4a0a      	ldr	r2, [pc, #40]	; (8000350 <initUSART1+0x7c>)
 8000326:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800032a:	f043 030c 	orr.w	r3, r3, #12
 800032e:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_RXNEIE;  // Разрешить прерывание по приему
 8000330:	4b07      	ldr	r3, [pc, #28]	; (8000350 <initUSART1+0x7c>)
 8000332:	68db      	ldr	r3, [r3, #12]
 8000334:	4a06      	ldr	r2, [pc, #24]	; (8000350 <initUSART1+0x7c>)
 8000336:	f043 0320 	orr.w	r3, r3, #32
 800033a:	60d3      	str	r3, [r2, #12]

    NVIC_EnableIRQ(USART1_IRQn);
 800033c:	2025      	movs	r0, #37	; 0x25
 800033e:	f7ff ff1f 	bl	8000180 <__NVIC_EnableIRQ>
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	40021000 	.word	0x40021000
 800034c:	40010800 	.word	0x40010800
 8000350:	40013800 	.word	0x40013800

08000354 <txStr>:

void txStr(char *str)
{
 8000354:	b590      	push	{r4, r7, lr}
 8000356:	b085      	sub	sp, #20
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	uint16_t i;
	strcat(str,"\r\n");									//добавляем символ конца строки
 800035c:	6878      	ldr	r0, [r7, #4]
 800035e:	f7ff ff07 	bl	8000170 <strlen>
 8000362:	4603      	mov	r3, r0
 8000364:	461a      	mov	r2, r3
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4413      	add	r3, r2
 800036a:	4a12      	ldr	r2, [pc, #72]	; (80003b4 <txStr+0x60>)
 800036c:	8811      	ldrh	r1, [r2, #0]
 800036e:	7892      	ldrb	r2, [r2, #2]
 8000370:	8019      	strh	r1, [r3, #0]
 8000372:	709a      	strb	r2, [r3, #2]
	for (i = 0; i < strlen(str); i++)
 8000374:	2300      	movs	r3, #0
 8000376:	81fb      	strh	r3, [r7, #14]
 8000378:	e00f      	b.n	800039a <txStr+0x46>
	{
		USART1->DR = str[i];								//передаём байт данных
 800037a:	89fb      	ldrh	r3, [r7, #14]
 800037c:	687a      	ldr	r2, [r7, #4]
 800037e:	4413      	add	r3, r2
 8000380:	781a      	ldrb	r2, [r3, #0]
 8000382:	4b0d      	ldr	r3, [pc, #52]	; (80003b8 <txStr+0x64>)
 8000384:	605a      	str	r2, [r3, #4]
		while ((USART1->SR & USART_SR_TC)==0) {};			//ждём окончания передачи
 8000386:	bf00      	nop
 8000388:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <txStr+0x64>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000390:	2b00      	cmp	r3, #0
 8000392:	d0f9      	beq.n	8000388 <txStr+0x34>
	for (i = 0; i < strlen(str); i++)
 8000394:	89fb      	ldrh	r3, [r7, #14]
 8000396:	3301      	adds	r3, #1
 8000398:	81fb      	strh	r3, [r7, #14]
 800039a:	89fc      	ldrh	r4, [r7, #14]
 800039c:	6878      	ldr	r0, [r7, #4]
 800039e:	f7ff fee7 	bl	8000170 <strlen>
 80003a2:	4603      	mov	r3, r0
 80003a4:	429c      	cmp	r4, r3
 80003a6:	d3e8      	bcc.n	800037a <txStr+0x26>
	}
}
 80003a8:	bf00      	nop
 80003aa:	bf00      	nop
 80003ac:	3714      	adds	r7, #20
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd90      	pop	{r4, r7, pc}
 80003b2:	bf00      	nop
 80003b4:	08001658 	.word	0x08001658
 80003b8:	40013800 	.word	0x40013800

080003bc <initTIM3_PWM>:

void initTIM3_PWM(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80003c0:	4b22      	ldr	r3, [pc, #136]	; (800044c <initTIM3_PWM+0x90>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a21      	ldr	r2, [pc, #132]	; (800044c <initTIM3_PWM+0x90>)
 80003c6:	f043 0304 	orr.w	r3, r3, #4
 80003ca:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= ~(GPIO_CRL_CNF6 | GPIO_CRL_MODE6);
 80003cc:	4b20      	ldr	r3, [pc, #128]	; (8000450 <initTIM3_PWM+0x94>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a1f      	ldr	r2, [pc, #124]	; (8000450 <initTIM3_PWM+0x94>)
 80003d2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80003d6:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_MODE6_0|GPIO_CRL_CNF6_1;	//PA6, альтернативный выход 2МГц
 80003d8:	4b1d      	ldr	r3, [pc, #116]	; (8000450 <initTIM3_PWM+0x94>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a1c      	ldr	r2, [pc, #112]	; (8000450 <initTIM3_PWM+0x94>)
 80003de:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
 80003e2:	6013      	str	r3, [r2, #0]

	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;				//Включить тактирование TIM3
 80003e4:	4b19      	ldr	r3, [pc, #100]	; (800044c <initTIM3_PWM+0x90>)
 80003e6:	69db      	ldr	r3, [r3, #28]
 80003e8:	4a18      	ldr	r2, [pc, #96]	; (800044c <initTIM3_PWM+0x90>)
 80003ea:	f043 0302 	orr.w	r3, r3, #2
 80003ee:	61d3      	str	r3, [r2, #28]

	//Частота APB1 для таймеров = APB1Clk * 2 = 32МГц * 2 = 64МГц
	TIM3->PSC = 100-1;								//Предделитель частоты (64000МГц/100 = 640кГц)
 80003f0:	4b18      	ldr	r3, [pc, #96]	; (8000454 <initTIM3_PWM+0x98>)
 80003f2:	2263      	movs	r2, #99	; 0x63
 80003f4:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 320-1;								//Модуль счёта таймера (640кГц/320 = 2кГц)
 80003f6:	4b17      	ldr	r3, [pc, #92]	; (8000454 <initTIM3_PWM+0x98>)
 80003f8:	f240 123f 	movw	r2, #319	; 0x13f
 80003fc:	62da      	str	r2, [r3, #44]	; 0x2c
	//TIM2->ARR = 80-1;								//Модуль счёта таймера (640кГц/80 = 8кГц)
	TIM3->CCR1 = TIM3->ARR/2;
 80003fe:	4b15      	ldr	r3, [pc, #84]	; (8000454 <initTIM3_PWM+0x98>)
 8000400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000402:	4a14      	ldr	r2, [pc, #80]	; (8000454 <initTIM3_PWM+0x98>)
 8000404:	085b      	lsrs	r3, r3, #1
 8000406:	6353      	str	r3, [r2, #52]	; 0x34
	TIM3->DIER |= TIM_DIER_UIE;						//Разрешить прерывание по переполнению таймера
 8000408:	4b12      	ldr	r3, [pc, #72]	; (8000454 <initTIM3_PWM+0x98>)
 800040a:	68db      	ldr	r3, [r3, #12]
 800040c:	4a11      	ldr	r2, [pc, #68]	; (8000454 <initTIM3_PWM+0x98>)
 800040e:	f043 0301 	orr.w	r3, r3, #1
 8000412:	60d3      	str	r3, [r2, #12]
	TIM3->CCER |= TIM_CCER_CC1E;					//разблокируем выход
 8000414:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <initTIM3_PWM+0x98>)
 8000416:	6a1b      	ldr	r3, [r3, #32]
 8000418:	4a0e      	ldr	r2, [pc, #56]	; (8000454 <initTIM3_PWM+0x98>)
 800041a:	f043 0301 	orr.w	r3, r3, #1
 800041e:	6213      	str	r3, [r2, #32]
	TIM3->CCMR1 |= TIM_CCMR1_OC1M; 					//pwm mod1 110
 8000420:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <initTIM3_PWM+0x98>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a0b      	ldr	r2, [pc, #44]	; (8000454 <initTIM3_PWM+0x98>)
 8000426:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800042a:	6193      	str	r3, [r2, #24]
	TIM3->CR1 |= TIM_CR1_CEN;						//Включить таймер
 800042c:	4b09      	ldr	r3, [pc, #36]	; (8000454 <initTIM3_PWM+0x98>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a08      	ldr	r2, [pc, #32]	; (8000454 <initTIM3_PWM+0x98>)
 8000432:	f043 0301 	orr.w	r3, r3, #1
 8000436:	6013      	str	r3, [r2, #0]

	NVIC_EnableIRQ(TIM3_IRQn);				//Рарзрешить прерывание от TIM2
 8000438:	201d      	movs	r0, #29
 800043a:	f7ff fea1 	bl	8000180 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM3_IRQn, 1);			//Выставляем приоритет
 800043e:	2101      	movs	r1, #1
 8000440:	201d      	movs	r0, #29
 8000442:	f7ff feb9 	bl	80001b8 <__NVIC_SetPriority>
}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40021000 	.word	0x40021000
 8000450:	40010800 	.word	0x40010800
 8000454:	40000400 	.word	0x40000400

08000458 <stopWindow>:
	EN1_OFF();
	EN2_ON();
	TIM3->CR1 |= TIM_CR1_CEN;
}
void stopWindow(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
	EN1_OFF();
 800045c:	4b08      	ldr	r3, [pc, #32]	; (8000480 <stopWindow+0x28>)
 800045e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000462:	611a      	str	r2, [r3, #16]
	EN2_OFF();
 8000464:	4b06      	ldr	r3, [pc, #24]	; (8000480 <stopWindow+0x28>)
 8000466:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800046a:	611a      	str	r2, [r3, #16]
	TIM3->CR1 &= ~TIM_CR1_CEN;
 800046c:	4b05      	ldr	r3, [pc, #20]	; (8000484 <stopWindow+0x2c>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a04      	ldr	r2, [pc, #16]	; (8000484 <stopWindow+0x2c>)
 8000472:	f023 0301 	bic.w	r3, r3, #1
 8000476:	6013      	str	r3, [r2, #0]
}
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr
 8000480:	40010c00 	.word	0x40010c00
 8000484:	40000400 	.word	0x40000400

08000488 <ExecuteCommand>:
void ExecuteCommand(void)
{
 8000488:	b5b0      	push	{r4, r5, r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
//	txStr(RxBuffer, false);
	memset(TxBuffer,0,sizeof(TxBuffer));					//Очистка буфера передачи
 800048e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000492:	2100      	movs	r1, #0
 8000494:	4854      	ldr	r0, [pc, #336]	; (80005e8 <ExecuteCommand+0x160>)
 8000496:	f000 fab5 	bl	8000a04 <memset>

	/* Обработчик команд */
	if (strncmp(RxBuffer,"*IDN?",5) == 0)					//Это команда "*IDN?"
 800049a:	2205      	movs	r2, #5
 800049c:	4953      	ldr	r1, [pc, #332]	; (80005ec <ExecuteCommand+0x164>)
 800049e:	4854      	ldr	r0, [pc, #336]	; (80005f0 <ExecuteCommand+0x168>)
 80004a0:	f000 fae4 	bl	8000a6c <strncmp>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d10a      	bne.n	80004c0 <ExecuteCommand+0x38>
	{
		//Она самая, возвращаем строку идентификации
		strcpy(TxBuffer, "Denis Chernishev, IU4-31M");
 80004aa:	4a4f      	ldr	r2, [pc, #316]	; (80005e8 <ExecuteCommand+0x160>)
 80004ac:	4b51      	ldr	r3, [pc, #324]	; (80005f4 <ExecuteCommand+0x16c>)
 80004ae:	4614      	mov	r4, r2
 80004b0:	461d      	mov	r5, r3
 80004b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004ba:	c403      	stmia	r4!, {r0, r1}
 80004bc:	8022      	strh	r2, [r4, #0]
 80004be:	e083      	b.n	80005c8 <ExecuteCommand+0x140>
	}
	else if (strncmp(RxBuffer,"OPEN",4) == 0)				//Команда запуска таймера?
 80004c0:	2204      	movs	r2, #4
 80004c2:	494d      	ldr	r1, [pc, #308]	; (80005f8 <ExecuteCommand+0x170>)
 80004c4:	484a      	ldr	r0, [pc, #296]	; (80005f0 <ExecuteCommand+0x168>)
 80004c6:	f000 fad1 	bl	8000a6c <strncmp>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d108      	bne.n	80004e2 <ExecuteCommand+0x5a>
	{

		strcpy(TxBuffer, "OK");
 80004d0:	4b45      	ldr	r3, [pc, #276]	; (80005e8 <ExecuteCommand+0x160>)
 80004d2:	4a4a      	ldr	r2, [pc, #296]	; (80005fc <ExecuteCommand+0x174>)
 80004d4:	6812      	ldr	r2, [r2, #0]
 80004d6:	4611      	mov	r1, r2
 80004d8:	8019      	strh	r1, [r3, #0]
 80004da:	3302      	adds	r3, #2
 80004dc:	0c12      	lsrs	r2, r2, #16
 80004de:	701a      	strb	r2, [r3, #0]
 80004e0:	e072      	b.n	80005c8 <ExecuteCommand+0x140>
	}
	else if (strncmp(RxBuffer,"CLOSE",5) == 0)				//Команда запуска таймера?
 80004e2:	2205      	movs	r2, #5
 80004e4:	4946      	ldr	r1, [pc, #280]	; (8000600 <ExecuteCommand+0x178>)
 80004e6:	4842      	ldr	r0, [pc, #264]	; (80005f0 <ExecuteCommand+0x168>)
 80004e8:	f000 fac0 	bl	8000a6c <strncmp>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d108      	bne.n	8000504 <ExecuteCommand+0x7c>
	{

		strcpy(TxBuffer, "OK");
 80004f2:	4b3d      	ldr	r3, [pc, #244]	; (80005e8 <ExecuteCommand+0x160>)
 80004f4:	4a41      	ldr	r2, [pc, #260]	; (80005fc <ExecuteCommand+0x174>)
 80004f6:	6812      	ldr	r2, [r2, #0]
 80004f8:	4611      	mov	r1, r2
 80004fa:	8019      	strh	r1, [r3, #0]
 80004fc:	3302      	adds	r3, #2
 80004fe:	0c12      	lsrs	r2, r2, #16
 8000500:	701a      	strb	r2, [r3, #0]
 8000502:	e061      	b.n	80005c8 <ExecuteCommand+0x140>
	}
	else if (strncmp(RxBuffer,"STOP",4) == 0)				//Команда остановки таймера?
 8000504:	2204      	movs	r2, #4
 8000506:	493f      	ldr	r1, [pc, #252]	; (8000604 <ExecuteCommand+0x17c>)
 8000508:	4839      	ldr	r0, [pc, #228]	; (80005f0 <ExecuteCommand+0x168>)
 800050a:	f000 faaf 	bl	8000a6c <strncmp>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d10a      	bne.n	800052a <ExecuteCommand+0xa2>
	{
		stopWindow();
 8000514:	f7ff ffa0 	bl	8000458 <stopWindow>
		strcpy(TxBuffer, "OK");
 8000518:	4b33      	ldr	r3, [pc, #204]	; (80005e8 <ExecuteCommand+0x160>)
 800051a:	4a38      	ldr	r2, [pc, #224]	; (80005fc <ExecuteCommand+0x174>)
 800051c:	6812      	ldr	r2, [r2, #0]
 800051e:	4611      	mov	r1, r2
 8000520:	8019      	strh	r1, [r3, #0]
 8000522:	3302      	adds	r3, #2
 8000524:	0c12      	lsrs	r2, r2, #16
 8000526:	701a      	strb	r2, [r3, #0]
 8000528:	e04e      	b.n	80005c8 <ExecuteCommand+0x140>
	}
	else if (strncmp(RxBuffer,"SPEED",5) == 0)				//Команда изменения периода таймера?
 800052a:	2205      	movs	r2, #5
 800052c:	4936      	ldr	r1, [pc, #216]	; (8000608 <ExecuteCommand+0x180>)
 800052e:	4830      	ldr	r0, [pc, #192]	; (80005f0 <ExecuteCommand+0x168>)
 8000530:	f000 fa9c 	bl	8000a6c <strncmp>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d125      	bne.n	8000586 <ExecuteCommand+0xfe>
	{
		uint16_t tim_value;
		sscanf(RxBuffer,"%*s %hu", &tim_value);				//преобразуем строку в целое число
 800053a:	1dbb      	adds	r3, r7, #6
 800053c:	461a      	mov	r2, r3
 800053e:	4933      	ldr	r1, [pc, #204]	; (800060c <ExecuteCommand+0x184>)
 8000540:	482b      	ldr	r0, [pc, #172]	; (80005f0 <ExecuteCommand+0x168>)
 8000542:	f000 fa67 	bl	8000a14 <siscanf>

		if ((0 <= tim_value) && (tim_value < 320))		//параметр должен быть в заданных пределах!
 8000546:	88fb      	ldrh	r3, [r7, #6]
 8000548:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800054c:	d210      	bcs.n	8000570 <ExecuteCommand+0xe8>
		{
			TIM2->CCR1 = tim_value;
 800054e:	88fa      	ldrh	r2, [r7, #6]
 8000550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000554:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CNT = 0;
 8000556:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800055a:	2200      	movs	r2, #0
 800055c:	625a      	str	r2, [r3, #36]	; 0x24

			strcpy(TxBuffer, "OK");
 800055e:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <ExecuteCommand+0x160>)
 8000560:	4a26      	ldr	r2, [pc, #152]	; (80005fc <ExecuteCommand+0x174>)
 8000562:	6812      	ldr	r2, [r2, #0]
 8000564:	4611      	mov	r1, r2
 8000566:	8019      	strh	r1, [r3, #0]
 8000568:	3302      	adds	r3, #2
 800056a:	0c12      	lsrs	r2, r2, #16
 800056c:	701a      	strb	r2, [r3, #0]
 800056e:	e02b      	b.n	80005c8 <ExecuteCommand+0x140>
		}
		else
			strcpy(TxBuffer, "Parameter is out of range");	//ругаемся
 8000570:	4a1d      	ldr	r2, [pc, #116]	; (80005e8 <ExecuteCommand+0x160>)
 8000572:	4b27      	ldr	r3, [pc, #156]	; (8000610 <ExecuteCommand+0x188>)
 8000574:	4614      	mov	r4, r2
 8000576:	461d      	mov	r5, r3
 8000578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800057a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000580:	c403      	stmia	r4!, {r0, r1}
 8000582:	8022      	strh	r2, [r4, #0]
 8000584:	e020      	b.n	80005c8 <ExecuteCommand+0x140>
	}
	else if (strncmp(RxBuffer,"CALIB",5) == 0)
 8000586:	2205      	movs	r2, #5
 8000588:	4922      	ldr	r1, [pc, #136]	; (8000614 <ExecuteCommand+0x18c>)
 800058a:	4819      	ldr	r0, [pc, #100]	; (80005f0 <ExecuteCommand+0x168>)
 800058c:	f000 fa6e 	bl	8000a6c <strncmp>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d112      	bne.n	80005bc <ExecuteCommand+0x134>
	{
		uint16_t calib;
		sscanf(RxBuffer,"%*s %hu", &calib);
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	461a      	mov	r2, r3
 800059a:	491c      	ldr	r1, [pc, #112]	; (800060c <ExecuteCommand+0x184>)
 800059c:	4814      	ldr	r0, [pc, #80]	; (80005f0 <ExecuteCommand+0x168>)
 800059e:	f000 fa39 	bl	8000a14 <siscanf>
		MAX_ROTATION = calib;
 80005a2:	88bb      	ldrh	r3, [r7, #4]
 80005a4:	461a      	mov	r2, r3
 80005a6:	4b1c      	ldr	r3, [pc, #112]	; (8000618 <ExecuteCommand+0x190>)
 80005a8:	601a      	str	r2, [r3, #0]
		strcpy(TxBuffer, "OK");
 80005aa:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <ExecuteCommand+0x160>)
 80005ac:	4a13      	ldr	r2, [pc, #76]	; (80005fc <ExecuteCommand+0x174>)
 80005ae:	6812      	ldr	r2, [r2, #0]
 80005b0:	4611      	mov	r1, r2
 80005b2:	8019      	strh	r1, [r3, #0]
 80005b4:	3302      	adds	r3, #2
 80005b6:	0c12      	lsrs	r2, r2, #16
 80005b8:	701a      	strb	r2, [r3, #0]
 80005ba:	e005      	b.n	80005c8 <ExecuteCommand+0x140>
	}
	else
		strcpy(TxBuffer,"Invalid Command");					//Если мы не знаем, чего от нас хотят, ругаемся в ответ
 80005bc:	4a0a      	ldr	r2, [pc, #40]	; (80005e8 <ExecuteCommand+0x160>)
 80005be:	4b17      	ldr	r3, [pc, #92]	; (800061c <ExecuteCommand+0x194>)
 80005c0:	4614      	mov	r4, r2
 80005c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Передача принятой строки обратно одним из двух способов
	txStr(TxBuffer);
 80005c8:	4807      	ldr	r0, [pc, #28]	; (80005e8 <ExecuteCommand+0x160>)
 80005ca:	f7ff fec3 	bl	8000354 <txStr>

	memset(RxBuffer,0,RX_BUFF_SIZE);						//Очистка буфера приёма
 80005ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005d2:	2100      	movs	r1, #0
 80005d4:	4806      	ldr	r0, [pc, #24]	; (80005f0 <ExecuteCommand+0x168>)
 80005d6:	f000 fa15 	bl	8000a04 <memset>
	ComReceived = false;									//Сбрасываем флаг приёма строки
 80005da:	4b11      	ldr	r3, [pc, #68]	; (8000620 <ExecuteCommand+0x198>)
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bdb0      	pop	{r4, r5, r7, pc}
 80005e8:	20000184 	.word	0x20000184
 80005ec:	0800165c 	.word	0x0800165c
 80005f0:	20000084 	.word	0x20000084
 80005f4:	08001664 	.word	0x08001664
 80005f8:	08001680 	.word	0x08001680
 80005fc:	08001688 	.word	0x08001688
 8000600:	0800168c 	.word	0x0800168c
 8000604:	08001694 	.word	0x08001694
 8000608:	0800169c 	.word	0x0800169c
 800060c:	080016a4 	.word	0x080016a4
 8000610:	080016ac 	.word	0x080016ac
 8000614:	080016c8 	.word	0x080016c8
 8000618:	20000000 	.word	0x20000000
 800061c:	080016d0 	.word	0x080016d0
 8000620:	20000284 	.word	0x20000284

08000624 <initGPIO>:

void initGPIO()
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;			//включить тактирование GPIOA
 8000628:	4b54      	ldr	r3, [pc, #336]	; (800077c <initGPIO+0x158>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	4a53      	ldr	r2, [pc, #332]	; (800077c <initGPIO+0x158>)
 800062e:	f043 0304 	orr.w	r3, r3, #4
 8000632:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8000634:	4b51      	ldr	r3, [pc, #324]	; (800077c <initGPIO+0x158>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	4a50      	ldr	r2, [pc, #320]	; (800077c <initGPIO+0x158>)
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8000640:	4b4e      	ldr	r3, [pc, #312]	; (800077c <initGPIO+0x158>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a4d      	ldr	r2, [pc, #308]	; (800077c <initGPIO+0x158>)
 8000646:	f043 0310 	orr.w	r3, r3, #16
 800064a:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 800064c:	4b4b      	ldr	r3, [pc, #300]	; (800077c <initGPIO+0x158>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a4a      	ldr	r2, [pc, #296]	; (800077c <initGPIO+0x158>)
 8000652:	f043 0308 	orr.w	r3, r3, #8
 8000656:	6193      	str	r3, [r2, #24]

	//очистка полей
	//LED - PB12
	GPIOB->CRH &= ~(GPIO_CRH_CNF12 | GPIO_CRH_MODE12);
 8000658:	4b49      	ldr	r3, [pc, #292]	; (8000780 <initGPIO+0x15c>)
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	4a48      	ldr	r2, [pc, #288]	; (8000780 <initGPIO+0x15c>)
 800065e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000662:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= GPIO_CRH_MODE12_1;				//PA12, выход 2МГц
 8000664:	4b46      	ldr	r3, [pc, #280]	; (8000780 <initGPIO+0x15c>)
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	4a45      	ldr	r2, [pc, #276]	; (8000780 <initGPIO+0x15c>)
 800066a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066e:	6053      	str	r3, [r2, #4]
	//EN2 - PB13
	GPIOB->CRH &= ~(GPIO_CRH_CNF13 | GPIO_CRH_MODE13);
 8000670:	4b43      	ldr	r3, [pc, #268]	; (8000780 <initGPIO+0x15c>)
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	4a42      	ldr	r2, [pc, #264]	; (8000780 <initGPIO+0x15c>)
 8000676:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800067a:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= GPIO_CRH_MODE13_1;				//PA13, выход 2МГц
 800067c:	4b40      	ldr	r3, [pc, #256]	; (8000780 <initGPIO+0x15c>)
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	4a3f      	ldr	r2, [pc, #252]	; (8000780 <initGPIO+0x15c>)
 8000682:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000686:	6053      	str	r3, [r2, #4]
	//EN1 - PB14
	GPIOB->CRH &= ~(GPIO_CRH_CNF14 | GPIO_CRH_MODE14);
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <initGPIO+0x15c>)
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <initGPIO+0x15c>)
 800068e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000692:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= GPIO_CRH_MODE14_1;				//PA14, выход 2МГц
 8000694:	4b3a      	ldr	r3, [pc, #232]	; (8000780 <initGPIO+0x15c>)
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	4a39      	ldr	r2, [pc, #228]	; (8000780 <initGPIO+0x15c>)
 800069a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800069e:	6053      	str	r3, [r2, #4]
	//Button - PA11
	GPIOA->CRH &= ~(GPIO_CRH_MODE11 | GPIO_CRH_CNF11);
 80006a0:	4b38      	ldr	r3, [pc, #224]	; (8000784 <initGPIO+0x160>)
 80006a2:	685b      	ldr	r3, [r3, #4]
 80006a4:	4a37      	ldr	r2, [pc, #220]	; (8000784 <initGPIO+0x160>)
 80006a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80006aa:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF11_1;			//Вход с подтяжкой
 80006ac:	4b35      	ldr	r3, [pc, #212]	; (8000784 <initGPIO+0x160>)
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	4a34      	ldr	r2, [pc, #208]	; (8000784 <initGPIO+0x160>)
 80006b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006b6:	6053      	str	r3, [r2, #4]
	GPIOA->BSRR |= GPIO_BSRR_BS11;			//Подтяжка к Vdd
 80006b8:	4b32      	ldr	r3, [pc, #200]	; (8000784 <initGPIO+0x160>)
 80006ba:	691b      	ldr	r3, [r3, #16]
 80006bc:	4a31      	ldr	r2, [pc, #196]	; (8000784 <initGPIO+0x160>)
 80006be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006c2:	6113      	str	r3, [r2, #16]
	//S1 - PA8
	GPIOA->CRH &= ~(GPIO_CRH_MODE8 | GPIO_CRH_CNF8);
 80006c4:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <initGPIO+0x160>)
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	4a2e      	ldr	r2, [pc, #184]	; (8000784 <initGPIO+0x160>)
 80006ca:	f023 030f 	bic.w	r3, r3, #15
 80006ce:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF8_1;			//Вход с подтяжкой
 80006d0:	4b2c      	ldr	r3, [pc, #176]	; (8000784 <initGPIO+0x160>)
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	4a2b      	ldr	r2, [pc, #172]	; (8000784 <initGPIO+0x160>)
 80006d6:	f043 0308 	orr.w	r3, r3, #8
 80006da:	6053      	str	r3, [r2, #4]
	//S2 - PB14
	GPIOB->CRH &= ~(GPIO_CRH_MODE14 | GPIO_CRH_CNF14);
 80006dc:	4b28      	ldr	r3, [pc, #160]	; (8000780 <initGPIO+0x15c>)
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	4a27      	ldr	r2, [pc, #156]	; (8000780 <initGPIO+0x15c>)
 80006e2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80006e6:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= GPIO_CRH_CNF14_1;			//Вход с подтяжкой
 80006e8:	4b25      	ldr	r3, [pc, #148]	; (8000780 <initGPIO+0x15c>)
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	4a24      	ldr	r2, [pc, #144]	; (8000780 <initGPIO+0x15c>)
 80006ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80006f2:	6053      	str	r3, [r2, #4]

	// Настройка альтернативных фукнций портов.
	// Настройки портов с 12 по 15 хранятся в регистре AFIO_EXTICR4.
	// Регистры объединены в массив AFIO->EXTICR, нумерация массива начинается с нулевого элемента.
	// Поэтому настройки AFIO_EXTICR4 хранятся в AFIO->EXTICR[3]
	AFIO->EXTICR[2] |= AFIO_EXTICR3_EXTI11_PA;	//Button - PA11
 80006f4:	4b24      	ldr	r3, [pc, #144]	; (8000788 <initGPIO+0x164>)
 80006f6:	4a24      	ldr	r2, [pc, #144]	; (8000788 <initGPIO+0x164>)
 80006f8:	691b      	ldr	r3, [r3, #16]
 80006fa:	6113      	str	r3, [r2, #16]
	AFIO->EXTICR[2] |= AFIO_EXTICR3_EXTI8_PB;	//S1 - PA8
 80006fc:	4b22      	ldr	r3, [pc, #136]	; (8000788 <initGPIO+0x164>)
 80006fe:	691b      	ldr	r3, [r3, #16]
 8000700:	4a21      	ldr	r2, [pc, #132]	; (8000788 <initGPIO+0x164>)
 8000702:	f043 0301 	orr.w	r3, r3, #1
 8000706:	6113      	str	r3, [r2, #16]
	AFIO->EXTICR[3] |= AFIO_EXTICR4_EXTI14_PB;	//S2 - PB14
 8000708:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <initGPIO+0x164>)
 800070a:	695b      	ldr	r3, [r3, #20]
 800070c:	4a1e      	ldr	r2, [pc, #120]	; (8000788 <initGPIO+0x164>)
 800070e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000712:	6153      	str	r3, [r2, #20]

	EXTI->FTSR |= EXTI_FTSR_TR11;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <initGPIO+0x168>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	4a1c      	ldr	r2, [pc, #112]	; (800078c <initGPIO+0x168>)
 800071a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800071e:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= EXTI_IMR_MR11;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <initGPIO+0x168>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a19      	ldr	r2, [pc, #100]	; (800078c <initGPIO+0x168>)
 8000726:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800072a:	6013      	str	r3, [r2, #0]

	EXTI->FTSR |= EXTI_RTSR_TR8;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <initGPIO+0x168>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	4a16      	ldr	r2, [pc, #88]	; (800078c <initGPIO+0x168>)
 8000732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000736:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= EXTI_IMR_MR8;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <initGPIO+0x168>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a13      	ldr	r2, [pc, #76]	; (800078c <initGPIO+0x168>)
 800073e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000742:	6013      	str	r3, [r2, #0]

	EXTI->FTSR |= EXTI_RTSR_TR14;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <initGPIO+0x168>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	4a10      	ldr	r2, [pc, #64]	; (800078c <initGPIO+0x168>)
 800074a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074e:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= EXTI_IMR_MR14;
 8000750:	4b0e      	ldr	r3, [pc, #56]	; (800078c <initGPIO+0x168>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a0d      	ldr	r2, [pc, #52]	; (800078c <initGPIO+0x168>)
 8000756:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075a:	6013      	str	r3, [r2, #0]

	NVIC_EnableIRQ(EXTI9_5_IRQn);			//Разрешаем прерывание
 800075c:	2017      	movs	r0, #23
 800075e:	f7ff fd0f 	bl	8000180 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI9_5_IRQn, 0);	//Выставляем приоритет
 8000762:	2100      	movs	r1, #0
 8000764:	2017      	movs	r0, #23
 8000766:	f7ff fd27 	bl	80001b8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI15_10_IRQn);			//Разрешаем прерывание
 800076a:	2028      	movs	r0, #40	; 0x28
 800076c:	f7ff fd08 	bl	8000180 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI15_10_IRQn, 0);	//Выставляем приоритет
 8000770:	2100      	movs	r1, #0
 8000772:	2028      	movs	r0, #40	; 0x28
 8000774:	f7ff fd20 	bl	80001b8 <__NVIC_SetPriority>

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40021000 	.word	0x40021000
 8000780:	40010c00 	.word	0x40010c00
 8000784:	40010800 	.word	0x40010800
 8000788:	40010000 	.word	0x40010000
 800078c:	40010400 	.word	0x40010400

08000790 <main>:

int main(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	initClk();
 8000794:	f7ff fd3a 	bl	800020c <initClk>
	initTIM3_PWM();
 8000798:	f7ff fe10 	bl	80003bc <initTIM3_PWM>
	initUSART1();
 800079c:	f7ff fd9a 	bl	80002d4 <initUSART1>
	initGPIO();
 80007a0:	f7ff ff40 	bl	8000624 <initGPIO>

    /* Loop forever */
	while(1)
	{
		if (ComReceived == true)
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <main+0x34>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <main+0x20>
		{
			ExecuteCommand();
 80007ac:	f7ff fe6c 	bl	8000488 <ExecuteCommand>
		}
		if (rotation > MAX_ROTATION)
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <main+0x38>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b05      	ldr	r3, [pc, #20]	; (80007cc <main+0x3c>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d9f2      	bls.n	80007a4 <main+0x14>
			stopWindow();
 80007be:	f7ff fe4b 	bl	8000458 <stopWindow>
		if (ComReceived == true)
 80007c2:	e7ef      	b.n	80007a4 <main+0x14>
 80007c4:	20000284 	.word	0x20000284
 80007c8:	20000288 	.word	0x20000288
 80007cc:	20000000 	.word	0x20000000

080007d0 <EXTI15_10_IRQHandler>:
	}
}

void EXTI15_10_IRQHandler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR11)
 80007d4:	4b26      	ldr	r3, [pc, #152]	; (8000870 <EXTI15_10_IRQHandler+0xa0>)
 80007d6:	695b      	ldr	r3, [r3, #20]
 80007d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d00a      	beq.n	80007f6 <EXTI15_10_IRQHandler+0x26>
	{
		rotation = 0;
 80007e0:	4b24      	ldr	r3, [pc, #144]	; (8000874 <EXTI15_10_IRQHandler+0xa4>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
		stopWindow();
 80007e6:	f7ff fe37 	bl	8000458 <stopWindow>
		EXTI->PR |= EXTI_PR_PR11;
 80007ea:	4b21      	ldr	r3, [pc, #132]	; (8000870 <EXTI15_10_IRQHandler+0xa0>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	4a20      	ldr	r2, [pc, #128]	; (8000870 <EXTI15_10_IRQHandler+0xa0>)
 80007f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007f4:	6153      	str	r3, [r2, #20]
	}
	if (EXTI->PR & EXTI_PR_PR13)
 80007f6:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <EXTI15_10_IRQHandler+0xa0>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d00a      	beq.n	8000818 <EXTI15_10_IRQHandler+0x48>
	{
		rotation = 0;
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <EXTI15_10_IRQHandler+0xa4>)
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
		stopWindow();
 8000808:	f7ff fe26 	bl	8000458 <stopWindow>
		EXTI->PR |= EXTI_PR_PR13;
 800080c:	4b18      	ldr	r3, [pc, #96]	; (8000870 <EXTI15_10_IRQHandler+0xa0>)
 800080e:	695b      	ldr	r3, [r3, #20]
 8000810:	4a17      	ldr	r2, [pc, #92]	; (8000870 <EXTI15_10_IRQHandler+0xa0>)
 8000812:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000816:	6153      	str	r3, [r2, #20]
	}
	if (EXTI->PR & EXTI_PR_PR14)
 8000818:	4b15      	ldr	r3, [pc, #84]	; (8000870 <EXTI15_10_IRQHandler+0xa0>)
 800081a:	695b      	ldr	r3, [r3, #20]
 800081c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000820:	2b00      	cmp	r3, #0
 8000822:	d016      	beq.n	8000852 <EXTI15_10_IRQHandler+0x82>
	{
		if ((GPIOB->IDR & GPIO_IDR_IDR15) == 0)
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <EXTI15_10_IRQHandler+0xa8>)
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800082c:	2b00      	cmp	r3, #0
 800082e:	d105      	bne.n	800083c <EXTI15_10_IRQHandler+0x6c>
		{
			rotation += 1;
 8000830:	4b10      	ldr	r3, [pc, #64]	; (8000874 <EXTI15_10_IRQHandler+0xa4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	3301      	adds	r3, #1
 8000836:	4a0f      	ldr	r2, [pc, #60]	; (8000874 <EXTI15_10_IRQHandler+0xa4>)
 8000838:	6013      	str	r3, [r2, #0]
 800083a:	e004      	b.n	8000846 <EXTI15_10_IRQHandler+0x76>
		}
		else
		{
			rotation -= 1;
 800083c:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <EXTI15_10_IRQHandler+0xa4>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	3b01      	subs	r3, #1
 8000842:	4a0c      	ldr	r2, [pc, #48]	; (8000874 <EXTI15_10_IRQHandler+0xa4>)
 8000844:	6013      	str	r3, [r2, #0]
		}
		EXTI->PR |= EXTI_PR_PR14;
 8000846:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <EXTI15_10_IRQHandler+0xa0>)
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	4a09      	ldr	r2, [pc, #36]	; (8000870 <EXTI15_10_IRQHandler+0xa0>)
 800084c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000850:	6153      	str	r3, [r2, #20]
	}
	if (EXTI->PR & EXTI_PR_PR15)
 8000852:	4b07      	ldr	r3, [pc, #28]	; (8000870 <EXTI15_10_IRQHandler+0xa0>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800085a:	2b00      	cmp	r3, #0
 800085c:	d005      	beq.n	800086a <EXTI15_10_IRQHandler+0x9a>
	{
		EXTI->PR |= EXTI_PR_PR15;
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <EXTI15_10_IRQHandler+0xa0>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	4a03      	ldr	r2, [pc, #12]	; (8000870 <EXTI15_10_IRQHandler+0xa0>)
 8000864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000868:	6153      	str	r3, [r2, #20]
//		else
//		{
//			rotation += 1;
//		}
	}
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40010400 	.word	0x40010400
 8000874:	20000288 	.word	0x20000288
 8000878:	40010c00 	.word	0x40010c00

0800087c <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
	if ((USART1->SR & USART_SR_RXNE)!=0)		//Прерывание по приёму данных?
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <USART1_IRQHandler+0x4c>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f003 0320 	and.w	r3, r3, #32
 800088a:	2b00      	cmp	r3, #0
 800088c:	d019      	beq.n	80008c2 <USART1_IRQHandler+0x46>
	{
		uint8_t pos = strlen(RxBuffer);			//Вычисляем позицию свободной ячейки
 800088e:	480f      	ldr	r0, [pc, #60]	; (80008cc <USART1_IRQHandler+0x50>)
 8000890:	f7ff fc6e 	bl	8000170 <strlen>
 8000894:	4603      	mov	r3, r0
 8000896:	71fb      	strb	r3, [r7, #7]

		RxBuffer[pos] = USART1->DR;				//Считываем содержимое регистра данных
 8000898:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <USART1_IRQHandler+0x4c>)
 800089a:	685a      	ldr	r2, [r3, #4]
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	b2d1      	uxtb	r1, r2
 80008a0:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <USART1_IRQHandler+0x50>)
 80008a2:	54d1      	strb	r1, [r2, r3]

		if ((RxBuffer[pos]== 0x0A) && (RxBuffer[pos-1]== 0x0D))							//Если это символ конца строки
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	4a09      	ldr	r2, [pc, #36]	; (80008cc <USART1_IRQHandler+0x50>)
 80008a8:	5cd3      	ldrb	r3, [r2, r3]
 80008aa:	2b0a      	cmp	r3, #10
 80008ac:	d109      	bne.n	80008c2 <USART1_IRQHandler+0x46>
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	3b01      	subs	r3, #1
 80008b2:	4a06      	ldr	r2, [pc, #24]	; (80008cc <USART1_IRQHandler+0x50>)
 80008b4:	5cd3      	ldrb	r3, [r2, r3]
 80008b6:	2b0d      	cmp	r3, #13
 80008b8:	d103      	bne.n	80008c2 <USART1_IRQHandler+0x46>
		{
			ComReceived = true;					//- выставляем флаг приёма строки
 80008ba:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <USART1_IRQHandler+0x54>)
 80008bc:	2201      	movs	r2, #1
 80008be:	701a      	strb	r2, [r3, #0]
			return;								//- и выходим
 80008c0:	bf00      	nop
		}
	}
}
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40013800 	.word	0x40013800
 80008cc:	20000084 	.word	0x20000084
 80008d0:	20000284 	.word	0x20000284

080008d4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
	TIM3->SR &= ~TIM_SR_UIF;			//Сброс флага переполнения
 80008d8:	4b04      	ldr	r3, [pc, #16]	; (80008ec <TIM3_IRQHandler+0x18>)
 80008da:	691b      	ldr	r3, [r3, #16]
 80008dc:	4a03      	ldr	r2, [pc, #12]	; (80008ec <TIM3_IRQHandler+0x18>)
 80008de:	f023 0301 	bic.w	r3, r3, #1
 80008e2:	6113      	str	r3, [r2, #16]
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	40000400 	.word	0x40000400

080008f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008f8:	4a14      	ldr	r2, [pc, #80]	; (800094c <_sbrk+0x5c>)
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <_sbrk+0x60>)
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <_sbrk+0x64>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d102      	bne.n	8000912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800090c:	4b11      	ldr	r3, [pc, #68]	; (8000954 <_sbrk+0x64>)
 800090e:	4a12      	ldr	r2, [pc, #72]	; (8000958 <_sbrk+0x68>)
 8000910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <_sbrk+0x64>)
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4413      	add	r3, r2
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	429a      	cmp	r2, r3
 800091e:	d207      	bcs.n	8000930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000920:	f000 f846 	bl	80009b0 <__errno>
 8000924:	4603      	mov	r3, r0
 8000926:	220c      	movs	r2, #12
 8000928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800092a:	f04f 33ff 	mov.w	r3, #4294967295
 800092e:	e009      	b.n	8000944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <_sbrk+0x64>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000936:	4b07      	ldr	r3, [pc, #28]	; (8000954 <_sbrk+0x64>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4413      	add	r3, r2
 800093e:	4a05      	ldr	r2, [pc, #20]	; (8000954 <_sbrk+0x64>)
 8000940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000942:	68fb      	ldr	r3, [r7, #12]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20005000 	.word	0x20005000
 8000950:	00000400 	.word	0x00000400
 8000954:	2000028c 	.word	0x2000028c
 8000958:	200002a0 	.word	0x200002a0

0800095c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800095c:	480d      	ldr	r0, [pc, #52]	; (8000994 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800095e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000960:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000964:	480c      	ldr	r0, [pc, #48]	; (8000998 <LoopForever+0x6>)
  ldr r1, =_edata
 8000966:	490d      	ldr	r1, [pc, #52]	; (800099c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000968:	4a0d      	ldr	r2, [pc, #52]	; (80009a0 <LoopForever+0xe>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800096c:	e002      	b.n	8000974 <LoopCopyDataInit>

0800096e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000972:	3304      	adds	r3, #4

08000974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000978:	d3f9      	bcc.n	800096e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097a:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800097c:	4c0a      	ldr	r4, [pc, #40]	; (80009a8 <LoopForever+0x16>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000980:	e001      	b.n	8000986 <LoopFillZerobss>

08000982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000984:	3204      	adds	r2, #4

08000986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000988:	d3fb      	bcc.n	8000982 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800098a:	f000 f817 	bl	80009bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800098e:	f7ff feff 	bl	8000790 <main>

08000992 <LoopForever>:

LoopForever:
  b LoopForever
 8000992:	e7fe      	b.n	8000992 <LoopForever>
  ldr   r0, =_estack
 8000994:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800099c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80009a0:	08001874 	.word	0x08001874
  ldr r2, =_sbss
 80009a4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80009a8:	200002a0 	.word	0x200002a0

080009ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009ac:	e7fe      	b.n	80009ac <ADC1_2_IRQHandler>
	...

080009b0 <__errno>:
 80009b0:	4b01      	ldr	r3, [pc, #4]	; (80009b8 <__errno+0x8>)
 80009b2:	6818      	ldr	r0, [r3, #0]
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	20000004 	.word	0x20000004

080009bc <__libc_init_array>:
 80009bc:	b570      	push	{r4, r5, r6, lr}
 80009be:	2600      	movs	r6, #0
 80009c0:	4d0c      	ldr	r5, [pc, #48]	; (80009f4 <__libc_init_array+0x38>)
 80009c2:	4c0d      	ldr	r4, [pc, #52]	; (80009f8 <__libc_init_array+0x3c>)
 80009c4:	1b64      	subs	r4, r4, r5
 80009c6:	10a4      	asrs	r4, r4, #2
 80009c8:	42a6      	cmp	r6, r4
 80009ca:	d109      	bne.n	80009e0 <__libc_init_array+0x24>
 80009cc:	f000 fe38 	bl	8001640 <_init>
 80009d0:	2600      	movs	r6, #0
 80009d2:	4d0a      	ldr	r5, [pc, #40]	; (80009fc <__libc_init_array+0x40>)
 80009d4:	4c0a      	ldr	r4, [pc, #40]	; (8000a00 <__libc_init_array+0x44>)
 80009d6:	1b64      	subs	r4, r4, r5
 80009d8:	10a4      	asrs	r4, r4, #2
 80009da:	42a6      	cmp	r6, r4
 80009dc:	d105      	bne.n	80009ea <__libc_init_array+0x2e>
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80009e4:	4798      	blx	r3
 80009e6:	3601      	adds	r6, #1
 80009e8:	e7ee      	b.n	80009c8 <__libc_init_array+0xc>
 80009ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80009ee:	4798      	blx	r3
 80009f0:	3601      	adds	r6, #1
 80009f2:	e7f2      	b.n	80009da <__libc_init_array+0x1e>
 80009f4:	0800186c 	.word	0x0800186c
 80009f8:	0800186c 	.word	0x0800186c
 80009fc:	0800186c 	.word	0x0800186c
 8000a00:	08001870 	.word	0x08001870

08000a04 <memset>:
 8000a04:	4603      	mov	r3, r0
 8000a06:	4402      	add	r2, r0
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d100      	bne.n	8000a0e <memset+0xa>
 8000a0c:	4770      	bx	lr
 8000a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8000a12:	e7f9      	b.n	8000a08 <memset+0x4>

08000a14 <siscanf>:
 8000a14:	b40e      	push	{r1, r2, r3}
 8000a16:	f44f 7201 	mov.w	r2, #516	; 0x204
 8000a1a:	b530      	push	{r4, r5, lr}
 8000a1c:	b09c      	sub	sp, #112	; 0x70
 8000a1e:	ac1f      	add	r4, sp, #124	; 0x7c
 8000a20:	f854 5b04 	ldr.w	r5, [r4], #4
 8000a24:	f8ad 2014 	strh.w	r2, [sp, #20]
 8000a28:	9002      	str	r0, [sp, #8]
 8000a2a:	9006      	str	r0, [sp, #24]
 8000a2c:	f7ff fba0 	bl	8000170 <strlen>
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <siscanf+0x4c>)
 8000a32:	9003      	str	r0, [sp, #12]
 8000a34:	930b      	str	r3, [sp, #44]	; 0x2c
 8000a36:	2300      	movs	r3, #0
 8000a38:	930f      	str	r3, [sp, #60]	; 0x3c
 8000a3a:	9314      	str	r3, [sp, #80]	; 0x50
 8000a3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a40:	9007      	str	r0, [sp, #28]
 8000a42:	4808      	ldr	r0, [pc, #32]	; (8000a64 <siscanf+0x50>)
 8000a44:	f8ad 3016 	strh.w	r3, [sp, #22]
 8000a48:	462a      	mov	r2, r5
 8000a4a:	4623      	mov	r3, r4
 8000a4c:	a902      	add	r1, sp, #8
 8000a4e:	6800      	ldr	r0, [r0, #0]
 8000a50:	9401      	str	r4, [sp, #4]
 8000a52:	f000 f879 	bl	8000b48 <__ssvfiscanf_r>
 8000a56:	b01c      	add	sp, #112	; 0x70
 8000a58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000a5c:	b003      	add	sp, #12
 8000a5e:	4770      	bx	lr
 8000a60:	08000a69 	.word	0x08000a69
 8000a64:	20000004 	.word	0x20000004

08000a68 <__seofread>:
 8000a68:	2000      	movs	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <strncmp>:
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	b510      	push	{r4, lr}
 8000a70:	b172      	cbz	r2, 8000a90 <strncmp+0x24>
 8000a72:	3901      	subs	r1, #1
 8000a74:	1884      	adds	r4, r0, r2
 8000a76:	f813 0b01 	ldrb.w	r0, [r3], #1
 8000a7a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8000a7e:	4290      	cmp	r0, r2
 8000a80:	d101      	bne.n	8000a86 <strncmp+0x1a>
 8000a82:	42a3      	cmp	r3, r4
 8000a84:	d101      	bne.n	8000a8a <strncmp+0x1e>
 8000a86:	1a80      	subs	r0, r0, r2
 8000a88:	bd10      	pop	{r4, pc}
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	d1f3      	bne.n	8000a76 <strncmp+0xa>
 8000a8e:	e7fa      	b.n	8000a86 <strncmp+0x1a>
 8000a90:	4610      	mov	r0, r2
 8000a92:	e7f9      	b.n	8000a88 <strncmp+0x1c>

08000a94 <_sungetc_r>:
 8000a94:	b538      	push	{r3, r4, r5, lr}
 8000a96:	1c4b      	adds	r3, r1, #1
 8000a98:	4614      	mov	r4, r2
 8000a9a:	d103      	bne.n	8000aa4 <_sungetc_r+0x10>
 8000a9c:	f04f 35ff 	mov.w	r5, #4294967295
 8000aa0:	4628      	mov	r0, r5
 8000aa2:	bd38      	pop	{r3, r4, r5, pc}
 8000aa4:	8993      	ldrh	r3, [r2, #12]
 8000aa6:	b2cd      	uxtb	r5, r1
 8000aa8:	f023 0320 	bic.w	r3, r3, #32
 8000aac:	8193      	strh	r3, [r2, #12]
 8000aae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ab0:	6852      	ldr	r2, [r2, #4]
 8000ab2:	b18b      	cbz	r3, 8000ad8 <_sungetc_r+0x44>
 8000ab4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	dd08      	ble.n	8000acc <_sungetc_r+0x38>
 8000aba:	6823      	ldr	r3, [r4, #0]
 8000abc:	1e5a      	subs	r2, r3, #1
 8000abe:	6022      	str	r2, [r4, #0]
 8000ac0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8000ac4:	6863      	ldr	r3, [r4, #4]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	6063      	str	r3, [r4, #4]
 8000aca:	e7e9      	b.n	8000aa0 <_sungetc_r+0xc>
 8000acc:	4621      	mov	r1, r4
 8000ace:	f000 fc31 	bl	8001334 <__submore>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	d0f1      	beq.n	8000aba <_sungetc_r+0x26>
 8000ad6:	e7e1      	b.n	8000a9c <_sungetc_r+0x8>
 8000ad8:	6921      	ldr	r1, [r4, #16]
 8000ada:	6823      	ldr	r3, [r4, #0]
 8000adc:	b151      	cbz	r1, 8000af4 <_sungetc_r+0x60>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	d208      	bcs.n	8000af4 <_sungetc_r+0x60>
 8000ae2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8000ae6:	42a9      	cmp	r1, r5
 8000ae8:	d104      	bne.n	8000af4 <_sungetc_r+0x60>
 8000aea:	3b01      	subs	r3, #1
 8000aec:	3201      	adds	r2, #1
 8000aee:	6023      	str	r3, [r4, #0]
 8000af0:	6062      	str	r2, [r4, #4]
 8000af2:	e7d5      	b.n	8000aa0 <_sungetc_r+0xc>
 8000af4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8000af8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000afc:	6363      	str	r3, [r4, #52]	; 0x34
 8000afe:	2303      	movs	r3, #3
 8000b00:	63a3      	str	r3, [r4, #56]	; 0x38
 8000b02:	4623      	mov	r3, r4
 8000b04:	f803 5f46 	strb.w	r5, [r3, #70]!
 8000b08:	6023      	str	r3, [r4, #0]
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e7dc      	b.n	8000ac8 <_sungetc_r+0x34>

08000b0e <__ssrefill_r>:
 8000b0e:	b510      	push	{r4, lr}
 8000b10:	460c      	mov	r4, r1
 8000b12:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8000b14:	b169      	cbz	r1, 8000b32 <__ssrefill_r+0x24>
 8000b16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b1a:	4299      	cmp	r1, r3
 8000b1c:	d001      	beq.n	8000b22 <__ssrefill_r+0x14>
 8000b1e:	f000 fc5f 	bl	80013e0 <_free_r>
 8000b22:	2000      	movs	r0, #0
 8000b24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b26:	6360      	str	r0, [r4, #52]	; 0x34
 8000b28:	6063      	str	r3, [r4, #4]
 8000b2a:	b113      	cbz	r3, 8000b32 <__ssrefill_r+0x24>
 8000b2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000b2e:	6023      	str	r3, [r4, #0]
 8000b30:	bd10      	pop	{r4, pc}
 8000b32:	6923      	ldr	r3, [r4, #16]
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	6023      	str	r3, [r4, #0]
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	6063      	str	r3, [r4, #4]
 8000b3e:	89a3      	ldrh	r3, [r4, #12]
 8000b40:	f043 0320 	orr.w	r3, r3, #32
 8000b44:	81a3      	strh	r3, [r4, #12]
 8000b46:	e7f3      	b.n	8000b30 <__ssrefill_r+0x22>

08000b48 <__ssvfiscanf_r>:
 8000b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b4c:	460c      	mov	r4, r1
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4606      	mov	r6, r0
 8000b52:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8000b56:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8000b5a:	49a7      	ldr	r1, [pc, #668]	; (8000df8 <__ssvfiscanf_r+0x2b0>)
 8000b5c:	f10d 0804 	add.w	r8, sp, #4
 8000b60:	91a0      	str	r1, [sp, #640]	; 0x280
 8000b62:	49a6      	ldr	r1, [pc, #664]	; (8000dfc <__ssvfiscanf_r+0x2b4>)
 8000b64:	4fa6      	ldr	r7, [pc, #664]	; (8000e00 <__ssvfiscanf_r+0x2b8>)
 8000b66:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8000e04 <__ssvfiscanf_r+0x2bc>
 8000b6a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8000b6e:	91a1      	str	r1, [sp, #644]	; 0x284
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	7813      	ldrb	r3, [r2, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	f000 815c 	beq.w	8000e32 <__ssvfiscanf_r+0x2ea>
 8000b7a:	5dd9      	ldrb	r1, [r3, r7]
 8000b7c:	1c55      	adds	r5, r2, #1
 8000b7e:	f011 0108 	ands.w	r1, r1, #8
 8000b82:	d019      	beq.n	8000bb8 <__ssvfiscanf_r+0x70>
 8000b84:	6863      	ldr	r3, [r4, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	dd0f      	ble.n	8000baa <__ssvfiscanf_r+0x62>
 8000b8a:	6823      	ldr	r3, [r4, #0]
 8000b8c:	781a      	ldrb	r2, [r3, #0]
 8000b8e:	5cba      	ldrb	r2, [r7, r2]
 8000b90:	0712      	lsls	r2, r2, #28
 8000b92:	d401      	bmi.n	8000b98 <__ssvfiscanf_r+0x50>
 8000b94:	462a      	mov	r2, r5
 8000b96:	e7ec      	b.n	8000b72 <__ssvfiscanf_r+0x2a>
 8000b98:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	3201      	adds	r2, #1
 8000b9e:	9245      	str	r2, [sp, #276]	; 0x114
 8000ba0:	6862      	ldr	r2, [r4, #4]
 8000ba2:	6023      	str	r3, [r4, #0]
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	6062      	str	r2, [r4, #4]
 8000ba8:	e7ec      	b.n	8000b84 <__ssvfiscanf_r+0x3c>
 8000baa:	4621      	mov	r1, r4
 8000bac:	4630      	mov	r0, r6
 8000bae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8000bb0:	4798      	blx	r3
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	d0e9      	beq.n	8000b8a <__ssvfiscanf_r+0x42>
 8000bb6:	e7ed      	b.n	8000b94 <__ssvfiscanf_r+0x4c>
 8000bb8:	2b25      	cmp	r3, #37	; 0x25
 8000bba:	d012      	beq.n	8000be2 <__ssvfiscanf_r+0x9a>
 8000bbc:	469a      	mov	sl, r3
 8000bbe:	6863      	ldr	r3, [r4, #4]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	f340 8094 	ble.w	8000cee <__ssvfiscanf_r+0x1a6>
 8000bc6:	6822      	ldr	r2, [r4, #0]
 8000bc8:	7813      	ldrb	r3, [r2, #0]
 8000bca:	4553      	cmp	r3, sl
 8000bcc:	f040 8131 	bne.w	8000e32 <__ssvfiscanf_r+0x2ea>
 8000bd0:	6863      	ldr	r3, [r4, #4]
 8000bd2:	3201      	adds	r2, #1
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	6063      	str	r3, [r4, #4]
 8000bd8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8000bda:	6022      	str	r2, [r4, #0]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	9345      	str	r3, [sp, #276]	; 0x114
 8000be0:	e7d8      	b.n	8000b94 <__ssvfiscanf_r+0x4c>
 8000be2:	9141      	str	r1, [sp, #260]	; 0x104
 8000be4:	9143      	str	r1, [sp, #268]	; 0x10c
 8000be6:	7853      	ldrb	r3, [r2, #1]
 8000be8:	2b2a      	cmp	r3, #42	; 0x2a
 8000bea:	bf04      	itt	eq
 8000bec:	2310      	moveq	r3, #16
 8000bee:	1c95      	addeq	r5, r2, #2
 8000bf0:	f04f 020a 	mov.w	r2, #10
 8000bf4:	bf08      	it	eq
 8000bf6:	9341      	streq	r3, [sp, #260]	; 0x104
 8000bf8:	46aa      	mov	sl, r5
 8000bfa:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8000bfe:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8000c02:	2b09      	cmp	r3, #9
 8000c04:	d91d      	bls.n	8000c42 <__ssvfiscanf_r+0xfa>
 8000c06:	2203      	movs	r2, #3
 8000c08:	487e      	ldr	r0, [pc, #504]	; (8000e04 <__ssvfiscanf_r+0x2bc>)
 8000c0a:	f000 fbcd 	bl	80013a8 <memchr>
 8000c0e:	b140      	cbz	r0, 8000c22 <__ssvfiscanf_r+0xda>
 8000c10:	2301      	movs	r3, #1
 8000c12:	4655      	mov	r5, sl
 8000c14:	eba0 0009 	sub.w	r0, r0, r9
 8000c18:	fa03 f000 	lsl.w	r0, r3, r0
 8000c1c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8000c1e:	4318      	orrs	r0, r3
 8000c20:	9041      	str	r0, [sp, #260]	; 0x104
 8000c22:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000c26:	2b78      	cmp	r3, #120	; 0x78
 8000c28:	d806      	bhi.n	8000c38 <__ssvfiscanf_r+0xf0>
 8000c2a:	2b57      	cmp	r3, #87	; 0x57
 8000c2c:	d810      	bhi.n	8000c50 <__ssvfiscanf_r+0x108>
 8000c2e:	2b25      	cmp	r3, #37	; 0x25
 8000c30:	d0c4      	beq.n	8000bbc <__ssvfiscanf_r+0x74>
 8000c32:	d857      	bhi.n	8000ce4 <__ssvfiscanf_r+0x19c>
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d065      	beq.n	8000d04 <__ssvfiscanf_r+0x1bc>
 8000c38:	2303      	movs	r3, #3
 8000c3a:	9347      	str	r3, [sp, #284]	; 0x11c
 8000c3c:	230a      	movs	r3, #10
 8000c3e:	9342      	str	r3, [sp, #264]	; 0x108
 8000c40:	e072      	b.n	8000d28 <__ssvfiscanf_r+0x1e0>
 8000c42:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8000c44:	4655      	mov	r5, sl
 8000c46:	fb02 1103 	mla	r1, r2, r3, r1
 8000c4a:	3930      	subs	r1, #48	; 0x30
 8000c4c:	9143      	str	r1, [sp, #268]	; 0x10c
 8000c4e:	e7d3      	b.n	8000bf8 <__ssvfiscanf_r+0xb0>
 8000c50:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8000c54:	2a20      	cmp	r2, #32
 8000c56:	d8ef      	bhi.n	8000c38 <__ssvfiscanf_r+0xf0>
 8000c58:	a101      	add	r1, pc, #4	; (adr r1, 8000c60 <__ssvfiscanf_r+0x118>)
 8000c5a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8000c5e:	bf00      	nop
 8000c60:	08000d13 	.word	0x08000d13
 8000c64:	08000c39 	.word	0x08000c39
 8000c68:	08000c39 	.word	0x08000c39
 8000c6c:	08000d71 	.word	0x08000d71
 8000c70:	08000c39 	.word	0x08000c39
 8000c74:	08000c39 	.word	0x08000c39
 8000c78:	08000c39 	.word	0x08000c39
 8000c7c:	08000c39 	.word	0x08000c39
 8000c80:	08000c39 	.word	0x08000c39
 8000c84:	08000c39 	.word	0x08000c39
 8000c88:	08000c39 	.word	0x08000c39
 8000c8c:	08000d87 	.word	0x08000d87
 8000c90:	08000d5d 	.word	0x08000d5d
 8000c94:	08000ceb 	.word	0x08000ceb
 8000c98:	08000ceb 	.word	0x08000ceb
 8000c9c:	08000ceb 	.word	0x08000ceb
 8000ca0:	08000c39 	.word	0x08000c39
 8000ca4:	08000d61 	.word	0x08000d61
 8000ca8:	08000c39 	.word	0x08000c39
 8000cac:	08000c39 	.word	0x08000c39
 8000cb0:	08000c39 	.word	0x08000c39
 8000cb4:	08000c39 	.word	0x08000c39
 8000cb8:	08000d97 	.word	0x08000d97
 8000cbc:	08000d69 	.word	0x08000d69
 8000cc0:	08000d0b 	.word	0x08000d0b
 8000cc4:	08000c39 	.word	0x08000c39
 8000cc8:	08000c39 	.word	0x08000c39
 8000ccc:	08000d93 	.word	0x08000d93
 8000cd0:	08000c39 	.word	0x08000c39
 8000cd4:	08000d5d 	.word	0x08000d5d
 8000cd8:	08000c39 	.word	0x08000c39
 8000cdc:	08000c39 	.word	0x08000c39
 8000ce0:	08000d13 	.word	0x08000d13
 8000ce4:	3b45      	subs	r3, #69	; 0x45
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d8a6      	bhi.n	8000c38 <__ssvfiscanf_r+0xf0>
 8000cea:	2305      	movs	r3, #5
 8000cec:	e01b      	b.n	8000d26 <__ssvfiscanf_r+0x1de>
 8000cee:	4621      	mov	r1, r4
 8000cf0:	4630      	mov	r0, r6
 8000cf2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8000cf4:	4798      	blx	r3
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	f43f af65 	beq.w	8000bc6 <__ssvfiscanf_r+0x7e>
 8000cfc:	9844      	ldr	r0, [sp, #272]	; 0x110
 8000cfe:	2800      	cmp	r0, #0
 8000d00:	f040 808d 	bne.w	8000e1e <__ssvfiscanf_r+0x2d6>
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	e08f      	b.n	8000e2a <__ssvfiscanf_r+0x2e2>
 8000d0a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8000d0c:	f042 0220 	orr.w	r2, r2, #32
 8000d10:	9241      	str	r2, [sp, #260]	; 0x104
 8000d12:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8000d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d18:	9241      	str	r2, [sp, #260]	; 0x104
 8000d1a:	2210      	movs	r2, #16
 8000d1c:	2b6f      	cmp	r3, #111	; 0x6f
 8000d1e:	bf34      	ite	cc
 8000d20:	2303      	movcc	r3, #3
 8000d22:	2304      	movcs	r3, #4
 8000d24:	9242      	str	r2, [sp, #264]	; 0x108
 8000d26:	9347      	str	r3, [sp, #284]	; 0x11c
 8000d28:	6863      	ldr	r3, [r4, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	dd42      	ble.n	8000db4 <__ssvfiscanf_r+0x26c>
 8000d2e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8000d30:	0659      	lsls	r1, r3, #25
 8000d32:	d404      	bmi.n	8000d3e <__ssvfiscanf_r+0x1f6>
 8000d34:	6823      	ldr	r3, [r4, #0]
 8000d36:	781a      	ldrb	r2, [r3, #0]
 8000d38:	5cba      	ldrb	r2, [r7, r2]
 8000d3a:	0712      	lsls	r2, r2, #28
 8000d3c:	d441      	bmi.n	8000dc2 <__ssvfiscanf_r+0x27a>
 8000d3e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	dc50      	bgt.n	8000de6 <__ssvfiscanf_r+0x29e>
 8000d44:	466b      	mov	r3, sp
 8000d46:	4622      	mov	r2, r4
 8000d48:	4630      	mov	r0, r6
 8000d4a:	a941      	add	r1, sp, #260	; 0x104
 8000d4c:	f000 f876 	bl	8000e3c <_scanf_chars>
 8000d50:	2801      	cmp	r0, #1
 8000d52:	d06e      	beq.n	8000e32 <__ssvfiscanf_r+0x2ea>
 8000d54:	2802      	cmp	r0, #2
 8000d56:	f47f af1d 	bne.w	8000b94 <__ssvfiscanf_r+0x4c>
 8000d5a:	e7cf      	b.n	8000cfc <__ssvfiscanf_r+0x1b4>
 8000d5c:	220a      	movs	r2, #10
 8000d5e:	e7dd      	b.n	8000d1c <__ssvfiscanf_r+0x1d4>
 8000d60:	2300      	movs	r3, #0
 8000d62:	9342      	str	r3, [sp, #264]	; 0x108
 8000d64:	2303      	movs	r3, #3
 8000d66:	e7de      	b.n	8000d26 <__ssvfiscanf_r+0x1de>
 8000d68:	2308      	movs	r3, #8
 8000d6a:	9342      	str	r3, [sp, #264]	; 0x108
 8000d6c:	2304      	movs	r3, #4
 8000d6e:	e7da      	b.n	8000d26 <__ssvfiscanf_r+0x1de>
 8000d70:	4629      	mov	r1, r5
 8000d72:	4640      	mov	r0, r8
 8000d74:	f000 f9b4 	bl	80010e0 <__sccl>
 8000d78:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8000d7a:	4605      	mov	r5, r0
 8000d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d80:	9341      	str	r3, [sp, #260]	; 0x104
 8000d82:	2301      	movs	r3, #1
 8000d84:	e7cf      	b.n	8000d26 <__ssvfiscanf_r+0x1de>
 8000d86:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8000d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d8c:	9341      	str	r3, [sp, #260]	; 0x104
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e7c9      	b.n	8000d26 <__ssvfiscanf_r+0x1de>
 8000d92:	2302      	movs	r3, #2
 8000d94:	e7c7      	b.n	8000d26 <__ssvfiscanf_r+0x1de>
 8000d96:	9841      	ldr	r0, [sp, #260]	; 0x104
 8000d98:	06c3      	lsls	r3, r0, #27
 8000d9a:	f53f aefb 	bmi.w	8000b94 <__ssvfiscanf_r+0x4c>
 8000d9e:	9b00      	ldr	r3, [sp, #0]
 8000da0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8000da2:	1d19      	adds	r1, r3, #4
 8000da4:	9100      	str	r1, [sp, #0]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f010 0f01 	tst.w	r0, #1
 8000dac:	bf14      	ite	ne
 8000dae:	801a      	strhne	r2, [r3, #0]
 8000db0:	601a      	streq	r2, [r3, #0]
 8000db2:	e6ef      	b.n	8000b94 <__ssvfiscanf_r+0x4c>
 8000db4:	4621      	mov	r1, r4
 8000db6:	4630      	mov	r0, r6
 8000db8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8000dba:	4798      	blx	r3
 8000dbc:	2800      	cmp	r0, #0
 8000dbe:	d0b6      	beq.n	8000d2e <__ssvfiscanf_r+0x1e6>
 8000dc0:	e79c      	b.n	8000cfc <__ssvfiscanf_r+0x1b4>
 8000dc2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8000dc4:	3201      	adds	r2, #1
 8000dc6:	9245      	str	r2, [sp, #276]	; 0x114
 8000dc8:	6862      	ldr	r2, [r4, #4]
 8000dca:	3a01      	subs	r2, #1
 8000dcc:	2a00      	cmp	r2, #0
 8000dce:	6062      	str	r2, [r4, #4]
 8000dd0:	dd02      	ble.n	8000dd8 <__ssvfiscanf_r+0x290>
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	6023      	str	r3, [r4, #0]
 8000dd6:	e7ad      	b.n	8000d34 <__ssvfiscanf_r+0x1ec>
 8000dd8:	4621      	mov	r1, r4
 8000dda:	4630      	mov	r0, r6
 8000ddc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8000dde:	4798      	blx	r3
 8000de0:	2800      	cmp	r0, #0
 8000de2:	d0a7      	beq.n	8000d34 <__ssvfiscanf_r+0x1ec>
 8000de4:	e78a      	b.n	8000cfc <__ssvfiscanf_r+0x1b4>
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	dc0e      	bgt.n	8000e08 <__ssvfiscanf_r+0x2c0>
 8000dea:	466b      	mov	r3, sp
 8000dec:	4622      	mov	r2, r4
 8000dee:	4630      	mov	r0, r6
 8000df0:	a941      	add	r1, sp, #260	; 0x104
 8000df2:	f000 f87d 	bl	8000ef0 <_scanf_i>
 8000df6:	e7ab      	b.n	8000d50 <__ssvfiscanf_r+0x208>
 8000df8:	08000a95 	.word	0x08000a95
 8000dfc:	08000b0f 	.word	0x08000b0f
 8000e00:	0800170c 	.word	0x0800170c
 8000e04:	080016ec 	.word	0x080016ec
 8000e08:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <__ssvfiscanf_r+0x2f0>)
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f43f aec2 	beq.w	8000b94 <__ssvfiscanf_r+0x4c>
 8000e10:	466b      	mov	r3, sp
 8000e12:	4622      	mov	r2, r4
 8000e14:	4630      	mov	r0, r6
 8000e16:	a941      	add	r1, sp, #260	; 0x104
 8000e18:	f3af 8000 	nop.w
 8000e1c:	e798      	b.n	8000d50 <__ssvfiscanf_r+0x208>
 8000e1e:	89a3      	ldrh	r3, [r4, #12]
 8000e20:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000e24:	bf18      	it	ne
 8000e26:	f04f 30ff 	movne.w	r0, #4294967295
 8000e2a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	9844      	ldr	r0, [sp, #272]	; 0x110
 8000e34:	e7f9      	b.n	8000e2a <__ssvfiscanf_r+0x2e2>
 8000e36:	bf00      	nop
 8000e38:	00000000 	.word	0x00000000

08000e3c <_scanf_chars>:
 8000e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e40:	4615      	mov	r5, r2
 8000e42:	688a      	ldr	r2, [r1, #8]
 8000e44:	4680      	mov	r8, r0
 8000e46:	460c      	mov	r4, r1
 8000e48:	b932      	cbnz	r2, 8000e58 <_scanf_chars+0x1c>
 8000e4a:	698a      	ldr	r2, [r1, #24]
 8000e4c:	2a00      	cmp	r2, #0
 8000e4e:	bf0c      	ite	eq
 8000e50:	2201      	moveq	r2, #1
 8000e52:	f04f 32ff 	movne.w	r2, #4294967295
 8000e56:	608a      	str	r2, [r1, #8]
 8000e58:	2700      	movs	r7, #0
 8000e5a:	6822      	ldr	r2, [r4, #0]
 8000e5c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8000eec <_scanf_chars+0xb0>
 8000e60:	06d1      	lsls	r1, r2, #27
 8000e62:	bf5f      	itttt	pl
 8000e64:	681a      	ldrpl	r2, [r3, #0]
 8000e66:	1d11      	addpl	r1, r2, #4
 8000e68:	6019      	strpl	r1, [r3, #0]
 8000e6a:	6816      	ldrpl	r6, [r2, #0]
 8000e6c:	69a0      	ldr	r0, [r4, #24]
 8000e6e:	b188      	cbz	r0, 8000e94 <_scanf_chars+0x58>
 8000e70:	2801      	cmp	r0, #1
 8000e72:	d107      	bne.n	8000e84 <_scanf_chars+0x48>
 8000e74:	682b      	ldr	r3, [r5, #0]
 8000e76:	781a      	ldrb	r2, [r3, #0]
 8000e78:	6963      	ldr	r3, [r4, #20]
 8000e7a:	5c9b      	ldrb	r3, [r3, r2]
 8000e7c:	b953      	cbnz	r3, 8000e94 <_scanf_chars+0x58>
 8000e7e:	2f00      	cmp	r7, #0
 8000e80:	d031      	beq.n	8000ee6 <_scanf_chars+0xaa>
 8000e82:	e022      	b.n	8000eca <_scanf_chars+0x8e>
 8000e84:	2802      	cmp	r0, #2
 8000e86:	d120      	bne.n	8000eca <_scanf_chars+0x8e>
 8000e88:	682b      	ldr	r3, [r5, #0]
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8000e90:	071b      	lsls	r3, r3, #28
 8000e92:	d41a      	bmi.n	8000eca <_scanf_chars+0x8e>
 8000e94:	6823      	ldr	r3, [r4, #0]
 8000e96:	3701      	adds	r7, #1
 8000e98:	06da      	lsls	r2, r3, #27
 8000e9a:	bf5e      	ittt	pl
 8000e9c:	682b      	ldrpl	r3, [r5, #0]
 8000e9e:	781b      	ldrbpl	r3, [r3, #0]
 8000ea0:	f806 3b01 	strbpl.w	r3, [r6], #1
 8000ea4:	682a      	ldr	r2, [r5, #0]
 8000ea6:	686b      	ldr	r3, [r5, #4]
 8000ea8:	3201      	adds	r2, #1
 8000eaa:	602a      	str	r2, [r5, #0]
 8000eac:	68a2      	ldr	r2, [r4, #8]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	3a01      	subs	r2, #1
 8000eb2:	606b      	str	r3, [r5, #4]
 8000eb4:	60a2      	str	r2, [r4, #8]
 8000eb6:	b142      	cbz	r2, 8000eca <_scanf_chars+0x8e>
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	dcd7      	bgt.n	8000e6c <_scanf_chars+0x30>
 8000ebc:	4629      	mov	r1, r5
 8000ebe:	4640      	mov	r0, r8
 8000ec0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8000ec4:	4798      	blx	r3
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	d0d0      	beq.n	8000e6c <_scanf_chars+0x30>
 8000eca:	6823      	ldr	r3, [r4, #0]
 8000ecc:	f013 0310 	ands.w	r3, r3, #16
 8000ed0:	d105      	bne.n	8000ede <_scanf_chars+0xa2>
 8000ed2:	68e2      	ldr	r2, [r4, #12]
 8000ed4:	3201      	adds	r2, #1
 8000ed6:	60e2      	str	r2, [r4, #12]
 8000ed8:	69a2      	ldr	r2, [r4, #24]
 8000eda:	b102      	cbz	r2, 8000ede <_scanf_chars+0xa2>
 8000edc:	7033      	strb	r3, [r6, #0]
 8000ede:	2000      	movs	r0, #0
 8000ee0:	6923      	ldr	r3, [r4, #16]
 8000ee2:	443b      	add	r3, r7
 8000ee4:	6123      	str	r3, [r4, #16]
 8000ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000eea:	bf00      	nop
 8000eec:	0800170c 	.word	0x0800170c

08000ef0 <_scanf_i>:
 8000ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ef4:	460c      	mov	r4, r1
 8000ef6:	4698      	mov	r8, r3
 8000ef8:	4b75      	ldr	r3, [pc, #468]	; (80010d0 <_scanf_i+0x1e0>)
 8000efa:	b087      	sub	sp, #28
 8000efc:	4682      	mov	sl, r0
 8000efe:	4616      	mov	r6, r2
 8000f00:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f04:	ab03      	add	r3, sp, #12
 8000f06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000f0a:	4b72      	ldr	r3, [pc, #456]	; (80010d4 <_scanf_i+0x1e4>)
 8000f0c:	69a1      	ldr	r1, [r4, #24]
 8000f0e:	4a72      	ldr	r2, [pc, #456]	; (80010d8 <_scanf_i+0x1e8>)
 8000f10:	4627      	mov	r7, r4
 8000f12:	2903      	cmp	r1, #3
 8000f14:	bf18      	it	ne
 8000f16:	461a      	movne	r2, r3
 8000f18:	68a3      	ldr	r3, [r4, #8]
 8000f1a:	9201      	str	r2, [sp, #4]
 8000f1c:	1e5a      	subs	r2, r3, #1
 8000f1e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8000f22:	bf81      	itttt	hi
 8000f24:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8000f28:	eb03 0905 	addhi.w	r9, r3, r5
 8000f2c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8000f30:	60a3      	strhi	r3, [r4, #8]
 8000f32:	f857 3b1c 	ldr.w	r3, [r7], #28
 8000f36:	bf98      	it	ls
 8000f38:	f04f 0900 	movls.w	r9, #0
 8000f3c:	463d      	mov	r5, r7
 8000f3e:	f04f 0b00 	mov.w	fp, #0
 8000f42:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8000f46:	6023      	str	r3, [r4, #0]
 8000f48:	6831      	ldr	r1, [r6, #0]
 8000f4a:	ab03      	add	r3, sp, #12
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	7809      	ldrb	r1, [r1, #0]
 8000f50:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8000f54:	f000 fa28 	bl	80013a8 <memchr>
 8000f58:	b328      	cbz	r0, 8000fa6 <_scanf_i+0xb6>
 8000f5a:	f1bb 0f01 	cmp.w	fp, #1
 8000f5e:	d159      	bne.n	8001014 <_scanf_i+0x124>
 8000f60:	6862      	ldr	r2, [r4, #4]
 8000f62:	b92a      	cbnz	r2, 8000f70 <_scanf_i+0x80>
 8000f64:	2308      	movs	r3, #8
 8000f66:	6822      	ldr	r2, [r4, #0]
 8000f68:	6063      	str	r3, [r4, #4]
 8000f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f6e:	6022      	str	r2, [r4, #0]
 8000f70:	6822      	ldr	r2, [r4, #0]
 8000f72:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8000f76:	6022      	str	r2, [r4, #0]
 8000f78:	68a2      	ldr	r2, [r4, #8]
 8000f7a:	1e51      	subs	r1, r2, #1
 8000f7c:	60a1      	str	r1, [r4, #8]
 8000f7e:	b192      	cbz	r2, 8000fa6 <_scanf_i+0xb6>
 8000f80:	6832      	ldr	r2, [r6, #0]
 8000f82:	1c51      	adds	r1, r2, #1
 8000f84:	6031      	str	r1, [r6, #0]
 8000f86:	7812      	ldrb	r2, [r2, #0]
 8000f88:	f805 2b01 	strb.w	r2, [r5], #1
 8000f8c:	6872      	ldr	r2, [r6, #4]
 8000f8e:	3a01      	subs	r2, #1
 8000f90:	2a00      	cmp	r2, #0
 8000f92:	6072      	str	r2, [r6, #4]
 8000f94:	dc07      	bgt.n	8000fa6 <_scanf_i+0xb6>
 8000f96:	4631      	mov	r1, r6
 8000f98:	4650      	mov	r0, sl
 8000f9a:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8000f9e:	4790      	blx	r2
 8000fa0:	2800      	cmp	r0, #0
 8000fa2:	f040 8085 	bne.w	80010b0 <_scanf_i+0x1c0>
 8000fa6:	f10b 0b01 	add.w	fp, fp, #1
 8000faa:	f1bb 0f03 	cmp.w	fp, #3
 8000fae:	d1cb      	bne.n	8000f48 <_scanf_i+0x58>
 8000fb0:	6863      	ldr	r3, [r4, #4]
 8000fb2:	b90b      	cbnz	r3, 8000fb8 <_scanf_i+0xc8>
 8000fb4:	230a      	movs	r3, #10
 8000fb6:	6063      	str	r3, [r4, #4]
 8000fb8:	6863      	ldr	r3, [r4, #4]
 8000fba:	4948      	ldr	r1, [pc, #288]	; (80010dc <_scanf_i+0x1ec>)
 8000fbc:	6960      	ldr	r0, [r4, #20]
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	f000 f88e 	bl	80010e0 <__sccl>
 8000fc4:	f04f 0b00 	mov.w	fp, #0
 8000fc8:	68a3      	ldr	r3, [r4, #8]
 8000fca:	6822      	ldr	r2, [r4, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d03d      	beq.n	800104c <_scanf_i+0x15c>
 8000fd0:	6831      	ldr	r1, [r6, #0]
 8000fd2:	6960      	ldr	r0, [r4, #20]
 8000fd4:	f891 c000 	ldrb.w	ip, [r1]
 8000fd8:	f810 000c 	ldrb.w	r0, [r0, ip]
 8000fdc:	2800      	cmp	r0, #0
 8000fde:	d035      	beq.n	800104c <_scanf_i+0x15c>
 8000fe0:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8000fe4:	d124      	bne.n	8001030 <_scanf_i+0x140>
 8000fe6:	0510      	lsls	r0, r2, #20
 8000fe8:	d522      	bpl.n	8001030 <_scanf_i+0x140>
 8000fea:	f10b 0b01 	add.w	fp, fp, #1
 8000fee:	f1b9 0f00 	cmp.w	r9, #0
 8000ff2:	d003      	beq.n	8000ffc <_scanf_i+0x10c>
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	f109 39ff 	add.w	r9, r9, #4294967295
 8000ffa:	60a3      	str	r3, [r4, #8]
 8000ffc:	6873      	ldr	r3, [r6, #4]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	2b00      	cmp	r3, #0
 8001002:	6073      	str	r3, [r6, #4]
 8001004:	dd1b      	ble.n	800103e <_scanf_i+0x14e>
 8001006:	6833      	ldr	r3, [r6, #0]
 8001008:	3301      	adds	r3, #1
 800100a:	6033      	str	r3, [r6, #0]
 800100c:	68a3      	ldr	r3, [r4, #8]
 800100e:	3b01      	subs	r3, #1
 8001010:	60a3      	str	r3, [r4, #8]
 8001012:	e7d9      	b.n	8000fc8 <_scanf_i+0xd8>
 8001014:	f1bb 0f02 	cmp.w	fp, #2
 8001018:	d1ae      	bne.n	8000f78 <_scanf_i+0x88>
 800101a:	6822      	ldr	r2, [r4, #0]
 800101c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8001020:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001024:	d1bf      	bne.n	8000fa6 <_scanf_i+0xb6>
 8001026:	2310      	movs	r3, #16
 8001028:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800102c:	6063      	str	r3, [r4, #4]
 800102e:	e7a2      	b.n	8000f76 <_scanf_i+0x86>
 8001030:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8001034:	6022      	str	r2, [r4, #0]
 8001036:	780b      	ldrb	r3, [r1, #0]
 8001038:	f805 3b01 	strb.w	r3, [r5], #1
 800103c:	e7de      	b.n	8000ffc <_scanf_i+0x10c>
 800103e:	4631      	mov	r1, r6
 8001040:	4650      	mov	r0, sl
 8001042:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8001046:	4798      	blx	r3
 8001048:	2800      	cmp	r0, #0
 800104a:	d0df      	beq.n	800100c <_scanf_i+0x11c>
 800104c:	6823      	ldr	r3, [r4, #0]
 800104e:	05db      	lsls	r3, r3, #23
 8001050:	d50d      	bpl.n	800106e <_scanf_i+0x17e>
 8001052:	42bd      	cmp	r5, r7
 8001054:	d909      	bls.n	800106a <_scanf_i+0x17a>
 8001056:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800105a:	4632      	mov	r2, r6
 800105c:	4650      	mov	r0, sl
 800105e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8001062:	f105 39ff 	add.w	r9, r5, #4294967295
 8001066:	4798      	blx	r3
 8001068:	464d      	mov	r5, r9
 800106a:	42bd      	cmp	r5, r7
 800106c:	d02d      	beq.n	80010ca <_scanf_i+0x1da>
 800106e:	6822      	ldr	r2, [r4, #0]
 8001070:	f012 0210 	ands.w	r2, r2, #16
 8001074:	d113      	bne.n	800109e <_scanf_i+0x1ae>
 8001076:	702a      	strb	r2, [r5, #0]
 8001078:	4639      	mov	r1, r7
 800107a:	6863      	ldr	r3, [r4, #4]
 800107c:	4650      	mov	r0, sl
 800107e:	9e01      	ldr	r6, [sp, #4]
 8001080:	47b0      	blx	r6
 8001082:	6821      	ldr	r1, [r4, #0]
 8001084:	f8d8 3000 	ldr.w	r3, [r8]
 8001088:	f011 0f20 	tst.w	r1, #32
 800108c:	d013      	beq.n	80010b6 <_scanf_i+0x1c6>
 800108e:	1d1a      	adds	r2, r3, #4
 8001090:	f8c8 2000 	str.w	r2, [r8]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	6018      	str	r0, [r3, #0]
 8001098:	68e3      	ldr	r3, [r4, #12]
 800109a:	3301      	adds	r3, #1
 800109c:	60e3      	str	r3, [r4, #12]
 800109e:	2000      	movs	r0, #0
 80010a0:	1bed      	subs	r5, r5, r7
 80010a2:	44ab      	add	fp, r5
 80010a4:	6925      	ldr	r5, [r4, #16]
 80010a6:	445d      	add	r5, fp
 80010a8:	6125      	str	r5, [r4, #16]
 80010aa:	b007      	add	sp, #28
 80010ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010b0:	f04f 0b00 	mov.w	fp, #0
 80010b4:	e7ca      	b.n	800104c <_scanf_i+0x15c>
 80010b6:	1d1a      	adds	r2, r3, #4
 80010b8:	f8c8 2000 	str.w	r2, [r8]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f011 0f01 	tst.w	r1, #1
 80010c2:	bf14      	ite	ne
 80010c4:	8018      	strhne	r0, [r3, #0]
 80010c6:	6018      	streq	r0, [r3, #0]
 80010c8:	e7e6      	b.n	8001098 <_scanf_i+0x1a8>
 80010ca:	2001      	movs	r0, #1
 80010cc:	e7ed      	b.n	80010aa <_scanf_i+0x1ba>
 80010ce:	bf00      	nop
 80010d0:	080016e0 	.word	0x080016e0
 80010d4:	08001331 	.word	0x08001331
 80010d8:	08001249 	.word	0x08001249
 80010dc:	08001709 	.word	0x08001709

080010e0 <__sccl>:
 80010e0:	b570      	push	{r4, r5, r6, lr}
 80010e2:	780b      	ldrb	r3, [r1, #0]
 80010e4:	4604      	mov	r4, r0
 80010e6:	2b5e      	cmp	r3, #94	; 0x5e
 80010e8:	bf13      	iteet	ne
 80010ea:	2200      	movne	r2, #0
 80010ec:	2201      	moveq	r2, #1
 80010ee:	784b      	ldrbeq	r3, [r1, #1]
 80010f0:	1c48      	addne	r0, r1, #1
 80010f2:	bf08      	it	eq
 80010f4:	1c88      	addeq	r0, r1, #2
 80010f6:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80010fa:	1e61      	subs	r1, r4, #1
 80010fc:	f801 2f01 	strb.w	r2, [r1, #1]!
 8001100:	42a9      	cmp	r1, r5
 8001102:	d1fb      	bne.n	80010fc <__sccl+0x1c>
 8001104:	b90b      	cbnz	r3, 800110a <__sccl+0x2a>
 8001106:	3801      	subs	r0, #1
 8001108:	bd70      	pop	{r4, r5, r6, pc}
 800110a:	f082 0201 	eor.w	r2, r2, #1
 800110e:	4605      	mov	r5, r0
 8001110:	54e2      	strb	r2, [r4, r3]
 8001112:	4628      	mov	r0, r5
 8001114:	f810 1b01 	ldrb.w	r1, [r0], #1
 8001118:	292d      	cmp	r1, #45	; 0x2d
 800111a:	d006      	beq.n	800112a <__sccl+0x4a>
 800111c:	295d      	cmp	r1, #93	; 0x5d
 800111e:	d0f3      	beq.n	8001108 <__sccl+0x28>
 8001120:	b909      	cbnz	r1, 8001126 <__sccl+0x46>
 8001122:	4628      	mov	r0, r5
 8001124:	e7f0      	b.n	8001108 <__sccl+0x28>
 8001126:	460b      	mov	r3, r1
 8001128:	e7f1      	b.n	800110e <__sccl+0x2e>
 800112a:	786e      	ldrb	r6, [r5, #1]
 800112c:	2e5d      	cmp	r6, #93	; 0x5d
 800112e:	d0fa      	beq.n	8001126 <__sccl+0x46>
 8001130:	42b3      	cmp	r3, r6
 8001132:	dcf8      	bgt.n	8001126 <__sccl+0x46>
 8001134:	4619      	mov	r1, r3
 8001136:	3502      	adds	r5, #2
 8001138:	3101      	adds	r1, #1
 800113a:	428e      	cmp	r6, r1
 800113c:	5462      	strb	r2, [r4, r1]
 800113e:	dcfb      	bgt.n	8001138 <__sccl+0x58>
 8001140:	1af1      	subs	r1, r6, r3
 8001142:	3901      	subs	r1, #1
 8001144:	42b3      	cmp	r3, r6
 8001146:	bfa8      	it	ge
 8001148:	2100      	movge	r1, #0
 800114a:	1c58      	adds	r0, r3, #1
 800114c:	1843      	adds	r3, r0, r1
 800114e:	e7e0      	b.n	8001112 <__sccl+0x32>

08001150 <_strtol_l.constprop.0>:
 8001150:	2b01      	cmp	r3, #1
 8001152:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001156:	4680      	mov	r8, r0
 8001158:	d001      	beq.n	800115e <_strtol_l.constprop.0+0xe>
 800115a:	2b24      	cmp	r3, #36	; 0x24
 800115c:	d906      	bls.n	800116c <_strtol_l.constprop.0+0x1c>
 800115e:	f7ff fc27 	bl	80009b0 <__errno>
 8001162:	2316      	movs	r3, #22
 8001164:	6003      	str	r3, [r0, #0]
 8001166:	2000      	movs	r0, #0
 8001168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800116c:	460d      	mov	r5, r1
 800116e:	4f35      	ldr	r7, [pc, #212]	; (8001244 <_strtol_l.constprop.0+0xf4>)
 8001170:	4628      	mov	r0, r5
 8001172:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001176:	5de6      	ldrb	r6, [r4, r7]
 8001178:	f016 0608 	ands.w	r6, r6, #8
 800117c:	d1f8      	bne.n	8001170 <_strtol_l.constprop.0+0x20>
 800117e:	2c2d      	cmp	r4, #45	; 0x2d
 8001180:	d12f      	bne.n	80011e2 <_strtol_l.constprop.0+0x92>
 8001182:	2601      	movs	r6, #1
 8001184:	782c      	ldrb	r4, [r5, #0]
 8001186:	1c85      	adds	r5, r0, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d057      	beq.n	800123c <_strtol_l.constprop.0+0xec>
 800118c:	2b10      	cmp	r3, #16
 800118e:	d109      	bne.n	80011a4 <_strtol_l.constprop.0+0x54>
 8001190:	2c30      	cmp	r4, #48	; 0x30
 8001192:	d107      	bne.n	80011a4 <_strtol_l.constprop.0+0x54>
 8001194:	7828      	ldrb	r0, [r5, #0]
 8001196:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800119a:	2858      	cmp	r0, #88	; 0x58
 800119c:	d149      	bne.n	8001232 <_strtol_l.constprop.0+0xe2>
 800119e:	2310      	movs	r3, #16
 80011a0:	786c      	ldrb	r4, [r5, #1]
 80011a2:	3502      	adds	r5, #2
 80011a4:	2700      	movs	r7, #0
 80011a6:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80011aa:	f10e 3eff 	add.w	lr, lr, #4294967295
 80011ae:	fbbe f9f3 	udiv	r9, lr, r3
 80011b2:	4638      	mov	r0, r7
 80011b4:	fb03 ea19 	mls	sl, r3, r9, lr
 80011b8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80011bc:	f1bc 0f09 	cmp.w	ip, #9
 80011c0:	d814      	bhi.n	80011ec <_strtol_l.constprop.0+0x9c>
 80011c2:	4664      	mov	r4, ip
 80011c4:	42a3      	cmp	r3, r4
 80011c6:	dd22      	ble.n	800120e <_strtol_l.constprop.0+0xbe>
 80011c8:	2f00      	cmp	r7, #0
 80011ca:	db1d      	blt.n	8001208 <_strtol_l.constprop.0+0xb8>
 80011cc:	4581      	cmp	r9, r0
 80011ce:	d31b      	bcc.n	8001208 <_strtol_l.constprop.0+0xb8>
 80011d0:	d101      	bne.n	80011d6 <_strtol_l.constprop.0+0x86>
 80011d2:	45a2      	cmp	sl, r4
 80011d4:	db18      	blt.n	8001208 <_strtol_l.constprop.0+0xb8>
 80011d6:	2701      	movs	r7, #1
 80011d8:	fb00 4003 	mla	r0, r0, r3, r4
 80011dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80011e0:	e7ea      	b.n	80011b8 <_strtol_l.constprop.0+0x68>
 80011e2:	2c2b      	cmp	r4, #43	; 0x2b
 80011e4:	bf04      	itt	eq
 80011e6:	782c      	ldrbeq	r4, [r5, #0]
 80011e8:	1c85      	addeq	r5, r0, #2
 80011ea:	e7cd      	b.n	8001188 <_strtol_l.constprop.0+0x38>
 80011ec:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80011f0:	f1bc 0f19 	cmp.w	ip, #25
 80011f4:	d801      	bhi.n	80011fa <_strtol_l.constprop.0+0xaa>
 80011f6:	3c37      	subs	r4, #55	; 0x37
 80011f8:	e7e4      	b.n	80011c4 <_strtol_l.constprop.0+0x74>
 80011fa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80011fe:	f1bc 0f19 	cmp.w	ip, #25
 8001202:	d804      	bhi.n	800120e <_strtol_l.constprop.0+0xbe>
 8001204:	3c57      	subs	r4, #87	; 0x57
 8001206:	e7dd      	b.n	80011c4 <_strtol_l.constprop.0+0x74>
 8001208:	f04f 37ff 	mov.w	r7, #4294967295
 800120c:	e7e6      	b.n	80011dc <_strtol_l.constprop.0+0x8c>
 800120e:	2f00      	cmp	r7, #0
 8001210:	da07      	bge.n	8001222 <_strtol_l.constprop.0+0xd2>
 8001212:	2322      	movs	r3, #34	; 0x22
 8001214:	4670      	mov	r0, lr
 8001216:	f8c8 3000 	str.w	r3, [r8]
 800121a:	2a00      	cmp	r2, #0
 800121c:	d0a4      	beq.n	8001168 <_strtol_l.constprop.0+0x18>
 800121e:	1e69      	subs	r1, r5, #1
 8001220:	e005      	b.n	800122e <_strtol_l.constprop.0+0xde>
 8001222:	b106      	cbz	r6, 8001226 <_strtol_l.constprop.0+0xd6>
 8001224:	4240      	negs	r0, r0
 8001226:	2a00      	cmp	r2, #0
 8001228:	d09e      	beq.n	8001168 <_strtol_l.constprop.0+0x18>
 800122a:	2f00      	cmp	r7, #0
 800122c:	d1f7      	bne.n	800121e <_strtol_l.constprop.0+0xce>
 800122e:	6011      	str	r1, [r2, #0]
 8001230:	e79a      	b.n	8001168 <_strtol_l.constprop.0+0x18>
 8001232:	2430      	movs	r4, #48	; 0x30
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1b5      	bne.n	80011a4 <_strtol_l.constprop.0+0x54>
 8001238:	2308      	movs	r3, #8
 800123a:	e7b3      	b.n	80011a4 <_strtol_l.constprop.0+0x54>
 800123c:	2c30      	cmp	r4, #48	; 0x30
 800123e:	d0a9      	beq.n	8001194 <_strtol_l.constprop.0+0x44>
 8001240:	230a      	movs	r3, #10
 8001242:	e7af      	b.n	80011a4 <_strtol_l.constprop.0+0x54>
 8001244:	0800170c 	.word	0x0800170c

08001248 <_strtol_r>:
 8001248:	f7ff bf82 	b.w	8001150 <_strtol_l.constprop.0>

0800124c <_strtoul_l.constprop.0>:
 800124c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001250:	4686      	mov	lr, r0
 8001252:	460d      	mov	r5, r1
 8001254:	4f35      	ldr	r7, [pc, #212]	; (800132c <_strtoul_l.constprop.0+0xe0>)
 8001256:	4628      	mov	r0, r5
 8001258:	f815 4b01 	ldrb.w	r4, [r5], #1
 800125c:	5de6      	ldrb	r6, [r4, r7]
 800125e:	f016 0608 	ands.w	r6, r6, #8
 8001262:	d1f8      	bne.n	8001256 <_strtoul_l.constprop.0+0xa>
 8001264:	2c2d      	cmp	r4, #45	; 0x2d
 8001266:	d12f      	bne.n	80012c8 <_strtoul_l.constprop.0+0x7c>
 8001268:	2601      	movs	r6, #1
 800126a:	782c      	ldrb	r4, [r5, #0]
 800126c:	1c85      	adds	r5, r0, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d057      	beq.n	8001322 <_strtoul_l.constprop.0+0xd6>
 8001272:	2b10      	cmp	r3, #16
 8001274:	d109      	bne.n	800128a <_strtoul_l.constprop.0+0x3e>
 8001276:	2c30      	cmp	r4, #48	; 0x30
 8001278:	d107      	bne.n	800128a <_strtoul_l.constprop.0+0x3e>
 800127a:	7828      	ldrb	r0, [r5, #0]
 800127c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8001280:	2858      	cmp	r0, #88	; 0x58
 8001282:	d149      	bne.n	8001318 <_strtoul_l.constprop.0+0xcc>
 8001284:	2310      	movs	r3, #16
 8001286:	786c      	ldrb	r4, [r5, #1]
 8001288:	3502      	adds	r5, #2
 800128a:	f04f 38ff 	mov.w	r8, #4294967295
 800128e:	fbb8 f8f3 	udiv	r8, r8, r3
 8001292:	2700      	movs	r7, #0
 8001294:	fb03 f908 	mul.w	r9, r3, r8
 8001298:	4638      	mov	r0, r7
 800129a:	ea6f 0909 	mvn.w	r9, r9
 800129e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80012a2:	f1bc 0f09 	cmp.w	ip, #9
 80012a6:	d814      	bhi.n	80012d2 <_strtoul_l.constprop.0+0x86>
 80012a8:	4664      	mov	r4, ip
 80012aa:	42a3      	cmp	r3, r4
 80012ac:	dd22      	ble.n	80012f4 <_strtoul_l.constprop.0+0xa8>
 80012ae:	2f00      	cmp	r7, #0
 80012b0:	db1d      	blt.n	80012ee <_strtoul_l.constprop.0+0xa2>
 80012b2:	4580      	cmp	r8, r0
 80012b4:	d31b      	bcc.n	80012ee <_strtoul_l.constprop.0+0xa2>
 80012b6:	d101      	bne.n	80012bc <_strtoul_l.constprop.0+0x70>
 80012b8:	45a1      	cmp	r9, r4
 80012ba:	db18      	blt.n	80012ee <_strtoul_l.constprop.0+0xa2>
 80012bc:	2701      	movs	r7, #1
 80012be:	fb00 4003 	mla	r0, r0, r3, r4
 80012c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80012c6:	e7ea      	b.n	800129e <_strtoul_l.constprop.0+0x52>
 80012c8:	2c2b      	cmp	r4, #43	; 0x2b
 80012ca:	bf04      	itt	eq
 80012cc:	782c      	ldrbeq	r4, [r5, #0]
 80012ce:	1c85      	addeq	r5, r0, #2
 80012d0:	e7cd      	b.n	800126e <_strtoul_l.constprop.0+0x22>
 80012d2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80012d6:	f1bc 0f19 	cmp.w	ip, #25
 80012da:	d801      	bhi.n	80012e0 <_strtoul_l.constprop.0+0x94>
 80012dc:	3c37      	subs	r4, #55	; 0x37
 80012de:	e7e4      	b.n	80012aa <_strtoul_l.constprop.0+0x5e>
 80012e0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80012e4:	f1bc 0f19 	cmp.w	ip, #25
 80012e8:	d804      	bhi.n	80012f4 <_strtoul_l.constprop.0+0xa8>
 80012ea:	3c57      	subs	r4, #87	; 0x57
 80012ec:	e7dd      	b.n	80012aa <_strtoul_l.constprop.0+0x5e>
 80012ee:	f04f 37ff 	mov.w	r7, #4294967295
 80012f2:	e7e6      	b.n	80012c2 <_strtoul_l.constprop.0+0x76>
 80012f4:	2f00      	cmp	r7, #0
 80012f6:	da07      	bge.n	8001308 <_strtoul_l.constprop.0+0xbc>
 80012f8:	2322      	movs	r3, #34	; 0x22
 80012fa:	f04f 30ff 	mov.w	r0, #4294967295
 80012fe:	f8ce 3000 	str.w	r3, [lr]
 8001302:	b932      	cbnz	r2, 8001312 <_strtoul_l.constprop.0+0xc6>
 8001304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001308:	b106      	cbz	r6, 800130c <_strtoul_l.constprop.0+0xc0>
 800130a:	4240      	negs	r0, r0
 800130c:	2a00      	cmp	r2, #0
 800130e:	d0f9      	beq.n	8001304 <_strtoul_l.constprop.0+0xb8>
 8001310:	b107      	cbz	r7, 8001314 <_strtoul_l.constprop.0+0xc8>
 8001312:	1e69      	subs	r1, r5, #1
 8001314:	6011      	str	r1, [r2, #0]
 8001316:	e7f5      	b.n	8001304 <_strtoul_l.constprop.0+0xb8>
 8001318:	2430      	movs	r4, #48	; 0x30
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1b5      	bne.n	800128a <_strtoul_l.constprop.0+0x3e>
 800131e:	2308      	movs	r3, #8
 8001320:	e7b3      	b.n	800128a <_strtoul_l.constprop.0+0x3e>
 8001322:	2c30      	cmp	r4, #48	; 0x30
 8001324:	d0a9      	beq.n	800127a <_strtoul_l.constprop.0+0x2e>
 8001326:	230a      	movs	r3, #10
 8001328:	e7af      	b.n	800128a <_strtoul_l.constprop.0+0x3e>
 800132a:	bf00      	nop
 800132c:	0800170c 	.word	0x0800170c

08001330 <_strtoul_r>:
 8001330:	f7ff bf8c 	b.w	800124c <_strtoul_l.constprop.0>

08001334 <__submore>:
 8001334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001338:	460c      	mov	r4, r1
 800133a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800133c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001340:	4299      	cmp	r1, r3
 8001342:	d11b      	bne.n	800137c <__submore+0x48>
 8001344:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001348:	f000 f8b2 	bl	80014b0 <_malloc_r>
 800134c:	b918      	cbnz	r0, 8001356 <__submore+0x22>
 800134e:	f04f 30ff 	mov.w	r0, #4294967295
 8001352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800135a:	63a3      	str	r3, [r4, #56]	; 0x38
 800135c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8001360:	6360      	str	r0, [r4, #52]	; 0x34
 8001362:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8001366:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800136a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800136e:	7043      	strb	r3, [r0, #1]
 8001370:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001374:	7003      	strb	r3, [r0, #0]
 8001376:	6020      	str	r0, [r4, #0]
 8001378:	2000      	movs	r0, #0
 800137a:	e7ea      	b.n	8001352 <__submore+0x1e>
 800137c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800137e:	0077      	lsls	r7, r6, #1
 8001380:	463a      	mov	r2, r7
 8001382:	f000 f909 	bl	8001598 <_realloc_r>
 8001386:	4605      	mov	r5, r0
 8001388:	2800      	cmp	r0, #0
 800138a:	d0e0      	beq.n	800134e <__submore+0x1a>
 800138c:	eb00 0806 	add.w	r8, r0, r6
 8001390:	4601      	mov	r1, r0
 8001392:	4632      	mov	r2, r6
 8001394:	4640      	mov	r0, r8
 8001396:	f000 f815 	bl	80013c4 <memcpy>
 800139a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800139e:	f8c4 8000 	str.w	r8, [r4]
 80013a2:	e7e9      	b.n	8001378 <__submore+0x44>

080013a4 <__retarget_lock_acquire_recursive>:
 80013a4:	4770      	bx	lr

080013a6 <__retarget_lock_release_recursive>:
 80013a6:	4770      	bx	lr

080013a8 <memchr>:
 80013a8:	4603      	mov	r3, r0
 80013aa:	b510      	push	{r4, lr}
 80013ac:	b2c9      	uxtb	r1, r1
 80013ae:	4402      	add	r2, r0
 80013b0:	4293      	cmp	r3, r2
 80013b2:	4618      	mov	r0, r3
 80013b4:	d101      	bne.n	80013ba <memchr+0x12>
 80013b6:	2000      	movs	r0, #0
 80013b8:	e003      	b.n	80013c2 <memchr+0x1a>
 80013ba:	7804      	ldrb	r4, [r0, #0]
 80013bc:	3301      	adds	r3, #1
 80013be:	428c      	cmp	r4, r1
 80013c0:	d1f6      	bne.n	80013b0 <memchr+0x8>
 80013c2:	bd10      	pop	{r4, pc}

080013c4 <memcpy>:
 80013c4:	440a      	add	r2, r1
 80013c6:	4291      	cmp	r1, r2
 80013c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80013cc:	d100      	bne.n	80013d0 <memcpy+0xc>
 80013ce:	4770      	bx	lr
 80013d0:	b510      	push	{r4, lr}
 80013d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80013d6:	4291      	cmp	r1, r2
 80013d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80013dc:	d1f9      	bne.n	80013d2 <memcpy+0xe>
 80013de:	bd10      	pop	{r4, pc}

080013e0 <_free_r>:
 80013e0:	b538      	push	{r3, r4, r5, lr}
 80013e2:	4605      	mov	r5, r0
 80013e4:	2900      	cmp	r1, #0
 80013e6:	d040      	beq.n	800146a <_free_r+0x8a>
 80013e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80013ec:	1f0c      	subs	r4, r1, #4
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	bfb8      	it	lt
 80013f2:	18e4      	addlt	r4, r4, r3
 80013f4:	f000 f910 	bl	8001618 <__malloc_lock>
 80013f8:	4a1c      	ldr	r2, [pc, #112]	; (800146c <_free_r+0x8c>)
 80013fa:	6813      	ldr	r3, [r2, #0]
 80013fc:	b933      	cbnz	r3, 800140c <_free_r+0x2c>
 80013fe:	6063      	str	r3, [r4, #4]
 8001400:	6014      	str	r4, [r2, #0]
 8001402:	4628      	mov	r0, r5
 8001404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001408:	f000 b90c 	b.w	8001624 <__malloc_unlock>
 800140c:	42a3      	cmp	r3, r4
 800140e:	d908      	bls.n	8001422 <_free_r+0x42>
 8001410:	6820      	ldr	r0, [r4, #0]
 8001412:	1821      	adds	r1, r4, r0
 8001414:	428b      	cmp	r3, r1
 8001416:	bf01      	itttt	eq
 8001418:	6819      	ldreq	r1, [r3, #0]
 800141a:	685b      	ldreq	r3, [r3, #4]
 800141c:	1809      	addeq	r1, r1, r0
 800141e:	6021      	streq	r1, [r4, #0]
 8001420:	e7ed      	b.n	80013fe <_free_r+0x1e>
 8001422:	461a      	mov	r2, r3
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	b10b      	cbz	r3, 800142c <_free_r+0x4c>
 8001428:	42a3      	cmp	r3, r4
 800142a:	d9fa      	bls.n	8001422 <_free_r+0x42>
 800142c:	6811      	ldr	r1, [r2, #0]
 800142e:	1850      	adds	r0, r2, r1
 8001430:	42a0      	cmp	r0, r4
 8001432:	d10b      	bne.n	800144c <_free_r+0x6c>
 8001434:	6820      	ldr	r0, [r4, #0]
 8001436:	4401      	add	r1, r0
 8001438:	1850      	adds	r0, r2, r1
 800143a:	4283      	cmp	r3, r0
 800143c:	6011      	str	r1, [r2, #0]
 800143e:	d1e0      	bne.n	8001402 <_free_r+0x22>
 8001440:	6818      	ldr	r0, [r3, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	4401      	add	r1, r0
 8001446:	6011      	str	r1, [r2, #0]
 8001448:	6053      	str	r3, [r2, #4]
 800144a:	e7da      	b.n	8001402 <_free_r+0x22>
 800144c:	d902      	bls.n	8001454 <_free_r+0x74>
 800144e:	230c      	movs	r3, #12
 8001450:	602b      	str	r3, [r5, #0]
 8001452:	e7d6      	b.n	8001402 <_free_r+0x22>
 8001454:	6820      	ldr	r0, [r4, #0]
 8001456:	1821      	adds	r1, r4, r0
 8001458:	428b      	cmp	r3, r1
 800145a:	bf01      	itttt	eq
 800145c:	6819      	ldreq	r1, [r3, #0]
 800145e:	685b      	ldreq	r3, [r3, #4]
 8001460:	1809      	addeq	r1, r1, r0
 8001462:	6021      	streq	r1, [r4, #0]
 8001464:	6063      	str	r3, [r4, #4]
 8001466:	6054      	str	r4, [r2, #4]
 8001468:	e7cb      	b.n	8001402 <_free_r+0x22>
 800146a:	bd38      	pop	{r3, r4, r5, pc}
 800146c:	20000298 	.word	0x20000298

08001470 <sbrk_aligned>:
 8001470:	b570      	push	{r4, r5, r6, lr}
 8001472:	4e0e      	ldr	r6, [pc, #56]	; (80014ac <sbrk_aligned+0x3c>)
 8001474:	460c      	mov	r4, r1
 8001476:	6831      	ldr	r1, [r6, #0]
 8001478:	4605      	mov	r5, r0
 800147a:	b911      	cbnz	r1, 8001482 <sbrk_aligned+0x12>
 800147c:	f000 f8bc 	bl	80015f8 <_sbrk_r>
 8001480:	6030      	str	r0, [r6, #0]
 8001482:	4621      	mov	r1, r4
 8001484:	4628      	mov	r0, r5
 8001486:	f000 f8b7 	bl	80015f8 <_sbrk_r>
 800148a:	1c43      	adds	r3, r0, #1
 800148c:	d00a      	beq.n	80014a4 <sbrk_aligned+0x34>
 800148e:	1cc4      	adds	r4, r0, #3
 8001490:	f024 0403 	bic.w	r4, r4, #3
 8001494:	42a0      	cmp	r0, r4
 8001496:	d007      	beq.n	80014a8 <sbrk_aligned+0x38>
 8001498:	1a21      	subs	r1, r4, r0
 800149a:	4628      	mov	r0, r5
 800149c:	f000 f8ac 	bl	80015f8 <_sbrk_r>
 80014a0:	3001      	adds	r0, #1
 80014a2:	d101      	bne.n	80014a8 <sbrk_aligned+0x38>
 80014a4:	f04f 34ff 	mov.w	r4, #4294967295
 80014a8:	4620      	mov	r0, r4
 80014aa:	bd70      	pop	{r4, r5, r6, pc}
 80014ac:	2000029c 	.word	0x2000029c

080014b0 <_malloc_r>:
 80014b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014b4:	1ccd      	adds	r5, r1, #3
 80014b6:	f025 0503 	bic.w	r5, r5, #3
 80014ba:	3508      	adds	r5, #8
 80014bc:	2d0c      	cmp	r5, #12
 80014be:	bf38      	it	cc
 80014c0:	250c      	movcc	r5, #12
 80014c2:	2d00      	cmp	r5, #0
 80014c4:	4607      	mov	r7, r0
 80014c6:	db01      	blt.n	80014cc <_malloc_r+0x1c>
 80014c8:	42a9      	cmp	r1, r5
 80014ca:	d905      	bls.n	80014d8 <_malloc_r+0x28>
 80014cc:	230c      	movs	r3, #12
 80014ce:	2600      	movs	r6, #0
 80014d0:	603b      	str	r3, [r7, #0]
 80014d2:	4630      	mov	r0, r6
 80014d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014d8:	4e2e      	ldr	r6, [pc, #184]	; (8001594 <_malloc_r+0xe4>)
 80014da:	f000 f89d 	bl	8001618 <__malloc_lock>
 80014de:	6833      	ldr	r3, [r6, #0]
 80014e0:	461c      	mov	r4, r3
 80014e2:	bb34      	cbnz	r4, 8001532 <_malloc_r+0x82>
 80014e4:	4629      	mov	r1, r5
 80014e6:	4638      	mov	r0, r7
 80014e8:	f7ff ffc2 	bl	8001470 <sbrk_aligned>
 80014ec:	1c43      	adds	r3, r0, #1
 80014ee:	4604      	mov	r4, r0
 80014f0:	d14d      	bne.n	800158e <_malloc_r+0xde>
 80014f2:	6834      	ldr	r4, [r6, #0]
 80014f4:	4626      	mov	r6, r4
 80014f6:	2e00      	cmp	r6, #0
 80014f8:	d140      	bne.n	800157c <_malloc_r+0xcc>
 80014fa:	6823      	ldr	r3, [r4, #0]
 80014fc:	4631      	mov	r1, r6
 80014fe:	4638      	mov	r0, r7
 8001500:	eb04 0803 	add.w	r8, r4, r3
 8001504:	f000 f878 	bl	80015f8 <_sbrk_r>
 8001508:	4580      	cmp	r8, r0
 800150a:	d13a      	bne.n	8001582 <_malloc_r+0xd2>
 800150c:	6821      	ldr	r1, [r4, #0]
 800150e:	3503      	adds	r5, #3
 8001510:	1a6d      	subs	r5, r5, r1
 8001512:	f025 0503 	bic.w	r5, r5, #3
 8001516:	3508      	adds	r5, #8
 8001518:	2d0c      	cmp	r5, #12
 800151a:	bf38      	it	cc
 800151c:	250c      	movcc	r5, #12
 800151e:	4638      	mov	r0, r7
 8001520:	4629      	mov	r1, r5
 8001522:	f7ff ffa5 	bl	8001470 <sbrk_aligned>
 8001526:	3001      	adds	r0, #1
 8001528:	d02b      	beq.n	8001582 <_malloc_r+0xd2>
 800152a:	6823      	ldr	r3, [r4, #0]
 800152c:	442b      	add	r3, r5
 800152e:	6023      	str	r3, [r4, #0]
 8001530:	e00e      	b.n	8001550 <_malloc_r+0xa0>
 8001532:	6822      	ldr	r2, [r4, #0]
 8001534:	1b52      	subs	r2, r2, r5
 8001536:	d41e      	bmi.n	8001576 <_malloc_r+0xc6>
 8001538:	2a0b      	cmp	r2, #11
 800153a:	d916      	bls.n	800156a <_malloc_r+0xba>
 800153c:	1961      	adds	r1, r4, r5
 800153e:	42a3      	cmp	r3, r4
 8001540:	6025      	str	r5, [r4, #0]
 8001542:	bf18      	it	ne
 8001544:	6059      	strne	r1, [r3, #4]
 8001546:	6863      	ldr	r3, [r4, #4]
 8001548:	bf08      	it	eq
 800154a:	6031      	streq	r1, [r6, #0]
 800154c:	5162      	str	r2, [r4, r5]
 800154e:	604b      	str	r3, [r1, #4]
 8001550:	4638      	mov	r0, r7
 8001552:	f104 060b 	add.w	r6, r4, #11
 8001556:	f000 f865 	bl	8001624 <__malloc_unlock>
 800155a:	f026 0607 	bic.w	r6, r6, #7
 800155e:	1d23      	adds	r3, r4, #4
 8001560:	1af2      	subs	r2, r6, r3
 8001562:	d0b6      	beq.n	80014d2 <_malloc_r+0x22>
 8001564:	1b9b      	subs	r3, r3, r6
 8001566:	50a3      	str	r3, [r4, r2]
 8001568:	e7b3      	b.n	80014d2 <_malloc_r+0x22>
 800156a:	6862      	ldr	r2, [r4, #4]
 800156c:	42a3      	cmp	r3, r4
 800156e:	bf0c      	ite	eq
 8001570:	6032      	streq	r2, [r6, #0]
 8001572:	605a      	strne	r2, [r3, #4]
 8001574:	e7ec      	b.n	8001550 <_malloc_r+0xa0>
 8001576:	4623      	mov	r3, r4
 8001578:	6864      	ldr	r4, [r4, #4]
 800157a:	e7b2      	b.n	80014e2 <_malloc_r+0x32>
 800157c:	4634      	mov	r4, r6
 800157e:	6876      	ldr	r6, [r6, #4]
 8001580:	e7b9      	b.n	80014f6 <_malloc_r+0x46>
 8001582:	230c      	movs	r3, #12
 8001584:	4638      	mov	r0, r7
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	f000 f84c 	bl	8001624 <__malloc_unlock>
 800158c:	e7a1      	b.n	80014d2 <_malloc_r+0x22>
 800158e:	6025      	str	r5, [r4, #0]
 8001590:	e7de      	b.n	8001550 <_malloc_r+0xa0>
 8001592:	bf00      	nop
 8001594:	20000298 	.word	0x20000298

08001598 <_realloc_r>:
 8001598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800159c:	4680      	mov	r8, r0
 800159e:	4614      	mov	r4, r2
 80015a0:	460e      	mov	r6, r1
 80015a2:	b921      	cbnz	r1, 80015ae <_realloc_r+0x16>
 80015a4:	4611      	mov	r1, r2
 80015a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80015aa:	f7ff bf81 	b.w	80014b0 <_malloc_r>
 80015ae:	b92a      	cbnz	r2, 80015bc <_realloc_r+0x24>
 80015b0:	f7ff ff16 	bl	80013e0 <_free_r>
 80015b4:	4625      	mov	r5, r4
 80015b6:	4628      	mov	r0, r5
 80015b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015bc:	f000 f838 	bl	8001630 <_malloc_usable_size_r>
 80015c0:	4284      	cmp	r4, r0
 80015c2:	4607      	mov	r7, r0
 80015c4:	d802      	bhi.n	80015cc <_realloc_r+0x34>
 80015c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80015ca:	d812      	bhi.n	80015f2 <_realloc_r+0x5a>
 80015cc:	4621      	mov	r1, r4
 80015ce:	4640      	mov	r0, r8
 80015d0:	f7ff ff6e 	bl	80014b0 <_malloc_r>
 80015d4:	4605      	mov	r5, r0
 80015d6:	2800      	cmp	r0, #0
 80015d8:	d0ed      	beq.n	80015b6 <_realloc_r+0x1e>
 80015da:	42bc      	cmp	r4, r7
 80015dc:	4622      	mov	r2, r4
 80015de:	4631      	mov	r1, r6
 80015e0:	bf28      	it	cs
 80015e2:	463a      	movcs	r2, r7
 80015e4:	f7ff feee 	bl	80013c4 <memcpy>
 80015e8:	4631      	mov	r1, r6
 80015ea:	4640      	mov	r0, r8
 80015ec:	f7ff fef8 	bl	80013e0 <_free_r>
 80015f0:	e7e1      	b.n	80015b6 <_realloc_r+0x1e>
 80015f2:	4635      	mov	r5, r6
 80015f4:	e7df      	b.n	80015b6 <_realloc_r+0x1e>
	...

080015f8 <_sbrk_r>:
 80015f8:	b538      	push	{r3, r4, r5, lr}
 80015fa:	2300      	movs	r3, #0
 80015fc:	4d05      	ldr	r5, [pc, #20]	; (8001614 <_sbrk_r+0x1c>)
 80015fe:	4604      	mov	r4, r0
 8001600:	4608      	mov	r0, r1
 8001602:	602b      	str	r3, [r5, #0]
 8001604:	f7ff f974 	bl	80008f0 <_sbrk>
 8001608:	1c43      	adds	r3, r0, #1
 800160a:	d102      	bne.n	8001612 <_sbrk_r+0x1a>
 800160c:	682b      	ldr	r3, [r5, #0]
 800160e:	b103      	cbz	r3, 8001612 <_sbrk_r+0x1a>
 8001610:	6023      	str	r3, [r4, #0]
 8001612:	bd38      	pop	{r3, r4, r5, pc}
 8001614:	20000290 	.word	0x20000290

08001618 <__malloc_lock>:
 8001618:	4801      	ldr	r0, [pc, #4]	; (8001620 <__malloc_lock+0x8>)
 800161a:	f7ff bec3 	b.w	80013a4 <__retarget_lock_acquire_recursive>
 800161e:	bf00      	nop
 8001620:	20000294 	.word	0x20000294

08001624 <__malloc_unlock>:
 8001624:	4801      	ldr	r0, [pc, #4]	; (800162c <__malloc_unlock+0x8>)
 8001626:	f7ff bebe 	b.w	80013a6 <__retarget_lock_release_recursive>
 800162a:	bf00      	nop
 800162c:	20000294 	.word	0x20000294

08001630 <_malloc_usable_size_r>:
 8001630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001634:	1f18      	subs	r0, r3, #4
 8001636:	2b00      	cmp	r3, #0
 8001638:	bfbc      	itt	lt
 800163a:	580b      	ldrlt	r3, [r1, r0]
 800163c:	18c0      	addlt	r0, r0, r3
 800163e:	4770      	bx	lr

08001640 <_init>:
 8001640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001642:	bf00      	nop
 8001644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001646:	bc08      	pop	{r3}
 8001648:	469e      	mov	lr, r3
 800164a:	4770      	bx	lr

0800164c <_fini>:
 800164c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800164e:	bf00      	nop
 8001650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001652:	bc08      	pop	{r3}
 8001654:	469e      	mov	lr, r3
 8001656:	4770      	bx	lr
